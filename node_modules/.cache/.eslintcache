[{"/Users/emilyhuang/Documents/CSC309/team06/src/index.js":"1","/Users/emilyhuang/Documents/CSC309/team06/src/App.js":"2","/Users/emilyhuang/Documents/CSC309/team06/src/reportWebVitals.js":"3","/Users/emilyhuang/Documents/CSC309/team06/src/components/NavBar/adminNavBar.js":"4","/Users/emilyhuang/Documents/CSC309/team06/src/components/Signup/signup.js":"5","/Users/emilyhuang/Documents/CSC309/team06/src/components/ContactUs/contact.js":"6","/Users/emilyhuang/Documents/CSC309/team06/src/components/ContactUs/sent.js":"7","/Users/emilyhuang/Documents/CSC309/team06/src/components/AboutUs/about.js":"8","/Users/emilyhuang/Documents/CSC309/team06/src/components/Profile/profile.js":"9","/Users/emilyhuang/Documents/CSC309/team06/src/components/NavBar/index.js":"10","/Users/emilyhuang/Documents/CSC309/team06/src/components/Login/login.js":"11","/Users/emilyhuang/Documents/CSC309/team06/src/components/Signup/formTitle.js":"12","/Users/emilyhuang/Documents/CSC309/team06/src/components/Profile/done.js":"13","/Users/emilyhuang/Documents/CSC309/team06/src/components/Profile/edit.js":"14","/Users/emilyhuang/Documents/CSC309/team06/src/components/Signup/logoButton.js":"15","/Users/emilyhuang/Documents/CSC309/team06/src/components/Signup/linkButton.js":"16","/Users/emilyhuang/Documents/CSC309/team06/src/components/Profile/forumListItemOld.js":"17","/Users/emilyhuang/Documents/CSC309/team06/src/components/Profile/followers.js":"18","/Users/emilyhuang/Documents/CSC309/team06/src/components/Profile/following.js":"19","/Users/emilyhuang/Documents/CSC309/team06/src/components/Profile/handleClosing.js":"20","/Users/emilyhuang/Documents/CSC309/team06/src/components/Home/appBar.js":"21","/Users/emilyhuang/Documents/CSC309/team06/src/components/Footer/footer.js":"22","/Users/emilyhuang/Documents/CSC309/team06/src/components/FinancialAdvisorForm/financialAdvisorForm.js":"23","/Users/emilyhuang/Documents/CSC309/team06/src/components/RegularUserForm/regularUserForm.js":"24","/Users/emilyhuang/Documents/CSC309/team06/src/components/Profile/data.js":"25","/Users/emilyhuang/Documents/CSC309/team06/src/components/Home/index.js":"26","/Users/emilyhuang/Documents/CSC309/team06/src/components/Investments/index.js":"27","/Users/emilyhuang/Documents/CSC309/team06/src/components/Spendings/index.js":"28","/Users/emilyhuang/Documents/CSC309/team06/src/components/Community/index.js":"29","/Users/emilyhuang/Documents/CSC309/team06/src/components/Community/comment.js":"30","/Users/emilyhuang/Documents/CSC309/team06/src/components/Sliding/sliding.js":"31","/Users/emilyhuang/Documents/CSC309/team06/src/components/Community/forumList.js":"32","/Users/emilyhuang/Documents/CSC309/team06/src/components/Community/sidebar.js":"33","/Users/emilyhuang/Documents/CSC309/team06/src/components/Investments/PieChart.js":"34","/Users/emilyhuang/Documents/CSC309/team06/src/components/Investments/Calculator.js":"35","/Users/emilyhuang/Documents/CSC309/team06/src/components/Investments/GeneralCard.js":"36","/Users/emilyhuang/Documents/CSC309/team06/src/components/Investments/SortButton.js":"37","/Users/emilyhuang/Documents/CSC309/team06/src/components/Spendings/data.js":"38","/Users/emilyhuang/Documents/CSC309/team06/src/components/Community/forumListItem.js":"39","/Users/emilyhuang/Documents/CSC309/team06/src/components/Table/index.js":"40","/Users/emilyhuang/Documents/CSC309/team06/src/components/TableRow/index.js":"41"},{"size":500,"mtime":1613684214120,"results":"42","hashOfConfig":"43"},{"size":4114,"mtime":1617064268108,"results":"44","hashOfConfig":"43"},{"size":362,"mtime":1613684214121,"results":"45","hashOfConfig":"43"},{"size":2348,"mtime":1617064268122,"results":"46","hashOfConfig":"43"},{"size":8020,"mtime":1617064268125,"results":"47","hashOfConfig":"43"},{"size":9516,"mtime":1617064268114,"results":"48","hashOfConfig":"43"},{"size":2257,"mtime":1617064268114,"results":"49","hashOfConfig":"43"},{"size":4490,"mtime":1617064268109,"results":"50","hashOfConfig":"43"},{"size":33423,"mtime":1617064268125,"results":"51","hashOfConfig":"43"},{"size":2651,"mtime":1615373758775,"results":"52","hashOfConfig":"43"},{"size":6126,"mtime":1617064268121,"results":"53","hashOfConfig":"43"},{"size":867,"mtime":1615363954978,"results":"54","hashOfConfig":"43"},{"size":2830,"mtime":1615363954976,"results":"55","hashOfConfig":"43"},{"size":5631,"mtime":1615363954977,"results":"56","hashOfConfig":"43"},{"size":748,"mtime":1615373758779,"results":"57","hashOfConfig":"43"},{"size":622,"mtime":1615363954978,"results":"58","hashOfConfig":"43"},{"size":9528,"mtime":1617064268123,"results":"59","hashOfConfig":"43"},{"size":1699,"mtime":1615373758776,"results":"60","hashOfConfig":"43"},{"size":1709,"mtime":1615373758776,"results":"61","hashOfConfig":"43"},{"size":595,"mtime":1617064268124,"results":"62","hashOfConfig":"43"},{"size":2274,"mtime":1615373758768,"results":"63","hashOfConfig":"43"},{"size":3487,"mtime":1615411551065,"results":"64","hashOfConfig":"43"},{"size":8380,"mtime":1615363954940,"results":"65","hashOfConfig":"43"},{"size":8575,"mtime":1615363954978,"results":"66","hashOfConfig":"43"},{"size":908,"mtime":1617064268123,"results":"67","hashOfConfig":"43"},{"size":515,"mtime":1615363954942,"results":"68","hashOfConfig":"43"},{"size":8314,"mtime":1617064268120,"results":"69","hashOfConfig":"43"},{"size":25574,"mtime":1617064268127,"results":"70","hashOfConfig":"43"},{"size":4907,"mtime":1617064268112,"results":"71","hashOfConfig":"43"},{"size":1101,"mtime":1615363954937,"results":"72","hashOfConfig":"43"},{"size":4591,"mtime":1617064268126,"results":"73","hashOfConfig":"43"},{"size":35477,"mtime":1617064268111,"results":"74","hashOfConfig":"43"},{"size":3447,"mtime":1615363954939,"results":"75","hashOfConfig":"43"},{"size":10412,"mtime":1617064268118,"results":"76","hashOfConfig":"43"},{"size":7836,"mtime":1617064268116,"results":"77","hashOfConfig":"43"},{"size":3398,"mtime":1617064268117,"results":"78","hashOfConfig":"43"},{"size":995,"mtime":1615411551069,"results":"79","hashOfConfig":"43"},{"size":6888,"mtime":1617064268126,"results":"80","hashOfConfig":"43"},{"size":16520,"mtime":1615363954938,"results":"81","hashOfConfig":"43"},{"size":9676,"mtime":1615373758783,"results":"82","hashOfConfig":"43"},{"size":12556,"mtime":1615373758785,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"p7gcbv",{"filePath":"86","messages":"87","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":48,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":44,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190"},"/Users/emilyhuang/Documents/CSC309/team06/src/index.js",[],"/Users/emilyhuang/Documents/CSC309/team06/src/App.js",["191","192","193","194","195","196","197","198","199","200","201","202","203","204","205"],"import React from 'react';\n\nimport { Route, Switch, BrowserRouter } from 'react-router-dom';\nimport './App.css';\n\nimport Spendings from './components/Spendings'\nimport Investments from './components/Investments'\nimport Community from './components/Community'\nimport NavBar from './components/NavBar/index.js';\nimport AdminNavBar from './components/NavBar/adminNavBar.js';\nimport Home from './components/Home';\nimport Login from './components/Login/login';\nimport SignUp from './components/Signup/signup.js';\nimport Contact from './components/ContactUs/contact.js';\nimport Sent from './components/ContactUs/sent.js';\nimport About from './components/AboutUs/about.js';\nimport Profile from './components/Profile/profile.js';\n\nclass App extends React.Component {\n\n  state = {\n    loggedIn: false,\n    username: \"\",\n    password: \"\",\n    userLevel: \"\",\n  }\n\n  loginHandler = (username, password) => {\n\n    if (username == 'user' && password == 'user') {\n      this.state.loggedIn = true;\n      this.state.username = username;\n      this.state.password = password;\n      this.state.userLevel = \"User\";\n    }\n    else if (username == 'admin' && password == 'admin') {\n      this.state.loggedIn = true;\n      this.state.username = username;\n      this.state.password = password;\n      this.state.userLevel = \"Financial Advisor\";\n    }\n    else this.state.loggedIn = false;\n\n    this.setState({\n      loggedIn: this.state.loggedIn,\n      username: this.state.username,\n      password: this.state.password,\n      userLevel: this.state.userLevel,\n    })\n  }\n\n  handleLogOut = () => {\n    this.state.loggedIn = false;\n    this.state.userLevel = \"\";\n    this.setState({\n      loggedIn: this.state.loggedIn,\n      userLevel: this.state.userLevel,\n    })\n  }\n\n  render() {\n\n    return (\n\n      <div>\n        <BrowserRouter>\n\n          {this.state.userLevel === \"Financial Advisor\" ?\n            <div>\n              <AdminNavBar\n                username={this.state.username}\n                password={this.state.password} />\n            </div>\n            : this.state.loggedIn ?\n              <div>\n                <NavBar\n                  username={this.state.username}\n                  password={this.state.password} />\n              </div>\n              : null\n          }\n\n          <Switch>\n\n            <Route exact path='/'\n              render={() => (<Home\n                loggedIn={this.state.loggedIn} />)} />\n\n            <Route exact path='/login'\n              render={() => (<Login\n                loginHandler={this.loginHandler}\n              />)} />\n\n            <Route exact path='/signup'\n              render={() => (<SignUp />)} />\n\n            <Route exact path='/spendings'\n              render={() => (<Spendings\n                loggedIn={this.state.loggedIn}\n                username={this.state.username}\n                password={this.state.password}\n              />)} />\n\n            <Route exact path='/investments'\n              render={() => (<Investments\n                loggedIn={this.state.loggedIn}\n              />)} />\n\n            <Route exact path='/community'\n              render={() => (<Community\n                loggedIn={this.state.loggedIn}\n                username={this.state.username}\n                usertype={this.state.userLevel} />)} />\n\n            <Route exact path='/contact'\n              render={() => (<Contact\n                loggedIn={this.state.loggedIn} />)} />\n\n            <Route exact path='/sent'\n              render={() => (<Sent\n                loggedIn={this.state.loggedIn} />)} />\n\n            <Route exact path='/about'\n              render={() => (<About\n                loggedIn={this.state.loggedIn} />)} />\n\n            <Route exact path='/profile'\n              render={() => (<Profile\n                handleLogOut={this.handleLogOut}\n                loggedIn={this.state.loggedIn}\n                username={this.state.username}\n                password={this.state.password}\n                userLevel={this.state.userLevel}\n              />)} />\n\n          </Switch>\n\n\n        </BrowserRouter>\n\n\n      </div>\n\n    )\n\n  }\n\n}\n\nexport default App;","/Users/emilyhuang/Documents/CSC309/team06/src/reportWebVitals.js",[],"/Users/emilyhuang/Documents/CSC309/team06/src/components/NavBar/adminNavBar.js",["206","207"],"import React from 'react';\nimport { AppBar, Tab, Tabs } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport {\n  withStyles,\n  Toolbar,\n  Typography,\n  Avatar,\n  createMuiTheme,\n  ThemeProvider\n} from '@material-ui/core';\nimport { deepPurple } from '@material-ui/core/colors';\n\nconst useStyles = theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  title: {\n    flexGrow: 1,\n    cursor: 'pointer',\n  },\n  tabs: {\n    marginLeft: theme.spacing(3),\n  },\n  signInButton: {\n    float: 'right',\n    marginRight: 10,\n  },\n  logInButton: {\n    float: 'right',\n    margin: 10,\n  },\n  username: {\n    marginLeft: theme.spacing(120),\n  },\n  avatar: {\n    marginLeft: theme.spacing(2),\n    backgroundColor: deepPurple[800],\n  },\n  removeLine: {\n    textDecoration: 'none',\n    color: 'black'\n  },\n  appbar: {\n    zIndex: theme.zIndex.drawer + 1,\n  }\n})\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: deepPurple[800],\n    },\n    secondary: {\n      main: deepPurple[100],\n    }\n  },\n  typography: {\n    fontFamily: [\n      'Poppins',\n      'sans-serif',\n    ].join(','),\n  },\n});\n\nclass AdminNavBar extends React.Component {\n\n  render() {\n    const { classes, username, password } = this.props;\n    const firstLetter = username.charAt(0).toUpperCase();\n\n    return (\n      <ThemeProvider theme={theme}>\n        <div className={classes.root}>\n          <AppBar position=\"sticky\" color=\"secondary\" className={ classes.appbar }>\n            <Toolbar>\n              <Link to={'/'} className={classes.removeLine}>\n                <Typography variant=\"h6\" className={classes.title}>\n                  Money Manager\n                </Typography>\n              </Link>\n\n              <Tabs inkBarStyle={{ background: 'black' }} centered>\n\n                <Link to={'/community'} className={classes.tabs, classes.removeLine}>\n                  <Tab label=\"Community\" />\n                </Link>\n\n              </Tabs>\n\n              <Typography variant=\"subtitle1\" className={classes.username}>\n                {username}\n              </Typography>\n\n              <Link to={'/profile'}>\n                <Avatar className={classes.avatar}>{firstLetter}</Avatar>\n              </Link>\n\n            </Toolbar>\n          </AppBar>\n        </div>\n      </ThemeProvider>\n\n    )\n\n  }\n\n}\n\nexport default withStyles(useStyles)(AdminNavBar);","/Users/emilyhuang/Documents/CSC309/team06/src/components/Signup/signup.js",["208","209","210","211","212"],"import React from 'react';\nimport { withStyles,\n        FormControl,\n        InputLabel,\n        MenuItem,\n        Select,\n        AppBar, \n        Toolbar, \n        Button,\n        Grid,\n        createMuiTheme,\n        Paper,\n        ThemeProvider} from '@material-ui/core';\nimport { deepPurple } from '@material-ui/core/colors';\nimport { withRouter } from 'react-router-dom';\nimport Footer from '../Footer/footer.js';\nimport RegularUserForm from '../RegularUserForm/regularUserForm.js';\nimport FinancialAdvisorForm from '../FinancialAdvisorForm/financialAdvisorForm.js';\nimport LinkButton from './linkButton.js';\nimport LogoButton from './logoButton.js';\nimport FormTitle from './formTitle.js';\n\nconst useStyles = theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  grid: {\n    direction: 'row',\n    justifyContent: 'center',\n  },\n  paper: {\n    marginTop: theme.spacing(6),\n    display: 'flex',\n    flexDirection: 'column',  \n    borderRadius: 10,\n    borderColor: deepPurple[800],\n  },\n  form: {\n    margin: theme.spacing(3),\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 250,\n  },\n  signInButton: {\n    float: 'right',\n    marginTop: theme.spacing(2),\n    marginLeft: theme.spacing(1),\n  },\n  footer: {\n    marginTop: theme.spacing(5),\n  }\n});\n\nconst theme = createMuiTheme({\n  palette: {\n      primary: {\n          main: deepPurple[800],\n      },\n      secondary: {\n          main: deepPurple[100],\n      }\n  },\n  typography: {\n      fontFamily: [\n          'Poppins',\n          'sans-serif',\n      ].join(','),\n  },\n});\n\n// All of the information filled on the form will be stored into a database\n// If it is admin, there will be a required admin code that will be provided\n// by the people who manages the website\n\nclass SignUp extends React.Component {\n\n  state = {\n    userLevel: \"Regular User\",\n    firstName: \"\",\n    lastName: \"\",\n    userName: \"\",\n    birthday: \"\",\n    gender: \"\",\n    occupation: \"\",\n    salary: \"\",\n    email: \"\",\n    createdPassword: \"\",\n    confirmPassword: \"\",\n    passwordLengthError: false,\n    passwordConfirmError: false, \n    signedUp: false,\n  };\n\n  handleInputChange = (event) => {\n\n    // get the value we type in \n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n\n    // state is updated and value is also updated in JSX\n    // the square bracket dynamically changes the name \n    this.setState({\n      [name]: value\n    })\n  };\n\n  // check the length of the password and see if its 8 characters and above\n  checkLength = (event) => {\n    // get the value we type in \n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    })\n\n    if(value.length >= 8) {\n      this.state.passwordLengthError = false;\n      console.log(\"good password\")\n    } else {\n      this.state.passwordLengthError = true;\n      console.log(\"The minimum number of characters for password is 8!\")\n    }\n  }\n\n  // check if the confirmed password is input correctly as the created \n  // password\n  handleConfirmPassword = (event) => {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    \n    this.setState({\n      [name]: value\n    })\n\n    if(value !== this.state.createdPassword) {\n      this.state.passwordConfirmError = true;\n      console.log(\"password did not match\");\n    } else {\n      this.state.passwordConfirmError = false;\n      console.log(\"password match\")\n    }\n  }\n\n  /********************************************************************************\n  for phase 2, you would be making a server call to add the form information and \n  store it in the database\n  *********************************************************************************/\n  submitValidation = (event) => {\n    event.preventDefault();\n    this.state.signedUp = true;\n\n    this.setState({\n      signedUp: this.state.signedUp,\n    })\n    this.props.history.push('/spendings');\n    return;\n  }\n\n  render() {\n    \n    const { classes } = this.props;\n\n    return (\n\n      <ThemeProvider theme={theme}>\n        <div className={classes.root}>\n          <AppBar position=\"sticky\" color=\"secondary\">\n            <Toolbar>\n\n              <LogoButton buttonTitle=\"Money Manager\" />\n              <LinkButton buttonTitle=\"Back to Home\" />\n      \n            </Toolbar>\n          </AppBar>\n\n          <Grid container className={classes.grid} >\n            <Paper variant=\"outlined\" elevation={3} className={classes.paper}>\n              <FormTitle firstTitle=\"Welcome to Money Manager!\"\n                         subTitle=\"Please fill out the rest of the information\"\n              />\n\n              <form onSubmit={ this.submitValidation } className={classes.form}>\n\n                <Grid container direction=\"row\" spacing={1}>\n                  <FormControl variant=\"outlined\" className={classes.formControl}>\n                    <InputLabel id=\"user-label\">Sign up as:</InputLabel>\n                    <Select labelId=\"user-label\" \n                            id=\"user\"\n                            value={this.state.userLevel}\n                            name=\"userLevel\"\n                            onChange={this.handleInputChange}\n                            label=\"Sign up as:\"\n                    >\n                      <MenuItem value={\"Regular User\"}>Regular user</MenuItem>\n                      <MenuItem value={\"Financial Advisor\"}>Financial advisor</MenuItem>\n                    </Select>\n                  </FormControl>\n                </Grid>\n\n                { this.state.userLevel === \"Regular User\" ? \n                \n                  <RegularUserForm \n                    firstName={ this.state.firstName }\n                    lastName={ this.state.lastName }\n                    userName={ this.state.userName }\n                    birthday={ this.state.birthday }\n                    gender={ this.state.gender }\n                    occupation={ this.state.occupation }\n                    salary={ this.state.salary }\n                    email={ this.state.email }\n                    createdPassword={ this.state.createdPassword }\n                    checkLength={ this.checkLength }\n                    passwordLengthError={ this.state.passwordLengthError }\n                    passwordConfirmError={ this.state.passwordConfirmError }\n                    confirmPassword={ this.state.confirmPassword }\n                    handleConfirmPassword={ this.handleConfirmPassword }\n                    handleInputChange={this.handleInputChange}\n                  />\n                :\n                  <FinancialAdvisorForm\n                    firstName={ this.state.firstName }\n                    handleInputChange={ this.handleInputChange }\n                    lastName={ this.state.lastName }\n                    userName={ this.state.userName }\n                    birthday={ this.state.birthday }\n                    gender={ this.state.gender }\n                    email={ this.state.email }\n                    passwordLengthError={ this.state.passwordLengthError }\n                    createdPassword={ this.state.createdPassword }\n                    checkLength={ this.checkLength }\n                    passwordConfirmError={ this.state.passwordConfirmError }\n                    confirmPassword={ this.state.confirmPassword }\n                    handleConfirmPassword={ this.handleConfirmPassword }\n                    adminPasscode={ this.state.adminPasscode }\n                  />\n                }\n                \n                <Button variant=\"contained\" \n                        color=\"primary\" \n                        type=\"submit\" \n                        className={classes.signInButton}>\n                  Sign up\n                </Button>\n              </form>\n            </Paper>\n          </Grid>\n\n          <div className={classes.footer}>\n            <Footer />\n          </div>\n\n        </div>\n      </ThemeProvider>\n    )\n  }\n}\n\nexport default withRouter((withStyles(useStyles)(SignUp)));","/Users/emilyhuang/Documents/CSC309/team06/src/components/ContactUs/contact.js",[],"/Users/emilyhuang/Documents/CSC309/team06/src/components/ContactUs/sent.js",["213","214","215","216","217","218","219","220","221"],"import React from 'react';\nimport { Typography, Button, withStyles, createMuiTheme, Grid, Paper, FormControl, InputLabel, Select, MenuItem, ThemeProvider, TextField } from '@material-ui/core';\nimport HomeAppBar from './../Home/appBar.js';\nimport Footer from './../Footer/footer.js';\nimport { deepPurple, grey } from '@material-ui/core/colors';\n\nconst useStyles = theme => ({\n\n    contact: {\n        position: 'relative',\n        justifyContent: 'center',\n        marginTop: theme.spacing(3),\n        marginLeft: theme.spacing(2),\n    },\n    subtitle: {\n        position: 'relative',\n        marginLeft: theme.spacing(2),\n        marginBottom: theme.spacing(49.2),\n    },\n\n})\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: deepPurple[800],\n        },\n        secondary: {\n            main: deepPurple[100],\n        }\n    },\n    typography: {\n        fontFamily: [\n            'Poppins',\n            'sans-serif',\n        ].join(','),\n    },\n});\n\nclass Sent extends React.Component {\n\n    state = {\n        userLevel: \"Regular User\",\n        request: \"\",\n        email: \"\",\n        additional: \"\",\n    }\n\n    handleInputChange = (event) => {\n\n        // get the value we type in \n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n\n        // state is updated and value is also updated in JSX\n        // the square bracket dynamically changes the name \n        this.setState({\n            [name]: value\n        })\n    };\n\n    render() {\n        const { classes, loggedIn } = this.props;\n\n        return (\n            <ThemeProvider theme={theme}>\n                <div>\n                    <HomeAppBar loggedIn={loggedIn} />\n                    <Typography variant=\"h2\" className={classes.contact}>\n                        Thank you. <br></br>\n                        Your request has been successfully sent!\n                    </Typography>\n                    <Typography variant=\"h6\" className={classes.subtitle}>\n                        The team will get in touch with you shortly.\n                    </Typography>\n\n                    <Footer />\n                </div>\n            </ThemeProvider>\n        )\n    }\n}\n\nexport default withStyles(useStyles)(Sent);","/Users/emilyhuang/Documents/CSC309/team06/src/components/AboutUs/about.js",[],"/Users/emilyhuang/Documents/CSC309/team06/src/components/Profile/profile.js",["222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269"],"import React from 'react';\nimport { Typography, \n        Grid,\n        Paper,\n        AppBar,\n        Toolbar,\n        Button,\n        Drawer,\n        withStyles, \n        createMuiTheme,\n        Tab,\n        Tabs,\n        Avatar,\n        ThemeProvider, \n        List,\n        Dialog,\n        DialogTitle,\n        Divider} from '@material-ui/core';\nimport { deepPurple } from '@material-ui/core/colors';\nimport { Link } from 'react-router-dom';\nimport { Redirect } from 'react-router';\nimport ForumListItem from './forumListItemOld.js';\nimport PostAddIcon from '@material-ui/icons/PostAdd';\nimport Edit from './edit.js';\nimport Done from './done.js';\nimport Draggable from 'react-draggable';\nimport { followingData, followerData } from './data';\nimport Followers from './followers.js';\nimport Following from './following.js';\nimport HandleClosing from './handleClosing.js';\n\nconst drawerWidth = 400;\n\nconst useStyles = theme => ({\n    root: {\n        display: 'flex',\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n    },\n    drawerPaper: {\n        width: drawerWidth,\n        background: deepPurple[50],\n    },\n    drawerContainer: {\n        overflow: 'auto',\n    },\n    content: {\n        marginTop: theme.spacing(3),\n    },\n    numberGroup: {\n        paddingLeft: theme.spacing(10),\n    },\n    tabs: {\n        marginLeft: theme.spacing(3),\n    },\n    avatar: {\n        height: '100px',\n        width: '100px',\n        fontSize: '2em',\n        marginTop: theme.spacing(3),\n        marginLeft: theme.spacing(18.5),\n        backgroundColor: deepPurple[800],\n    },\n    editButton: {\n        float: 'right',\n        marginTop: theme.spacing(10),\n        marginRight: theme.spacing(10),\n    },\n    doneButton: {\n        float: 'right',\n        marginTop: theme.spacing(2),\n        marginRight: theme.spacing(3),\n        marginBottom: theme.spacing(3),\n    },\n    logoutButton: {\n        float: 'right',\n        marginTop: theme.spacing(10),\n        marginRight: theme.spacing(3),\n    },\n    group: {\n        float: 'right',\n        marginRight: theme.spacing(20),\n    },\n    group1: {\n        float: 'right',\n        marginRight: theme.spacing(3),\n    },\n    name: {\n        fontWeight: 'bold',\n        fontSize: '1.6em',\n        borderBottom: 'none',\n    },\n    textfield: {\n        minWidth: 340,\n    },\n    number: {\n        marginLeft: theme.spacing(3),\n    },\n    number1: {\n        marginLeft: theme.spacing(2),\n    },\n    post: {\n        marginTop: theme.spacing(10),\n        marginLeft: theme.spacing(3),\n    },\n    nothing: {\n        marginTop: theme.spacing(3),\n        marginLeft: theme.spacing(30),\n    },\n    postIcon: {\n        fontSize: '5em',\n        position: 'relative',\n        marginTop: theme.spacing(10),\n        left: '50%',\n    },\n    forumList: {\n        backgroundColor: '#f0f0f0',\n        borderRadius: 5,\n        margin: theme.spacing(3),\n    },\n    removeLine: {\n        textDecoration: 'none',\n        color: 'black'\n    },\n    followersButton: {\n        marginLeft: theme.spacing(3),\n        fontSize: '1.2em',\n        minWidth: 150,\n    },\n    followingButton: {\n        fontSize: '1.2em',\n        minWidth: 150,\n    },\n    postButton: {\n        fontSize: '1.2em',\n        minWidth: 150,\n        marginRight: theme.spacing(5),\n    },\n    follow: {\n        float: 'right',\n        marginLeft: theme.spacing(3),\n        marginRight: theme.spacing(3),\n        marginBottom: theme.spacing(1),\n    },\n    unfollow: {\n        float: 'right',\n    },\n    followerdata: {\n        float: 'left',\n        marginLeft: theme.spacing(3),\n        marginBottom: theme.spacing(1),\n    },\n    paper: {\n        width: '80%',\n        maxHeight: 435,\n    },\n    dialogue_cursor: {\n        cursor: 'move'\n    }\n})\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: deepPurple[800],\n        },\n        secondary: {\n            main: deepPurple[100],\n        }\n    },\n    typography: {\n        fontFamily: [\n            'Poppins',\n            'sans-serif',\n        ].join(','),\n    },\n});\n\n// Code taken from the material-ui website, under draggable dialog\nfunction PaperComponent(props) {\n    return (\n      <Draggable handle=\"#draggable\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\n        <Paper {...props} />\n      </Draggable>\n    );\n}\n\n// All the profile information should be fetched from the database\n// that stores the user information\nclass Profile extends React.Component {\n\n    state = {\n        // if false, display edit; if true, display Done\n        followerData: followerData,\n        followingData: followingData,\n        edit: false,\n        logout: false,\n        openFollowers: false,\n        openFollowing: false,\n        followed: false,\n        userLevel: \"\",\n        avatar: \"\",\n        bio: \"An individual that is pursuing one's passions.\",\n        username: \"user\",\n        name: \"User X\",\n        email: \"user@123.com\",\n        occupation: \"student\",\n        birthday: \"2021-03-08\",\n        openNewPost: false,\n        openManagePost: false,\n        author: \"\",\n        title: \"\",\n        authorAvatar: \"\",\n        content: \"\",\n        category: \"\",\n        postFilter: \"\",\n        sortOrder: \"\",\n        commenter: \"\",\n        commentContent: \"\",\n        userInfo: {\n            username: \"\",\n            usertype: \"\",\n            userUpvotedPosts: [],\n            userDownvotedPosts: [],\n            userFollows: [],\n        },\n        posts:  \"\",\n    }\n\n    // Check the state of the edit, and changes UI accordingly\n    handleEdit = () => {\n        this.setState({\n            edit: !this.state.edit,\n        })\n    }\n\n    // Change the state of openFollowers, this is for opening \n    // the dialog\n    handleFollowersOpen = () => {\n        this.state.openFollowers = true;\n        this.setState({\n            openFollowers: this.state.openFollowers,\n        })\n    }\n\n    // Change the state of openFollowers, this is for closing \n    // the dialog\n    handleFollowersClose = () => {\n        this.state.openFollowers = false;\n\n        this.setState({\n            openFollowers: this.state.openFollowers,\n        })\n    }\n\n    // Change the state of openFollowing, this is for opening \n    // the dialog\n    handleFollowingOpen = () => {\n        this.state.openFollowing = true;\n        this.setState({\n            openFollowing: this.state.openFollowing,\n        })\n    }\n\n    // Change the state of openFollowing, this is for closing \n    // the dialog\n    handleFollowingClose = () => {\n        this.state.openFollowing = false;\n        this.setState({\n            openFollowing: this.state.openFollowing,\n        })\n    }\n\n    /********************************************************************************\n    for phase 2, you would be making a server call to check the list of followers\n    and its following state\n    *********************************************************************************/\n    handleFollow = (wantToFollow) => {\n        const index = this.state.followerData.indexOf(wantToFollow);\n        this.state.followingData.push(wantToFollow)\n        this.state.followerData[index][\"following\"] = true;\n        this.setState({\n            followerData: this.state.followerData,\n            followingData: this.state.followingData\n        })\n    }\n\n    /********************************************************************************\n    for phase 2, you would be making a server call to check the list of followers\n    and its following state\n    *********************************************************************************/\n    handleUnfollow = (wantToUnfollow) => {\n        const index = this.state.followerData.indexOf(wantToUnfollow)\n        const keep = this.state.followingData.filter(f => f[\"id\"] != wantToUnfollow[\"id\"])\n        this.state.followingData = keep\n        this.state.followerData[index][\"following\"] = false;\n        this.setState({\n            followerData: this.state.followerData,\n            followingData: this.state.followingData\n        })\n    }\n\n    /********************************************************************************\n    for phase 2, you would be making a server call to check the list of following users\n    and its following state\n    *********************************************************************************/\n    handleFollowing = (wantToFollow) => {\n        const index = this.state.followingData.indexOf(wantToFollow)\n        this.state.followingData[index][\"following\"] = true;\n        this.setState({\n            followingData: this.state.followingData,\n        })\n    }\n\n    /********************************************************************************\n    for phase 2, you would be making a server call to check the list of following users\n    and its following state\n    *********************************************************************************/\n    handleUnfollowing = (wantToUnfollow) => {\n        const index = this.state.followingData.indexOf(wantToUnfollow)\n        const keep = this.state.followingData.filter(f => f != wantToUnfollow)\n        this.state.followingData = keep\n        const changeFollowingStatus = this.state.followerData.filter(f => f[\"id\"] == wantToUnfollow[\"id\"])\n        const indexForChangingFollowingStatus = this.state.followerData.indexOf(changeFollowingStatus[0])\n        if (indexForChangingFollowingStatus != -1) this.state.followerData[indexForChangingFollowingStatus][\"following\"] = false\n        \n        this.setState({\n            followingData: this.state.followingData,\n            followerData: this.state.followerData\n        })\n    }\n\n    handleInputChange = (event) => {\n    \n        // get the value we type in \n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        \n        /********************************************************************************\n        for phase 2, you would be making a server call to get the username of the post\n        author, and update the avatar, author, or commenter accordingly\n        *********************************************************************************/\n        if(name == \"username\") {\n            for(let i = 0; i < this.state.posts.length; i++) {\n                this.state.posts[i].author = value;\n                this.state.posts[i].authorAvatar = value.charAt(0).toUpperCase();\n            }\n            this.state.avatar = value.charAt(0).toUpperCase();\n            this.state.author = value;\n            this.state.commenter = value;\n        }\n        // state is updated and value is also updated in JSX\n        // the square bracket dynamically changes the name \n        this.setState({\n          [name]: value\n        })\n    };\n\n    // These code are taken from ForumList, check ForumList for more details\n    postComment = (target) => {\n        const targetPostID = target.postID\n        const targetPostIndex = this.state.posts.findIndex(post => post.postID === targetPostID)\n        \n        const targetPost = this.state.posts.filter((p) => { return p.postID === targetPostID })\n        const targetPostComments = targetPost[0].comments\n    \n        const newComment = {\n          commenter: this.state.commenter,\n          commentContent: target.comment\n        }\n    \n        targetPostComments.push(newComment)\n        targetPost[0].comments = targetPostComments\n        \n        const otherPosts = this.state.posts.filter((p) => { return p.postID !== targetPostID })\n    \n        otherPosts.splice(targetPostIndex, 0, targetPost[0])\n    \n        this.setState({ posts: otherPosts })\n    }\n\n    // These code are taken from ForumList, check forumList for more details\n    deletePosts = (target) => {\n        const targetPostID = target.postID\n        const otherPosts = this.state.posts.filter((p) => { return p.postID !== targetPostID })\n        this.setState({ posts: otherPosts })\n\n        const userInfo = this.state.userInfo\n        const index = userInfo.userUpvotedPosts.indexOf(targetPostID)\n        if (index !== -1) {\n            userInfo.userUpvotedPosts.splice(index, 1)\n            this.setState({ userInfo: userInfo })\n        }\n    }\n\n    // These code are taken from ForumList, check forumList for more details\n    addUpvote = (target) => {\n        const targetPostID = target.postID\n        const targetPostIndex = this.state.posts.findIndex(post => post.postID === targetPostID)\n        const targetPost = this.state.posts.filter((p) => { return p.postID === targetPostID })\n        targetPost[0].numUpvotes = targetPost[0].numUpvotes + 1\n        const otherPosts = this.state.posts.filter((p) => { return p.postID !== targetPostID })\n        otherPosts.splice(targetPostIndex, 0, targetPost[0])\n        this.setState({ posts: otherPosts })\n\n        const userInfo = this.state.userInfo\n        userInfo.userUpvotedPosts.push(targetPostID)\n        this.setState({ userInfo: userInfo })\n    }\n\n    // These code are taken from ForumList, check forumList for more details\n    minusUpvote = (target) => {\n        const targetPostID = target.postID\n        const targetPostIndex = this.state.posts.findIndex(post => post.postID === targetPostID)\n        const targetPost = this.state.posts.filter((p) => { return p.postID === targetPostID })\n        targetPost[0].numUpvotes = targetPost[0].numUpvotes - 1\n        const otherPosts = this.state.posts.filter((p) => { return p.postID !== targetPostID })\n        otherPosts.splice(targetPostIndex, 0, targetPost[0])\n        this.setState({ posts: otherPosts })\n\n        const userInfo = this.state.userInfo\n        const index = userInfo.userUpvotedPosts.indexOf(targetPostID)\n        if (index !== -1) userInfo.userUpvotedPosts.splice(index, 1)\n        this.setState({ userInfo: userInfo })\n    }\n\n    // These code are taken from ForumList, check forumList for more details\n    addDownvote = (target) => {\n        const targetPostID = target.postID\n        const targetPostIndex = this.state.posts.findIndex(post => post.postID === targetPostID)\n        const targetPost = this.state.posts.filter((p) => { return p.postID === targetPostID })\n        targetPost[0].numDownvotes = targetPost[0].numDownvotes + 1\n        const otherPosts = this.state.posts.filter((p) => { return p.postID !== targetPostID })\n        otherPosts.splice(targetPostIndex, 0, targetPost[0])\n        this.setState({ posts: otherPosts })\n\n        const userInfo = this.state.userInfo\n        userInfo.userDownvotedPosts.push(targetPostID)\n        this.setState({ userInfo: userInfo })\n    }\n\n    // These code are taken from ForumList, check forumList for more details\n    minusDownvote = (target) => {\n        const targetPostID = target.postID\n        const targetPostIndex = this.state.posts.findIndex(post => post.postID === targetPostID)\n        const targetPost = this.state.posts.filter((p) => { return p.postID === targetPostID })\n        targetPost[0].numDownvotes = targetPost[0].numDownvotes - 1\n        const otherPosts = this.state.posts.filter((p) => { return p.postID !== targetPostID })\n        otherPosts.splice(targetPostIndex, 0, targetPost[0])\n        this.setState({ posts: otherPosts })\n\n        const userInfo = this.state.userInfo\n        const index = userInfo.userDownvotedPosts.indexOf(targetPostID)\n        if (index !== -1) userInfo.userDownvotedPosts.splice(index, 1)\n        this.setState({ userInfo: userInfo })\n    }\n\n    // Mount the current user state passed in from the app.js\n    componentDidMount() {\n        this.changeUserState();\n    }\n\n    // All of these data will not be hardcoded and will be fetched from a database\n    /********************************************************************************\n    for phase 2, you would be making a server call to get the user information and \n    update the state accordingly, will also fetch its corresponded posts\n    *********************************************************************************/\n    changeUserState = () => {\n        if(this.state.userLevel === \"User\") {\n            this.state.avatar = \"U\";\n            this.state.bio = \"An individual that is pursuing one's passions.\";\n            this.state.username = \"user\";\n            this.state.name = \"User X\";\n            this.state.email = \"user@123.com\";\n            this.state.occupation = \"Student\";\n            this.state.birthday = \"2021-03-08\";\n            this.state.commenter = \"User\";\n            this.state.posts = [\n                {author: 'User', \n                authorUsertype: \"RU\",\n                title: 'Welcome to communtiy', \n                content: 'this is the first community thread', \n                authorAvatar: \"U\",\n                category: \"Announcement\",\n                postID: 1,\n                numUpvotes: 5,\n                numDownvotes: 1,\n                comments: [\n                {commenter: \"User2\",\n                    commentContent: \"This is a great post\"},\n                {commenter: \"User3\",\n                    commentContent: \"This is a bad post\"}\n                ]\n                },\n                {author: 'User', \n                authorUsertype: \"RU\",\n                title: 'My second post', \n                content: 'This is the second post ever!!!!!!!', \n                authorAvatar: \"U\",\n                category: \"Opinion\",\n                postID: 2,\n                numUpvotes: 4,\n                numDownvotes: 2,\n                comments: [\n                {commenter: \"Financial Advisor3\",\n                    commentContent: \"You should come to my page to learn about financials\"},\n                {commenter: \"User4\",\n                    commentContent: \"Go buy GME!\"}\n                ]\n                }\n            ];\n            this.setState({\n                avatar: this.state.avatar,\n                bio: this.state.bio,\n                username: this.state.username,\n                name: this.state.name,\n                email: this.state.email,\n                occupation: this.state.occupation,\n                birthday: this.state.birthday,\n                posts: this.state.posts,\n                commenter: this.state.commenter,\n            })\n            \n        } else if(this.state.userLevel === \"Financial Advisor\") {\n            this.state.avatar = \"A\";\n            this.state.bio = \"A certified financial advisor, dedicated to help others\";\n            this.state.username = \"admin\";\n            this.state.name = \"Admin X\";\n            this.state.email = \"admin@123.com\";\n            this.state.occupation = \"Financial advisor\";\n            this.state.birthday = \"2021-03-08\";\n            this.state.commenter = \"Admin\";\n            this.state.posts = [\n                {author: 'Admin', \n                authorUsertype: \"FA\",\n                title: 'Welcome to communtiy', \n                content: 'I am the financial advisor', \n                authorAvatar: \"A\",\n                category: \"Announcement\",\n                postID: 1,\n                numUpvotes: 5,\n                numDownvotes: 1,\n                comments: [\n                {commenter: \"User2\",\n                    commentContent: \"This is a great post\"},\n                {commenter: \"User3\",\n                    commentContent: \"This is a bad post\"}\n                ]\n                },\n                {author: 'Admin', \n                authorUsertype: \"FA\",\n                title: 'My second post', \n                content: 'I am here to provide you guys with some help in financing', \n                authorAvatar: \"A\",\n                category: \"Opinion\",\n                postID: 2,\n                numUpvotes: 4,\n                numDownvotes: 2,\n                comments: [\n                {commenter: \"Financial Advisor3\",\n                    commentContent: \"You should come to my page to learn about financials\"},\n                {commenter: \"User4\",\n                    commentContent: \"Go buy GME!\"}\n                ]\n                }\n            ];\n            this.setState({\n                avatar: this.state.avatar,\n                bio: this.state.bio,\n                username: this.state.username,\n                name: this.state.name,\n                email: this.state.email,\n                occupation: this.state.occupation,\n                birthday: this.state.birthday,\n                posts: this.state.posts,\n                commenter: this.state.commenter,\n            })\n        }\n    }\n\n    render() {\n        const { classes, username, handleLogOut, password, userLevel, loggedIn } = this.props;\n\n        if(userLevel === \"User\") {\n            this.state.userLevel = \"User\"\n        } else if(userLevel === \"Financial Advisor\") {\n            this.state.userLevel = \"Financial Advisor\"\n        }\n\n        return ( \n\n            loggedIn ? \n            <ThemeProvider theme={theme}>\n                <div className={classes.root}>\n                    { this.state.userLevel === \"User\" ? \n                        <AppBar color=\"secondary\" position=\"fixed\" className={classes.appBar}>\n                            <Toolbar>\n                                <Typography variant='h6' noWrap>\n                                    Profile\n                                </Typography>\n\n                                <Tabs inkBarStyle={{background: 'black'}} centered>\n                    \n                                    <Link to={'/spendings'} className={classes.tabs, classes.removeLine}>\n                                        <Tab label=\"Spendings\"/>\n                                    </Link>\n\n                                    <Link to={'/investments'}  className={classes.tabs, classes.removeLine}>\n                                        <Tab label=\"Investments\"/>\n                                    </Link>\n                                    \n                                    <Link to={'/community'} className={classes.tabs, classes.removeLine}>\n                                        <Tab label=\"Community\"/>\n                                    </Link>\n\n                                </Tabs>\n                            </Toolbar>\n                        </AppBar>\n                        :\n                        <AppBar color=\"secondary\" position=\"fixed\" className={classes.appBar}>\n                            <Toolbar>\n                                <Typography variant='h6' noWrap>\n                                    Profile\n                                </Typography>\n\n                                <Tabs inkBarStyle={{background: 'black'}} centered>\n                                    <Link to={'/community'} className={classes.tabs, classes.removeLine}>\n                                        <Tab label=\"Community\"/>\n                                    </Link>\n                                </Tabs>\n                            </Toolbar>\n                        </AppBar>\n                    }\n                    <Drawer className={classes.drawer} \n                            variant=\"permanent\"\n                            anchor=\"left\"\n                            classes={{\n                                paper: classes.drawerPaper,\n                            }}\n                    >\n                        <Toolbar />\n                        <div className={classes.drawerContainer}>\n                            <Avatar align=\"center\"\n                                    name=\"avatar\"\n                                    value={this.state.avatar}\n                                    className={classes.avatar}>{ this.state.avatar }</Avatar>\n\n                            { this.state.edit ? \n                                <Edit \n                                    handleInputChange={ this.handleInputChange }\n                                    username={ this.state.username }\n                                    name={ this.state.name }\n                                    email={ this.state.email }\n                                    occupation={ this.state.occupation }\n                                    birthday={ this.state.birthday }\n                                    bio={ this.state.bio }\n                                />\n                                :\n                                <Done  \n                                    username={ this.state.username }\n                                    name={ this.state.name }\n                                    email={ this.state.email }\n                                    occupation={ this.state.occupation }\n                                    birthday={ this.state.birthday }\n                                    bio={ this.state.bio } \n                                />    \n                            }\n                            \n                            { this.state.edit ? \n                                <Button onClick={ this.handleEdit }\n                                        color=\"primary\" \n                                        variant=\"contained\" \n                                        className={classes.doneButton}>\n                                    Done\n                                </Button>\n                            :\n                            <div>\n                                <Button onClick={ this.handleEdit }\n                                        color=\"primary\" \n                                        variant=\"contained\" \n                                        className={classes.editButton}>\n                                    Edit Profile\n                                </Button>\n                                <Link to={\"/\"}>\n                                    <Button onClick={ () => handleLogOut() }\n                                            color=\"primary\" \n                                            variant=\"contained\" \n                                            className={classes.logoutButton}>\n                                        Log Out\n                                    </Button>\n                                </Link>\n                            </div>\n                            }\n                        </div>\n                    </Drawer>\n                   \n                    <main className={classes.content}>\n                        <Grid container direction=\"row\" className={classes.numberGroup}>\n                            <div className={classes.group}>\n                                <Button variant=\"contained\" color=\"primary\" className={classes.followersButton} onClick={ this.handleFollowersOpen }>\n                                    Followers\n                                    <br></br>\n                                    { this.state.followerData.length }\n                                </Button>\n                                <Dialog open={ this.state.openFollowers } \n                                        onClose={ this.handleFollowersClose }  \n                                        PaperComponent={PaperComponent}\n                                        aria-labelledby=\"draggable\"\n                                        className={classes.dialog}\n                                        classes={{\n                                            paper: classes.paper,\n                                        }}\n                                        >\n                                    <DialogTitle className={classes.dialogue_cursor} id=\"draggable\">\n                                        Followers\n                                    </DialogTitle>\n                                    \n                                    { this.state.followerData.map((followerData) => (\n                                        <Followers followerData={followerData} handleFollow={ this.handleFollow } handleUnfollow={ this.handleUnfollow } />\n                                    ))}\n                                    \n                                    <HandleClosing handleClose={ this.handleFollowersClose } />\n                                </Dialog>\n                            </div>\n                            <div className={classes.group}>\n                                <Button variant=\"contained\" color=\"primary\" className={classes.followingButton} onClick={ this.handleFollowingOpen }>\n                                    Following\n                                    <br></br>\n                                    { this.state.followingData.length }\n                                </Button>\n                                <Dialog open={ this.state.openFollowing } \n                                        onClose={ this.handleFollowingClose }  \n                                        PaperComponent={ PaperComponent }\n                                        aria-labelledby=\"draggable\"\n                                        classes={{\n                                            paper: classes.paper,\n                                        }}\n                                        >\n                                    <DialogTitle className={classes.dialogue_cursor} id=\"draggable\">\n                                        Following\n                                    </DialogTitle>\n\n                                    { this.state.followingData.map((followingData) => (\n                                        <Following followingData={followingData} handleFollow={ this.handleFollowing } handleUnfollow={ this.handleUnfollowing } />\n                                    ))}\n\n                                    <HandleClosing handleClose={ this.handleFollowingClose } />\n                                </Dialog>\n                            </div>\n                            <div className={classes.group1}>\n                                <Button variant=\"contained\" color=\"primary\" className={classes.postButton}>\n                                    Posts\n                                    <br></br>\n                                    { this.state.posts.length }\n                                </Button>\n                            </div>    \n                        </Grid>\n\n                        <div>\n                            <Typography variant='h5' className={classes.post}>\n                                My posts:\n                            </Typography>\n\n                            { this.state.posts == \"\" ? \n                                <div>\n                                    <PostAddIcon className={classes.postIcon}/>\n                                    <Typography variant='h5' className={classes.nothing}>\n                                        You don't have anything posted yet. Go post something!\n                                    </Typography>\n                                </div>\n                                :\n                                <List className={ classes.forumList }>\n                                    { this.state.posts.map((thread) => {\n                                        if (this.state.openManagePost ? this.state.postFilter === \"\" && thread.author === username : this.state.postFilter === \"\") {\n                                            return (\n                                            <div>\n                                                <ForumListItem postTitle={ thread.title }\n                                                            postAuthor={ thread.author }\n                                                            postAuthorUsertype={ thread.authorUsertype}\n                                                            postTextContent={ thread.content }\n                                                            avatar={ thread.authorAvatar }\n                                                            category={ thread.category }\n                                                            comments={ thread.comments }\n                                                            postID={ thread.postID }\n                                                            openManagePost={ this.state.openManagePost ? true : false }\n                                                            numUpvotes={ thread.numUpvotes }\n                                                            numDownvotes={ thread.numDownvotes }\n                                                            userInfo={ this.state.userInfo }\n                                                            addUpvote={ this.addUpvote }\n                                                            minusUpvote={ this.minusUpvote }\n                                                            addDownvote={ this.addDownvote }\n                                                            minusDownvote={ this.minusDownvote }\n                                                            deletePosts={ this.deletePosts }\n                                                            postComment={ this.postComment }/>\n                                                { this.state.posts[this.state.posts.length - 1] === thread ? null : <Divider variant=\"inset\" component=\"li\" />}\n                                            </div>\n                                            )\n                                        }\n                                    })\n                                }\n                                </List>\n                            }\n                            \n                        </div>\n                    </main> \n                </div>\n            </ThemeProvider> : <Redirect to=\"/login\" />\n        )\n    }\n}\n\nexport default withStyles(useStyles)(Profile);","/Users/emilyhuang/Documents/CSC309/team06/src/components/NavBar/index.js",["270","271","272","273"],"import React from 'react';\nimport { AppBar, Tab, Tabs } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport {\n  withStyles,\n  Toolbar,\n  Typography,\n  Avatar,\n  createMuiTheme,\n  ThemeProvider\n} from '@material-ui/core';\nimport { deepPurple } from '@material-ui/core/colors';\n\nconst useStyles = theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  title: {\n    flexGrow: 1,\n    cursor: 'pointer',\n  },\n  tabs: {\n    marginLeft: theme.spacing(3),\n  },\n  signInButton: {\n    float: 'right',\n    marginRight: 10,\n  },\n  logInButton: {\n    float: 'right',\n    margin: 10,\n  },\n  username: {\n    marginLeft: theme.spacing(80),\n  },\n  avatar: {\n    marginLeft: theme.spacing(2),\n    backgroundColor: deepPurple[800],\n  },\n  removeLine: {\n    textDecoration: 'none',\n    color: 'black'\n  },\n  appbar: {\n    zIndex: theme.zIndex.drawer + 1,\n  }\n})\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: deepPurple[800],\n    },\n    secondary: {\n      main: deepPurple[100],\n    }\n  },\n  typography: {\n    fontFamily: [\n      'Poppins',\n      'sans-serif',\n    ].join(','),\n  },\n});\n\nclass NavBar extends React.Component {\n\n  render() {\n    const { classes, username, password } = this.props;\n    const firstLetter = username.charAt(0).toUpperCase();\n\n    return (\n      <ThemeProvider theme={theme}>\n        <div className={classes.root}>\n          <AppBar position=\"sticky\" color=\"secondary\" className={ classes.appbar }>\n            <Toolbar>\n              <Link to={'/'} className={classes.removeLine}>\n                <Typography variant=\"h6\" className={classes.title}>\n                  Money Manager\n                </Typography>\n              </Link>\n\n              <Tabs inkBarStyle={{ background: 'black' }} centered>\n\n                <Link to={'/spendings'} className={classes.tabs, classes.removeLine}>\n                  <Tab label=\"Spendings\" />\n                </Link>\n\n                <Link to={'/investments'} className={classes.tabs, classes.removeLine}>\n                  <Tab label=\"Investments\" />\n                </Link>\n\n                <Link to={'/community'} className={classes.tabs, classes.removeLine}>\n                  <Tab label=\"Community\" />\n                </Link>\n\n              </Tabs>\n\n              <Typography variant=\"subtitle1\" className={classes.username}>\n                {username}\n              </Typography>\n\n              <Link to={'/profile'}>\n                <Avatar className={classes.avatar}>{firstLetter}</Avatar>\n              </Link>\n\n            </Toolbar>\n          </AppBar>\n        </div>\n      </ThemeProvider>\n\n    )\n\n  }\n\n}\n\nexport default withStyles(useStyles)(NavBar);","/Users/emilyhuang/Documents/CSC309/team06/src/components/Login/login.js",["274","275"],"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { withStyles,\n        AppBar, \n        Toolbar, \n        Typography,\n        Button,\n        TextField,\n        Grid,\n        createMuiTheme,\n        Paper,\n        ThemeProvider} from '@material-ui/core';\nimport { deepPurple } from '@material-ui/core/colors';\nimport Footer from '../Footer/footer.js';\nimport LogoButton from './../Signup/logoButton.js';\nimport FormTitle from './../Signup/formTitle.js';\n\nconst useStyles = theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  title: {\n    flexGrow: 1,\n    cursor: 'pointer',\n    marginRight: '70vw',\n  },\n  new: {\n    float: 'right',\n    marginRight: 10,\n  },\n  grid: {\n    direction: 'row',\n    justifyContent: 'center',\n  },\n  paper: {\n    marginTop: theme.spacing(12),\n    display: 'flex',\n    flexDirection: 'column',  \n  },\n  avatar: {\n    marginTop: theme.spacing(2),\n    color: theme.palette.getContrastText(deepPurple[800]),\n    backgroundColor: deepPurple[500],\n  },\n  form: {\n    margin: theme.spacing(3),\n  },\n  text: {\n    margin: theme.spacing(1),\n  },\n  logInButton: {\n    margin: theme.spacing(1),\n  },\n  signInButton: {\n    float: 'right',\n    marginRight: 10,\n  },\n  footer: {\n    position: 'absolute',\n    marginTop: theme.spacing(25),\n    bottom: 0,\n    width: '100%',\n  }\n});\n\nconst theme = createMuiTheme({\n  palette: {\n      primary: {\n          main: deepPurple[800],\n      },\n      secondary: {\n          main: deepPurple[100],\n      }\n  },\n  typography: {\n      fontFamily: [\n          'Poppins',\n          'sans-serif',\n      ].join(','),\n  },\n});\n\nclass Login extends React.Component {\n\n  state = {\n    userName: \"\",\n    password: \"\",\n    userLevel: \"\",\n  };\n\n  // set state for all the state variables\n  handleInputChange = (event) => {\n\n    // get the value we type in \n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n\n    /********************************************************************************\n    for phase 2, you would be making a server call to check the user level of the user\n    *********************************************************************************/\n    if(value === \"user\") {\n      this.state.userLevel = \"User\"\n    } else if(value === \"admin\") {\n      this.state.userLevel = \"Financial Advisor\"\n    }\n    // state is updated and value is also updated in JSX\n    // the square bracket dynamically changes the name \n    this.setState({\n      [name]: value,\n      userLevel: this.state.userLevel\n    })\n  }\n\n  render() {\n    \n    const { classes, loginHandler } = this.props;\n\n    return (\n\n      <ThemeProvider theme={theme}>\n            <div className={classes.root}>\n                <AppBar position=\"sticky\" color=\"secondary\">\n                    <Toolbar>\n                      <LogoButton buttonTitle=\"Money Manager\" />\n                      <Typography variant=\"subtitle1\" className={classes.new}>\n                        New User?\n                      </Typography>\n                      <Link to={'/signup'}>\n                        <Button color=\"primary\" variant=\"contained\" className={classes.signInButton}>\n                          Get Started\n                        </Button>\n                      </Link>\n                    </Toolbar>\n                </AppBar>\n\n                <Grid container className={classes.grid} >\n                  <Paper elevation={3} className={classes.paper}>\n                      <FormTitle firstTitle=\"Welcome back!\"\n                                subTitle=\"Login to continue\"\n                      />\n\n                    <form className={classes.form}>\n                      <Grid container direction=\"column\" spacing={2}>\n                        <TextField required \n                                  onChange={ this.handleInputChange }\n                                  value={ this.state.userName }\n                                  id=\"outlined-required\" \n                                  label=\"username\" \n                                  name=\"userName\"\n                                  variant=\"outlined\" \n                                  className={classes.text}/>\n                        <TextField required\n                                   value={ this.state.password }\n                                   onChange={ this.handleInputChange }\n                                   id=\"outlined-basic\" \n                                   label=\"password\" \n                                   name=\"password\"\n                                   type=\"password\" \n                                   variant=\"outlined\" \n                                   className={classes.text}/>\n                        \n                        { this.state.userLevel === \"Financial Advisor\" ? \n                          <Link to={\"/community\"}>\n                            <Button onClick={ () => loginHandler(this.state.userName, this.state.password) }\n                                    variant=\"contained\" \n                                    color=\"primary\" \n                                    type=\"submit\" \n                                    className={classes.logInButton}>\n                              Log in\n                            </Button>\n                          </Link>\n                          :\n                          <Link to={\"/spendings\"}>\n                            <Button onClick={ () => loginHandler(this.state.userName, this.state.password) }\n                                    variant=\"contained\" \n                                    color=\"primary\" \n                                    type=\"submit\" \n                                    className={classes.logInButton}>\n                              Log in\n                            </Button>\n                          </Link>\n                        }\n                      </Grid>\n\n                    </form>\n                  </Paper>\n                </Grid>\n\n                <div className={classes.footer}>\n                  <Footer />\n                </div>\n            </div>   \n      </ThemeProvider>\n    )\n  }\n}\n\nexport default withStyles(useStyles)(Login);","/Users/emilyhuang/Documents/CSC309/team06/src/components/Signup/formTitle.js",[],"/Users/emilyhuang/Documents/CSC309/team06/src/components/Profile/done.js",[],"/Users/emilyhuang/Documents/CSC309/team06/src/components/Profile/edit.js",[],"/Users/emilyhuang/Documents/CSC309/team06/src/components/Signup/logoButton.js",[],"/Users/emilyhuang/Documents/CSC309/team06/src/components/Signup/linkButton.js",[],"/Users/emilyhuang/Documents/CSC309/team06/src/components/Profile/forumListItemOld.js",["276","277","278","279","280","281"],"import React from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport Chip from '@material-ui/core/Chip';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport IconButton from '@material-ui/core/IconButton';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport Fab from '@material-ui/core/Fab';\n\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { deepPurple, grey, green } from '@material-ui/core/colors';\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport ThumbUpAltIcon from '@material-ui/icons/ThumbUpAlt';\nimport ThumbDownAltIcon from '@material-ui/icons/ThumbDownAlt';\nimport CloseIcon from '@material-ui/icons/Close';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\n\nimport Comment from \"./../Community/comment.js\"\n\nconst styles =  theme => ({\n  closePostButton: {\n    backgroundColor: deepPurple[500],\n    // borderRadius: 5,\n  },\n  blackText: {\n    color: '#000000',\n  },\n  redText: {\n    color: '#dd0000',\n  },\n  upvoteText: {\n    color: '#aaaaaa',\n  },\n  checkCircle: {\n    color: green[500]\n  },\n  financialAdvisorTag: {\n    color: '#ffffff',\n    backgroundColor: green[500]\n  },\n});\n\nconst theme = createMuiTheme({\n  palette: {\n      primary: {\n          main: deepPurple[800],\n      },\n      secondary: {\n          main: deepPurple[100],\n      }\n  },\n  typography: {\n      fontFamily: [\n          'Poppins',\n          'sans-serif',\n      ].join(','),\n  },\n});\n\nclass ForumListItem extends React.Component {\n\n    state = {\n      postID: null,\n      openPost: false,\n      comment: \"\",\n      upvoted: false,\n      downvoted: false,\n      spaces: \"     \",\n    }\n\n    componentDidMount() {\n      this.setState({ postID: this.props.postID }, () => this.prepareOpenPost(), () => this.forceUpdate())\n    }\n\n    componentDidUpdate() {\n      if (this.state.postID !== this.props.postID) this.setState({ postID: this.props.postID }, () => this.prepareOpenPost())      \n    }\n  \n    openPost = () => {\n      this.setState({ openPost: true }, () => this.prepareOpenPost())\n    }\n\n    prepareOpenPost = () => {\n      const userInfo = this.props.userInfo\n      userInfo.userUpvotedPosts.includes(this.state.postID) ? this.setState({ upvoted: true }) : this.setState({ upvoted: false })\n      userInfo.userDownvotedPosts.includes(this.state.postID) ? this.setState({ downvoted: true }) : this.setState({ downvoted: false })\n    }\n  \n    closePost = () => {\n      this.setState({ openPost: false })\n    }\n  \n    handleInputChange = (event) => {\n      const value = event.target.value\n      const name = event.target.name\n  \n      this.setState({\n        [name]: value\n      })\n    }\n\n    handlePostComment = () => {\n      this.props.postComment(this.state)\n      this.setState({ comment: \"\" })\n    }\n\n    toggleUpvote = () => {\n\n      // clean up downvote\n      if (this.state.downvoted === true) {\n        this.setState({ downvoted: false })\n        this.props.minusDownvote(this.state)\n      }\n\n      if (this.state.upvoted === false) {\n        this.setState({ upvoted: true })\n        this.props.addUpvote(this.state)\n      }\n      else {\n        this.setState({ upvoted: false })\n        this.props.minusUpvote(this.state)\n      }\n    }\n\n    toggleDownvote = () => {\n\n      // clean up upvote\n      if (this.state.upvoted === true) {\n        this.setState({ upvoted: false })\n        this.props.minusUpvote(this.state)\n      }\n\n      if (this.state.downvoted === false) {\n        this.setState({ downvoted: true })\n        this.props.addDownvote(this.state)\n      }\n      else {\n        this.setState({ downvoted: false })\n        this.props.minusDownvote(this.state)\n      }\n      \n    }\n  \n    render() {\n  \n      const { classes, avatar, postTitle, postAuthor, postTextContent, category, comments, postComment, \n              deletePosts, openManagePost, numUpvotes, numDownvotes, postAuthorUsertype } = this.props\n  \n      return (\n        <div>\n          <ListItem alignItems=\"flex-start\" button=\"true\" onClick={ openManagePost ? null : this.openPost }>\n            <ListItemAvatar>\n              <Avatar>{ avatar }</Avatar>\n            </ListItemAvatar>\n            <ListItemText\n              primary={\n                <React.Fragment>\n                  <span>{ postTitle } :: </span>\n                  <span> { postAuthor } </span>\n                  { postAuthorUsertype === \"FA\" ? \n                    <IconButton size=\"small\" component=\"span\" disabled>\n                      <CheckCircleIcon className={ classes.checkCircle } fontSize=\"small\" />\n                    </IconButton>\n                  : null }\n                  <IconButton size=\"small\" component=\"span\" disabled>\n                    <ThumbUpAltIcon color={ this.state.upvoted ? \"primary\" : '#dddddd'} fontSize=\"small\" />\n                  </IconButton>\n                  <span className={ classes.upvoteText }>{ numUpvotes } : { numDownvotes }</span>\n                  <IconButton size=\"small\" component=\"span\" disabled>\n                    <ThumbDownAltIcon color={ this.state.downvoted ? \"primary\" : '#dddddd'} fontSize=\"small\" />\n                  </IconButton>\n                </React.Fragment>\n              }\n              secondary={\n                <React.Fragment>\n                  { postTextContent }\n                </React.Fragment>\n              }\n            />\n            <Chip label={ category }/>\n            { openManagePost ? <Button variant=\"contained\" color=\"primary\" onClick={ this.openPost }>View</Button> : null }\n            { openManagePost ? <Button variant=\"contained\" color=\"primary\" onClick={ () => deletePosts(this.state) }>Delete</Button> : null }\n            \n          </ListItem>\n  \n          <Dialog open={ this.state.openPost } onClose={ this.closePost } aria-labelledby=\"form-dialog-title\" fullScreen>\n\n            <DialogActions className={ classes.closePostButton }>\n              { postAuthorUsertype === \"FA\" ? \n                <Button disabled variant=\"contained\" color=\"secondary\" onClick={ this.handleOpenFAInfo }>\n                  View Financial Advisor Info\n                </Button>\n              : null }\n              <Tooltip title=\"Close\">\n                <Fab color=\"secondary\" size=\"small\" onClick={ this.closePost }>\n                  <CloseIcon fontSize=\"default\" />\n                </Fab>\n              </Tooltip>\n            </DialogActions>\n            \n            <DialogTitle id=\"form-dialog-title\">\n              <Chip label={ category } size=\"small\"/> :: { postTitle } :: \n              <span> { postAuthor } </span>\n              { postAuthorUsertype === \"FA\" ? \n                <Chip className={ classes.financialAdvisorTag } label={ \"Financial Advisor\" } size=\"small\"/>\n              : null }\n              <IconButton color={ this.state.upvoted ? \"primary\" : \"secondary\" } component=\"span\" onClick={ this.toggleUpvote }>\n                <ThumbUpAltIcon />\n              </IconButton>\n              <span>{ numUpvotes }</span>\n              <IconButton color={ this.state.downvoted ? \"primary\" : \"secondary\" } component=\"span\" onClick={ this.toggleDownvote }>\n                <ThumbDownAltIcon />\n              </IconButton>\n              <span>{ numDownvotes }</span>\n            </DialogTitle>\n\n            <DialogContent>\n              <DialogContentText className={ classes.blackText }>\n                { postTextContent }\n              </DialogContentText>\n              <Divider variant=\"fullWidth\" />\n              <br></br>\n              <DialogContentText className={ classes.blackText }>Post a Comment:</DialogContentText>\n              \n              <TextField\n                value={ this.state.comment }\n                onChange={ this.handleInputChange }\n                multiline\n                rows=\"3\"\n                variant=\"outlined\"\n                margin=\"dense\"\n                name=\"comment\"\n                label=\"Say something...\"\n                fullWidth\n              />\n              <br></br>\n              <Button variant=\"outlined\" color=\"primary\" onClick={ this.handlePostComment }>\n                Post\n              </Button>\n              <br></br>\n              <br></br>\n              <Divider variant=\"fullWidth\" />\n  \n              <List>\n                {comments.map((comment) => {\n                    return (\n                      <div>\n                        <Comment commenter={ comment.commenter }\n                                 commentContent={ comment.commentContent }/>\n                        <Divider variant=\"inset\" component=\"li\" />\n                      </div>\n                    )\n                  }\n                )}\n              </List>\n              \n            </DialogContent>\n\n          </Dialog>\n        </div>\n      )\n    }\n  }\n\n  export default withStyles(styles)(ForumListItem);\n\n","/Users/emilyhuang/Documents/CSC309/team06/src/components/Profile/followers.js",["282"],"import React from 'react';\nimport {withStyles,\n        Typography,\n        Button,\n        createMuiTheme} from '@material-ui/core';\nimport { deepPurple } from '@material-ui/core/colors';\n\nconst useStyles = theme => ({\n    follow: {\n        float: 'right',\n        marginLeft: theme.spacing(3),\n        marginRight: theme.spacing(3),\n        marginBottom: theme.spacing(1),\n    },\n    followerdata: {\n        float: 'left',\n        marginLeft: theme.spacing(3),\n        marginBottom: theme.spacing(1),\n    },\n})\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: deepPurple[800],\n        },\n        secondary: {\n            main: deepPurple[100],\n        }\n    },\n    typography: {\n        fontFamily: [\n            'Poppins',\n            'sans-serif',\n        ].join(','),\n    },\n});\n\nclass Followers extends React.Component {\n    \n\n    render() {\n        const { classes, followerData, handleFollow, handleUnfollow } = this.props;\n        return(\n\n            <div>\n                <Typography variant=\"subtitle2\" value={followerData} key={followerData} label={followerData} className={classes.followerdata}>\n                    { followerData[\"id\"] }\n                </Typography>\n                { followerData[\"following\"] ?\n                    <Button variant=\"contained\" color=\"primary\" onClick={ () => handleUnfollow(followerData) } className={classes.follow}>Unfollow</Button>\n                    :\n                    <Button variant=\"contained\" color=\"primary\" onClick={ () => handleFollow(followerData) } className={classes.follow}>Follow</Button>\n                }  \n            </div>\n        )\n    }\n}\n\nexport default withStyles(useStyles)(Followers);","/Users/emilyhuang/Documents/CSC309/team06/src/components/Profile/following.js",["283"],"import React from 'react';\nimport {withStyles,\n        Typography,\n        Button,\n        createMuiTheme} from '@material-ui/core';\nimport { deepPurple } from '@material-ui/core/colors';\n\nconst useStyles = theme => ({\n    follow: {\n        float: 'right',\n        marginLeft: theme.spacing(3),\n        marginRight: theme.spacing(3),\n        marginBottom: theme.spacing(1),\n    },\n    followingdata: {\n        float: 'left',\n        marginLeft: theme.spacing(3),\n        marginBottom: theme.spacing(1),\n    },\n})\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: deepPurple[800],\n        },\n        secondary: {\n            main: deepPurple[100],\n        }\n    },\n    typography: {\n        fontFamily: [\n            'Poppins',\n            'sans-serif',\n        ].join(','),\n    },\n});\n\nclass Following extends React.Component {\n    \n\n    render() {\n        const { classes, followingData, handleFollow, handleUnfollow } = this.props;\n        return(\n\n            <div>\n                <Typography variant=\"subtitle2\" value={followingData} key={followingData} label={followingData} className={classes.followingdata}>\n                    { followingData[\"id\"] }\n                </Typography>\n                { followingData[\"following\"] ?\n                    <Button variant=\"contained\" color=\"primary\" onClick={ () => handleUnfollow(followingData) } className={classes.follow}>Unfollow</Button>\n                    :\n                    <Button variant=\"contained\" color=\"primary\" onClick={ () => handleFollow(followingData) } className={classes.follow}>Follow</Button>\n                }  \n            </div>\n        )\n    }\n}\n\nexport default withStyles(useStyles)(Following);","/Users/emilyhuang/Documents/CSC309/team06/src/components/Profile/handleClosing.js",[],"/Users/emilyhuang/Documents/CSC309/team06/src/components/Home/appBar.js",[],"/Users/emilyhuang/Documents/CSC309/team06/src/components/Footer/footer.js",[],"/Users/emilyhuang/Documents/CSC309/team06/src/components/FinancialAdvisorForm/financialAdvisorForm.js",["284"],"import React from 'react';\nimport { withStyles,\n        RadioGroup,\n        FormControlLabel,\n        FormControl,\n        Radio,\n        TextField,\n        Grid,\n        createMuiTheme} from '@material-ui/core';\nimport { deepPurple } from '@material-ui/core/colors';\n\nconst useStyles = theme => ({\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 250,\n    },\n    radio: {\n      marginRight: theme.spacing(3),\n    },\n  });\n  \n  const theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: deepPurple[800],\n        },\n        secondary: {\n            main: deepPurple[100],\n        }\n    },\n    typography: {\n        fontFamily: [\n            'Poppins',\n            'sans-serif',\n        ].join(','),\n    },\n});\n\n  \nclass FinancialAdvisorForm extends React.Component {\n\n    render() {\n        const { classes, firstName, lastName, userName, birthday, gender, adminPasscode, email, \n                createdPassword, checkLength, passwordLengthError, passwordConfirmError, \n                confirmPassword, handleConfirmPassword, handleInputChange } = this.props;\n        return (\n            <div>\n                <Grid container direction=\"row\" spacing={1}>\n                    <FormControl variant=\"outlined\" className={classes.formControl}>\n                        <TextField required \n                                value={ firstName } \n                                onChange={ handleInputChange }\n                                id=\"outlined-required\" \n                                label=\"First Name\" \n                                name=\"firstName\"\n                                variant=\"outlined\" \n                                />\n                        </FormControl>\n                        <FormControl variant=\"outlined\" className={classes.formControl}>\n                        <TextField required\n                                value={ lastName } \n                                onChange={ handleInputChange }\n                                id=\"outlined-required\" \n                                label=\"Last Name\" \n                                name=\"lastName\"\n                                variant=\"outlined\" \n                                />\n                        </FormControl>\n                    </Grid>\n                    \n                    <Grid container direction=\"row\" spacing={1}>\n                    <FormControl variant=\"outlined\" className={classes.formControl}>\n                        <TextField required\n                                value={ userName } \n                                onChange={ handleInputChange }\n                                id=\"outlined-required\" \n                                label=\"User Name\" \n                                name=\"userName\"\n                                variant=\"outlined\" \n                                />\n                    </FormControl>\n                    <FormControl variant=\"outlined\" className={classes.formControl}>\n                        <TextField \n                                value={ birthday } \n                                onChange={ handleInputChange }\n                                id=\"date\" \n                                label=\"Birthday\" \n                                type=\"date\"\n                                name=\"date\"\n                                variant=\"outlined\" \n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                />\n                    </FormControl>\n                    </Grid>\n                    \n                    <RadioGroup aria-label=\"gender\" value={ gender } onChange={ handleInputChange } name=\"gender\" row >\n                    <FormControlLabel value=\"female\" control={<Radio color=\"primary\" />} label=\"Female\" className={classes.radio}/>\n                    <FormControlLabel value=\"male\" control={<Radio color=\"primary\" />} label=\"Male\" className={classes.radio}/>\n                    <FormControlLabel value=\"other\" control={<Radio color=\"primary\" />} label=\"Other\" className={classes.radio}/>\n                    </RadioGroup>\n\n                    <Grid container direction=\"column\" spacing={1}>\n                    <FormControl variant=\"outlined\" className={classes.formControl}>\n                        <TextField required \n                                fullWidth\n                                value={ email } \n                                onChange={ handleInputChange }\n                                id=\"outlined-required\" \n                                label=\"Email@example.com\" \n                                name=\"email\"\n                                variant=\"outlined\" \n                                />\n                        </FormControl>\n                    \n                    { passwordLengthError ? \n                        <FormControl variant=\"outlined\" className={classes.formControl}>\n                        <TextField error\n                                    helperText=\"The minimum number of characters is 8!\"\n                                    value={ createdPassword } \n                                    onChange={ checkLength }\n                                    id=\"outlined-error\" \n                                    label=\"Error\" \n                                    type=\"password\"\n                                    name=\"createdPassword\"\n                                    variant=\"outlined\" \n                                />\n                        </FormControl>\n                        :\n                        <FormControl variant=\"outlined\" className={classes.formControl}>\n                        <TextField required \n                                    value={ createdPassword } \n                                    onChange={ checkLength }\n                                    id=\"outlined-required\" \n                                    label=\"Create password\" \n                                    type=\"password\"\n                                    name=\"createdPassword\"\n                                    variant=\"outlined\" \n                                />\n                        </FormControl>\n                    }\n                    { passwordConfirmError ? \n                        <FormControl variant=\"outlined\" className={classes.formControl}>\n                        <TextField error\n                                    helperText=\"The password does not match!\"\n                                    value={ confirmPassword } \n                                    onChange={ handleConfirmPassword }\n                                    id=\"outlined-error\" \n                                    label=\"Error\" \n                                    type=\"password\"\n                                    name=\"confirmPassword\"\n                                    variant=\"outlined\" \n                                    />\n                        </FormControl>\n                        :\n                        <FormControl variant=\"outlined\" className={classes.formControl}>\n                        <TextField required \n                                value={ confirmPassword } \n                                onChange={ handleConfirmPassword }\n                                id=\"outlined-required\" \n                                label=\"Confirm password\" \n                                type=\"password\"\n                                name=\"confirmPassword\"\n                                variant=\"outlined\" \n                                />\n                        </FormControl>\n                    }\n                    </Grid>\n\n                    <Grid container direction=\"row\" spacing={1}>\n                    <FormControl variant=\"outlined\" className={classes.formControl}>\n                        <TextField required \n                                value={ adminPasscode } \n                                onChange={ handleInputChange }\n                                id=\"outlined-required\" \n                                label=\"Admin Passcode\" \n                                name=\"adminPasscode\"\n                                variant=\"outlined\" \n                                /> \n                    </FormControl>\n                </Grid>\n            </div>\n            \n        )\n    }\n}\n\nexport default withStyles(useStyles)(FinancialAdvisorForm);","/Users/emilyhuang/Documents/CSC309/team06/src/components/RegularUserForm/regularUserForm.js",["285"],"import React from 'react';\nimport { withStyles,\n        RadioGroup,\n        FormControlLabel,\n        FormControl,\n        Radio,\n        TextField,\n        Grid,\n        createMuiTheme,\n        InputAdornment} from '@material-ui/core';\nimport { deepPurple } from '@material-ui/core/colors';\n\nconst useStyles = theme => ({\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 250,\n    },\n    radio: {\n      marginRight: theme.spacing(3),\n    },\n});\n  \nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: deepPurple[800],\n        },\n        secondary: {\n            main: deepPurple[100],\n        }\n    },\n    typography: {\n        fontFamily: [\n            'Poppins',\n            'sans-serif',\n        ].join(','),\n    },\n});\n  \nclass RegularUserForm extends React.Component {\n\n    render() {\n        const { classes, firstName, lastName, userName, birthday, gender, occupation, salary, email, \n                createdPassword, checkLength, passwordLengthError, passwordConfirmError, \n                confirmPassword, handleConfirmPassword, handleInputChange } = this.props;\n        return (\n            <div>\n                <Grid container direction=\"row\" spacing={1}>\n                <FormControl variant=\"outlined\" className={classes.formControl}>\n                    <TextField required \n                            value={ firstName } \n                            onChange={ handleInputChange }\n                            id=\"outlined-required\" \n                            label=\"First Name\" \n                            name=\"firstName\"\n                            variant=\"outlined\" \n                            />\n                </FormControl>\n                <FormControl variant=\"outlined\" className={classes.formControl}>\n                    <TextField required\n                            value={ lastName } \n                            onChange={ handleInputChange }\n                            id=\"outlined-required\" \n                            label=\"Last Name\" \n                            name=\"lastName\"\n                            variant=\"outlined\" \n                            />\n                </FormControl>\n                </Grid>\n\n                <Grid container direction=\"row\" spacing={1}>\n                <FormControl variant=\"outlined\" className={classes.formControl}>\n                    <TextField required\n                            value={ userName } \n                            onChange={ handleInputChange }\n                            id=\"outlined-required\" \n                            label=\"User Name\" \n                            name=\"userName\"\n                            variant=\"outlined\" \n                            />\n                </FormControl>\n                <FormControl variant=\"outlined\" className={classes.formControl}>\n                    <TextField \n                            value={ birthday } \n                            onChange={ handleInputChange }\n                            id=\"date\" \n                            label=\"Birthday\" \n                            type=\"date\"\n                            name=\"birthday\"\n                            variant=\"outlined\" \n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            />\n                </FormControl>\n                </Grid>\n                \n                <RadioGroup aria-label=\"gender\" value={ gender } onChange={ handleInputChange } name=\"gender\" row >\n                <FormControlLabel value=\"female\" control={<Radio color=\"primary\" />} label=\"Female\" className={classes.radio}/>\n                <FormControlLabel value=\"male\" control={<Radio color=\"primary\" />} label=\"Male\" className={classes.radio}/>\n                <FormControlLabel value=\"other\" control={<Radio color=\"primary\" />} label=\"Other\" className={classes.radio}/>\n                </RadioGroup>\n                \n                <Grid container direction=\"row\" spacing={1}>\n                <FormControl variant=\"outlined\" className={classes.formControl}>\n                    <TextField required \n                            value={ occupation } \n                            onChange={ handleInputChange }\n                            id=\"outlined-required\" \n                            label=\"Occupation\" \n                            name=\"occupation\"\n                            variant=\"outlined\" \n                            />\n                    </FormControl>\n                    <FormControl variant=\"outlined\" className={classes.formControl}>\n                    <TextField value={ salary } \n                            onChange={ handleInputChange }\n                            id=\"outlined-required\" \n                            label=\"Monthly salary ($)\" \n                            name=\"salary\"\n                            variant=\"outlined\" \n                            InputProps={{\n                                startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n                            }}\n                            />\n                    </FormControl>\n                </Grid>\n\n                <Grid container direction=\"column\" spacing={1}>\n                <FormControl variant=\"outlined\" className={classes.formControl}>\n                    <TextField required \n                            value={ email } \n                            onChange={ handleInputChange }\n                            id=\"outlined-required\" \n                            label=\"Email@example.com\" \n                            name=\"email\"\n                            variant=\"outlined\" \n                            />\n                </FormControl>\n                \n                { passwordLengthError ? \n                    <FormControl variant=\"outlined\" className={classes.formControl}>\n                    <TextField\n                                fullWidth\n                                error\n                                helperText=\"The minimum number of characters is 8!\"\n                                value={ createdPassword } \n                                onChange={ checkLength }\n                                id=\"outlined-error\" \n                                label=\"Error\" \n                                type=\"password\"\n                                name=\"createdPassword\"\n                                variant=\"outlined\" \n                                />\n                    </FormControl>\n                    :\n                    <FormControl variant=\"outlined\" className={classes.formControl}>\n                    <TextField required \n                            value={ createdPassword } \n                            onChange={ checkLength }\n                            id=\"outlined-required\" \n                            label=\"Create password\" \n                            type=\"password\"\n                            name=\"createdPassword\"\n                            variant=\"outlined\" \n                            />\n                    </FormControl>\n                }\n                { passwordConfirmError ? \n                    <FormControl variant=\"outlined\" className={classes.formControl}>\n                    <TextField error\n                                fullWidth\n                                helperText=\"The password does not match!\"\n                                value={ confirmPassword } \n                                onChange={ handleConfirmPassword }\n                                id=\"outlined-error\" \n                                label=\"Error\" \n                                type=\"password\"\n                                name=\"confirmPassword\"\n                                variant=\"outlined\" \n                                />\n                    </FormControl>\n                    :\n                    <FormControl variant=\"outlined\" className={classes.formControl}>\n                    <TextField required \n                            fullWidth\n                            value={ confirmPassword } \n                            onChange={ handleConfirmPassword }\n                            id=\"outlined-required\" \n                            label=\"Confirm password\" \n                            type=\"password\"\n                            name=\"confirmPassword\"\n                            variant=\"outlined\" \n                            />\n                    </FormControl>\n                }\n                </Grid>\n\n            </div>\n            \n        )\n    }\n}\n\nexport default withStyles(useStyles)(RegularUserForm);","/Users/emilyhuang/Documents/CSC309/team06/src/components/Profile/data.js",[],"/Users/emilyhuang/Documents/CSC309/team06/src/components/Home/index.js",[],"/Users/emilyhuang/Documents/CSC309/team06/src/components/Investments/index.js",["286","287","288","289","290","291","292","293"],"import React from 'react';\nimport PieChart from './PieChart'\nimport TableComp from '../Table'\nimport './investments.css'\nimport SortButton from './SortButton';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { deepPurple, grey } from '@material-ui/core/colors';\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Calculator from './Calculator'\nimport GeneralCard from './GeneralCard';\nimport { Redirect } from 'react-router';\n\nconst useStyles = theme => ({\n  root: {\n    diplay: 'flex',\n  }\n});\n\n\nconst theme = createMuiTheme({\n  palette: {\n      primary: {\n          main: deepPurple[800],\n      },\n      secondary: {\n          main: deepPurple[100],\n      }\n  },\n  typography: {\n      fontFamily: [\n          'Poppins',\n          'sans-serif',\n      ].join(','),\n  },\n});\n\nclass Investments extends React.Component {\n\n  state = {\n    //general stock data\n    stockList_headings: [\"Name\", \"Quantity\", \"Price\", \"Average Cost\", \"Market Value\", \"Book Cost\", \"Gain/Loss\"],\n    stockList_options: [\"Any\", \"Number\", \"Dollar\", \"Dollar\", \"Dollar\", \"Dollar\", \"Dollar\", \"Dollar\"],\n    stockList_categories: [],\n\n    //some hard coded stock entries: will need to be linked to some database\n    stocklist_data: [{\"Name\": \"FB\", \"Quantity\": 15, \"Price\": 310.0, \"Average Cost\": 232.5,  \"Market Value\": 4560, \"Book Cost\": 3487.5, \"Gain/Loss\":1072.5},\n    {\"Name\": \"GOOGL\", \"Quantity\": 3, \"Price\": 1500.40, \"Average Cost\": 1523,  \"Market Value\": 4501.2, \"Book Cost\": 4569, \"Gain/Loss\":-67.8 },\n    {\"Name\": \"PDD\", \"Quantity\": 9, \"Price\": 260.03, \"Average Cost\": 250,  \"Market Value\": 2340.27, \"Book Cost\": 2250, \"Gain/Loss\":-240},\n    {\"Name\": \"GME\", \"Quantity\": 11, \"Price\": 280.45, \"Average Cost\": 340,  \"Market Value\": 3084.95, \"Book Cost\": 3740, \"Gain/Loss\":-655.05 },\n    {\"Name\": \"MSFT\", \"Quantity\": 6, \"Price\": 330.0, \"Average Cost\": 280,  \"Market Value\": 1980, \"Book Cost\": 1680, \"Gain/Loss\":1473.56},\n    {\"Name\": \"BABA\", \"Quantity\": 17, \"Price\": 222.98, \"Average Cost\": 136.3,  \"Market Value\": 3790.66, \"Book Cost\": 2317.1, \"Gain/Loss\":1473.56 },\n    {\"Name\": \"V\", \"Quantity\": 20, \"Price\": 233.0, \"Average Cost\": 220,  \"Market Value\": 4660, \"Book Cost\": 4400, \"Gain/Loss\":260},\n    {\"Name\": \"SHOP\", \"Quantity\": 20, \"Price\": 233.8, \"Average Cost\": 220,  \"Market Value\": 4676, \"Book Cost\": 4400, \"Gain/Loss\":276}],\n\n    //table values\n    sortBy: \"Market Value\",\n    sortDes: {\n      \"Name\": false,\n      \"Quantity\": false,\n      \"Market Value\": false,\n      \"Gain/Loss\": false,\n    },\n    openDrawer: false,\n\n    //Pie chart values\n    //These sizes were chosen to have a good ratio between the account \n    //overview card and the pie chart itself\n    pieChartSize: 700,\n    pieChartRadius: 190,\n    total: 0,\n  }\n\n  constructor(props) {\n    super(props);\n    this.changeSort = this.changeSort.bind(this);\n    this.totalMoneyInvested();\n  }\n\n  //For sorting the stock entries in the table:\n  sortObj = (a, b) => {\n    switch (this.state.sortBy) {\n\n      case \"Name\":\n        if (!this.state.sortDes[\"Name\"]) {\n          if (a[\"Name\"] < b[\"Name\"]) return -1\n          else return 1\n        }\n        else {\n          if (a[\"Name\"] > b[\"Name\"]) return -1\n          else return 1\n        }\n\n      case \"Quantity\":\n        if (!this.state.sortDes[\"Quantity\"]) {\n          if (parseFloat(a[\"Quantity\"]) < parseFloat(b[\"Quantity\"])) return -1\n          else return 1\n        }\n        else {\n          if (parseFloat(a[\"Quantity\"]) > parseFloat(b[\"Quantity\"])) return -1\n          else return 1\n        }\n\n      case \"Market Value\":\n        if (!this.state.sortDes[\"Market Value\"]) {\n          if (parseFloat(a[\"Market Value\"]) < parseFloat(b[\"Market Value\"])) return -1\n          else return 1\n        }\n        else {\n          if (parseFloat(a[\"Market Value\"]) > parseFloat(b[\"Market Value\"])) return -1\n          else return 1\n        }\n      case \"Gain/Loss\":\n        if (!this.state.sortDes[\"Gain/Loss\"]) {\n          if (parseFloat(a[\"Gain/Loss\"]) < parseFloat(b[\"Gain/Loss\"])) return -1\n          else return 1\n        }\n        else {\n          if (parseFloat(a[\"Gain/Loss\"]) > parseFloat(b[\"Gain/Loss\"])) return -1\n          else return 1\n        }\n    \n\n      case \"Default\":\n        return\n\n    }\n\n  }\n\n  //For re-ensuring the sum is up to date:\n  componentDidUpdate(undefined, prevState) {\n    // only update the account balance if any transaction has been modified\n    if (prevState.stocklist_data != this.state.stocklist_data) {\n      this.totalMoneyInvested();\n      \n    }\n  }\n\n  totalMoneyInvested = () => {\n    this.state.total = this.state.stocklist_data.reduce( (ttl, stock) => {\n      return ttl +  parseFloat(stock[\"Book Cost\"]) \n    }, 0);\n    this.setState({total: this.state.total})\n  }\n\n\n  // sorting the transactions based on the currently selected element \n  sortStocks = () => {\n    this.state.stocklist_data.sort(this.sortObj)\n    this.setState({ stocklist_data: this.state.stocklist_data })\n  }\n\n  // add newTransaction to the beginning of the stocklist array \n  addStock = (newStock) => {\n    this.state.stocklist_data.unshift(newStock)\n    this.setState({ stocklist_data: this.state.stocklist_data })\n    this.totalMoneyInvested();\n  }\n\n  // finds the index of the stock data and replace it with the new stock data\n  editStock = (oldStock, newStock) => {\n    const index = this.state.stocklist_data.findIndex(t => t === oldStock)\n    this.state.stocklist_data[index] = newStock\n    this.setState({ stocklist_data: this.state.stocklist_data })\n    this.totalMoneyInvested();\n  }\n\n  // deletes stocks from the stock list\n  deleteStock = (transaction) => {\n    const keepTransactions = this.state.stocklist_data.filter(t => t !== transaction)\n    this.setState({ stocklist_data: keepTransactions })\n    this.totalMoneyInvested();\n  }\n\n  changeSort(sortBy) {\n    this.state.sortBy = sortBy\n    this.setState({ sortBy: this.state.sortBy })\n    this.state.sortDes[sortBy] = !this.state.sortDes[sortBy]\n    this.setState({ sortDes: this.state.sortDes })\n    this.sortStocks()\n  }\n\n  render() {\n\n    const { loggedIn } = this.props\n\n    return ( \n\n    loggedIn ? \n    <ThemeProvider theme={ theme }>\n    <div className = \"InvestmentPage\">\n\n      <div className = \"PieChartGeneral\">\n\n          <div className = \"TitleAndPieChart\">\n            <div className = \"StockPieChartTitle\">\n                Stock Portfolio\n            </div>\n            <div className = \"PieChart\">\n              <PieChart totalAmountInvested = {this.state.total} listToDisplay = {this.state.stocklist_data} pieChartSize = {this.state.pieChartSize} pieChartRadius = {this.state.pieChartRadius}/>            \n            </div>\n          </div>\n\n          <div className = \"GeneralInfo\">\n            <GeneralCard total = {this.state.total}/>\n          </div>\n\n      </div>\n\n\n      <div className = \"StockList\">\n        <div className=\"StockTable\">\n          <TableComp\n            // use the TableContainer class to style the table itself \n            classes={{ TableContainer: 'TableContainer' }}\n            headings={this.state.stockList_headings}\n            data={this.state.stocklist_data}\n            options={this.state.stockList_options}\n            categories={this.state.stockList_categories}\n            addRow={this.addStock}\n            editRow={this.editStock}\n            removeRow={this.deleteStock}\n          />\n        </div>\n\n        <div className=\"SortButtons\">\n          <SortButton categoryName = \"Name\" callBackFunction = {this.changeSort} \n          sortDes = {this.state.sortDes} sortBy = {this.state.sortBy}/>\n          <SortButton categoryName = \"Quantity\" callBackFunction = {this.changeSort} \n          sortDes = {this.state.sortDes} sortBy = {this.state.sortBy}/>\n          <SortButton categoryName = \"Market Value\" callBackFunction = {this.changeSort} \n          sortDes = {this.state.sortDes} sortBy = {this.state.sortBy}/>\n          <SortButton categoryName = \"Gain/Loss\" callBackFunction = {this.changeSort} \n          sortDes = {this.state.sortDes} sortBy = {this.state.sortBy}/>\n        </div>\n      </div>\n\n      <div className = \"Calculator\">\n      <Calculator/>\n      </div>\n\n    </div>\n    </ThemeProvider> : <Redirect to=\"/login\" />\n    )\n  }\n}\n\nexport default withStyles(useStyles)(Investments);\n","/Users/emilyhuang/Documents/CSC309/team06/src/components/Spendings/index.js",["294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337"],"import React from 'react';\nimport { Redirect } from 'react-router';\nimport { withStyles } from '@material-ui/core'\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { deepPurple } from '@material-ui/core/colors';\n\n// imports for sorting buttons \nimport Button from '@material-ui/core/Button';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\n\n// imports for drawer\nimport IconButton from '@material-ui/core/IconButton';\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from \"@material-ui/core/Divider\";\nimport AddIcon from '@material-ui/icons/Add';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Typography from '@material-ui/core/Typography';\n\nimport './spendings.css'\nimport { data } from './data'\n\nimport TableComp from '../Table'\nimport PieChart from '../Investments/PieChart'\n\nconst useStyles = () => ({\n  drawer_paper: {\n    position: \"relative\",\n    height: \"100%\"\n  },\n  menu_list: {\n    width: \"15vw\",\n    marginTop: \"5%\",\n    marginLeft: \"1vw\",\n    marginRight: \"1vw\"\n  },\n  menu_item: {\n    width: \"15vw\",\n    marginTop: \"5%\",\n  },\n  formControl_root: {\n    outline: \"none\",\n    minWidth: \"15vw\"\n  },\n  listItem_buttonSelected: {\n    backgroundColor: deepPurple[100],\n    '&:hover': {\n      backgroundColor: deepPurple[100]\n    }\n  },\n  listItem_button: {\n    backgroundColor: \"\"\n  },\n  accountBalance: {\n    backgroundColor: deepPurple[100],\n  },\n  accountBalanceDiv: {\n    marginTop: \"5%\",\n    right: \"10%\",\n    textAlign: \"center\",\n    position: \"absolute\",\n    top: \"75%\",\n    minWidth: \"30vw\",\n    display: \"inline-block\",\n    borderRadius: \"25px\",\n    padding: \"20px\",\n    backgroundColor: deepPurple[100],\n    zIndex: \"-1\",\n  }\n})\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: deepPurple[800],\n    },\n    secondary: {\n      main: deepPurple[100],\n    }\n  },\n  typography: {\n    fontFamily: [\n      'Poppins',\n      'sans-serif',\n    ].join(','),\n  },\n});\n\nclass Spendings extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // the headings to appear in the header bar \n      transactions_headings: [\"Date\", \"Amount\", \"Description\", \"Category\"],\n      // the options for each transaction for the table to know which kind of cell to display\n      transactions_options: [\"Date\", \"Dollar\", \"Any\", \"Select\"],\n      // a list of the categories that the transaction falls under \n      transactions_categories: [\"Food\", \"Personal\", \"Transit\", \"Home\"],\n      // the data to appear in each rows of the table, the transactions for a specific year and month\n      transactions_data: [],\n      // the entire data for all years and all months\n      entire_data: data,\n      // the net balance on the account \n      accountBalance: 0,\n      // current sorting by string, default is sort by date\n      sortBy: \"Date\",\n      // sorting in an ascending/descending order\n      sortDes: {\n        \"Date\": false,\n        \"Amount\": false,\n        \"Category\": false\n      },\n      // true for displaying the drawer (sidebar for months), false to hide\n      openDrawer: false,\n      // the array used for displaying the pie chart, will contain array of objects, key is the category, value is the total spending of that category\n      sumForCategories: [],\n      // the position for the menu used to create a new spendings page\n      menuPosition: null,\n      // the month selected for the menu\n      newSpendings: { month: \"\", year: \"\", projectedSpendings: \"\" },\n      // the projected balance on the selected year and month \n      projectedSpendings: 0,\n      // used for changing the colours of the items in the drawer \n      currentlySelectedMonth: { monthIndex: \"\", yearIndex: \"\" }\n    }\n\n    /***************************************************************************************************************************\n    for phase 2, you would be populating \"entire_data\" in the state and get all the transaction history from the server\n    currently, it's just importing from another js file, but we would need to make a server call here to populate that dynamically \n    you would also need to get the transactions_categories from the server since the user can have their own customized categories \n    which would need to be stored in a database \n    ****************************************************************************************************************************/\n\n    // initialize transactions_data\n    this.sortEntireData()\n    const year = this.getYearFromIndex(\"0\")\n    const month = this.getMonthFromIndex(\"0\", \"0\", year)\n\n    this.state.transactions_data = this.state.entire_data[\"0\"][year][\"0\"][month][\"Transactions\"]\n    this.state.projectedSpendings = this.state.entire_data[\"0\"][year][\"0\"][month][\"Projected Spendings\"]\n    this.state.currentlySelectedMonth[\"monthIndex\"] = \"0\"\n    this.state.currentlySelectedMonth[\"yearIndex\"] = \"0\"\n\n    this.setState({\n      transactions_data: this.state.transactions_data,\n      projectedSpendings: this.state.projectedSpendings,\n      currentlySelectedMonth: this.state.currentlySelectedMonth\n    })\n\n    this.sumCategoriesAmount()\n    this.sumAccountBalance()\n\n  }\n\n  // conversion from numbers representation to letter representation of months \n  numbersToMonth = {\n    \"1\": \"Jan\", \"2\": \"Feb\", \"3\": \"Mar\", \"4\": \"Apr\", \"5\": \"May\", \"6\": \"Jun\",\n    \"7\": \"Jul\", \"8\": \"Aug\", \"9\": \"Sep\", \"10\": \"Oct\", \"11\": \"Nov\", \"12\": \"Dec\",\n    \"Jan\": \"1\", \"Feb\": \"2\", \"Mar\": \"3\", \"Apr\": \"4\", \"May\": \"5\", \"Jun\": \"6\",\n    \"Jul\": \"7\", \"Aug\": \"8\", \"Sep\": \"9\", \"Oct\": \"10\", \"Nov\": \"11\", \"Dec\": \"12\"\n  }\n\n  componentDidUpdate(undefined, prevState) {\n    // only update the account balance if any transaction has been modified\n    if (prevState.transactions_data != this.state.transactions_data) {\n      this.sumAccountBalance()\n      this.sumCategoriesAmount()\n    }\n  }\n\n  sumAccountBalance = () => {\n    this.state.accountBalance = this.state.transactions_data.reduce((total, current) => {\n      let sum = parseFloat(total) + parseFloat(current[\"Amount\"])\n      sum = sum.toFixed(2)\n      return sum\n    }, 0)\n    this.setState({ accountBalance: this.state.accountBalance })\n  }\n\n  sumCategoriesAmount = () => {\n\n    this.state.sumForCategories = []\n\n    this.state.transactions_data.map(transaction => {\n      const category = transaction[\"Category\"]\n      let index = this.state.sumForCategories.findIndex(x => x.Name == category)\n      if (index == -1) {\n        this.state.sumForCategories.push({ \"Name\": category, \"Book Cost\": 0 })\n        index = this.state.sumForCategories.length - 1\n      }\n      this.state.sumForCategories[index][\"Book Cost\"] += parseFloat(transaction[\"Amount\"])\n    })\n\n    this.setState({ sumForCategories: this.state.sumForCategories })\n\n  }\n\n  sortObj = (a, b) => {\n\n    switch (this.state.sortBy) {\n\n      case \"Date\":\n        if (!this.state.sortDes[\"Date\"]) {\n          if (a[\"Date\"] < b[\"Date\"]) return -1\n          else return 1\n        }\n        else {\n          if (a[\"Date\"] > b[\"Date\"]) return -1\n          else return 1\n        }\n\n      case \"Amount\":\n        if (!this.state.sortDes[\"Amount\"]) {\n          if (parseFloat(a[\"Amount\"]) < parseFloat(b[\"Amount\"])) return -1\n          else return 1\n        }\n        else {\n          if (parseFloat(a[\"Amount\"]) > parseFloat(b[\"Amount\"])) return -1\n          else return 1\n        }\n\n      case \"Category\":\n        if (!this.state.sortDes[\"Category\"]) {\n          if (a[\"Category\"] < b[\"Category\"]) return -1\n          else return 1\n        }\n        else {\n          if (a[\"Category\"] > b[\"Category\"]) return -1\n          else return 1\n        }\n\n      case \"Default\":\n        return\n\n    }\n\n  }\n\n  // sorting the transactions based on the currently selected element \n  sortTransactions = () => {\n    this.state.transactions_data.sort(this.sortObj)\n    this.setState({ transactions_data: this.state.transactions_data })\n  }\n\n  // add newTransaction to the beginning of the transactions_data array \n  addTransaction = (newTransaction) => {\n    this.state.transactions_data.unshift(newTransaction)\n    this.setState({ transactions_data: this.state.transactions_data })\n    /********************************************************************************\n    for phase 2, you would be making a server call to add this transaction to the data\n    *********************************************************************************/\n    this.sumAccountBalance()\n    this.sumCategoriesAmount()\n  }\n\n  // finds the index of the oldTransaction data and replace it with the newTransaction data\n  editTransaction = (oldTransaction, newTransaction) => {\n    const index = this.state.transactions_data.findIndex(t => t === oldTransaction)\n    this.state.transactions_data[index] = newTransaction\n    this.setState({ transactions_data: this.state.transactions_data })\n    /********************************************************************************\n    for phase 2, you would be making a server call to edit this transaction to the data\n    *********************************************************************************/\n    this.sumAccountBalance()\n    this.sumCategoriesAmount()\n  }\n\n  // deletes transaction from transactions_data array \n  deleteTransaction = (transaction) => {\n    const keepTransactions = this.state.transactions_data.filter(t => t !== transaction)\n    this.setState({ transactions_data: keepTransactions })\n    /********************************************************************************\n    for phase 2, you would be making a server call to delete this transaction to the data\n    *********************************************************************************/\n  }\n\n  // adds a user defined category \n  addCategory = (newCategory) => {\n    if (!this.state.transactions_categories.includes(newCategory))\n      this.state.transactions_categories.push(newCategory)\n    this.setState({ transactions_categories: this.state.transactions_categories })\n    /********************************************************************************\n    for phase 2, you would be making a server call to add a customized category to the data\n    *********************************************************************************/\n  }\n\n  // deletes a user defined category (the default cannot be deleted)\n  deleteCategory = (category) => {\n    const keepCategories = this.state.transactions_categories.filter(c => c !== category)\n    this.setState({ transactions_categories: keepCategories })\n    /********************************************************************************\n    for phase 2, you would be making a server call to delete a customized category to the data\n    *********************************************************************************/\n  }\n\n  changeSort(sortBy) {\n    this.state.sortBy = sortBy\n    this.setState({ sortBy: this.state.sortBy })\n    this.state.sortDes[sortBy] = !this.state.sortDes[sortBy]\n    this.setState({ sortDes: this.state.sortDes })\n    this.sortTransactions()\n  }\n\n  toggleDrawer = () => {\n    this.state.openDrawer = !this.state.openDrawer\n    this.setState({ openDrawer: this.state.openDrawer })\n  }\n\n  hideAddNewMonth = () => {\n    this.setState({ menuPosition: null })\n  }\n\n  displayAddNewMonth = (e) => {\n    this.setState({ menuPosition: e.currentTarget })\n  }\n\n  // to update the months on the select for the menu\n  selectFieldOnChangeHandler = (e) => {\n    this.state.newSpendings.month = e.target.value\n    this.setState({ newSpendings: this.state.newSpendings })\n  }\n\n  updateSpendingsYear = (e) => {\n    if (isNaN(e.target.value)) return\n    this.state.newSpendings.year = e.target.value\n    this.setState({ newSpendings: this.state.newSpendings })\n  }\n\n  updateSpendingsProjected = (e) => {\n    if (isNaN(e.target.value)) return\n    this.state.newSpendings.projectedSpendings = e.target.value\n    this.setState({ newSpendings: this.state.newSpendings })\n  }\n\n  createNewSpendings() {\n\n    if (this.state.newSpendings.year == \"\" || this.state.newSpendings.month == \"\" || this.state.newSpendings.projectedSpendings == \"\") return\n\n    const year = this.state.newSpendings.year\n    const month = this.numbersToMonth[this.state.newSpendings.month.substr(0, 3)]\n    const projectedSpendings = parseFloat(this.state.newSpendings.projectedSpendings).toFixed(2)\n    let yearIndex = this.getIndexFromYear(year)\n\n    // create new object for the year if the year doesn't exist\n    if (!this.checkIfInArray(year, this.state.entire_data)) {\n      let newObj = new Object()\n      newObj[year] = []\n      this.state.entire_data.push(newObj)\n    }\n\n    yearIndex = this.getIndexFromYear(year)\n\n    // if attempting to create an exisiting month/year combination, return \n    if (this.checkIfInArray(month, this.state.entire_data[yearIndex][year])) {\n      console.log(\"Month/Year already exists!\")\n      return\n    }\n\n    // create new object for the month \n    else {\n      let newObj = new Object()\n      newObj[month] = new Object()\n      this.state.entire_data[yearIndex][year].push(newObj)\n    }\n\n    const monthIndex = this.getIndexFromMonth(month, this.state.entire_data[yearIndex][year])\n\n    this.state.entire_data[yearIndex][year][monthIndex][month][\"Transactions\"] = []\n    this.state.entire_data[yearIndex][year][monthIndex][month][\"Projected Spendings\"] = projectedSpendings\n\n    // sorting data again so it's in order \n    this.sortEntireData()\n    this.setState({ entire_data: this.state.entire_data })\n\n    // resetting form and closing menu \n    Object.keys(this.state.newSpendings).map(heading => {\n      this.state.newSpendings[heading] = \"\"\n    })\n    this.state.menuPosition = null\n    this.setState({ newSpendings: this.state.newSpendings, menuPosition: this.state.menuPosition })\n    /********************************************************************************\n    for phase 2, you would be making a server call to add a new spendings page for a new month and year \n    *********************************************************************************/\n  }\n\n  // sorting the entire dataset for transactions of all months and years \n  sortEntireData() {\n    this.state.entire_data.map((yearObj, index) => {\n      const year = Object.keys(yearObj)[0]\n      this.state.entire_data[index][year].sort(this.sortDataByKey)\n    })\n    this.state.entire_data.sort(this.sortDataByKey)\n  }\n\n  sortDataByKey(a, b) {\n    // keys can be either month or year, want the latest to be on top \n    const keyA = parseInt(Object.keys(a)[0])\n    const keyB = parseInt(Object.keys(b)[0])\n    if (keyA > keyB) return -1\n    else return 1\n  }\n\n  // when clicking the months on the drawer, need to update the transactions_data in state for the table \n  monthsOnClickHandler(e, yearIndex, monthIndex, year, month) {\n    this.state.transactions_data = this.state.entire_data[yearIndex][year][monthIndex][this.numbersToMonth[month]][\"Transactions\"]\n    this.state.currentlySelectedMonth[\"yearIndex\"] = yearIndex\n    this.state.currentlySelectedMonth[\"monthIndex\"] = monthIndex\n    this.setState({\n      transactions_data: this.state.transactions_data,\n      projectedSpendings: this.state.entire_data[yearIndex][year][monthIndex][this.numbersToMonth[month]][\"Projected Spendings\"],\n      currentlySelectedMonth: this.state.currentlySelectedMonth\n    })\n    this.sumAccountBalance()\n    this.sumCategoriesAmount()\n  }\n\n  // renders the months for a specific year in the drawer\n  renderMonths(yearObj, index) {\n    let months = []\n    Object.keys(yearObj).map(yearArr => {\n      this.state.entire_data[index][yearArr].map(monthObj => {\n        Object.keys(monthObj).map(month => {\n          months.push(this.numbersToMonth[month])\n        })\n      })\n    })\n    return months\n  }\n\n  // get the year from the year index \n  getYearFromIndex(yearIndex) {\n    // there will always be only one key, which is the year\n    const objKeys = Object.keys(this.state.entire_data[yearIndex])\n    return objKeys[0]\n  }\n\n  // get the year index from the year \n  getIndexFromYear(year) {\n    let index = undefined\n    this.state.entire_data.map((yearObj, i) => {\n      const objKeys = Object.keys(yearObj)\n      if (objKeys[0] == year) index = i\n    })\n    return index\n  }\n\n  // get the month from the month index \n  getMonthFromIndex(monthIndex, yearIndex, year) {\n    // there will always be only one key, which is the month\n    const objKeys = Object.keys(this.state.entire_data[yearIndex][year][monthIndex])\n    return objKeys[0]\n  }\n\n  // get the month index from the month\n  getIndexFromMonth(month, arr) {\n    let index = undefined\n    arr.map((yearObj, i) => {\n      const objKeys = Object.keys(yearObj)\n      if (objKeys[0] == month) index = i\n    })\n    return index\n  }\n\n  // check if a key exists in any objects in an array of objects \n  checkIfInArray(key, arr) {\n    let exists = false\n    arr.map(obj => {\n      const keys = Object.keys(obj)\n      if (keys.includes(key)) exists = true\n    })\n    return exists\n  }\n\n  render() {\n\n    const { loggedIn, classes } = this.props\n\n    return (\n\n      loggedIn ?\n\n        <ThemeProvider theme={theme}>\n\n          <div>\n\n            <div className=\"DrawerDiv\">\n\n              {/* <IconButton className=\"OpenDrawerButton\"\n                // color=\"inherit\"\n                aria-label=\"open drawer\"\n                onClick={() => this.toggleDrawer()}\n              // edge=\"start\"\n              // className={clsx(classes.menuButton, {\n              //   [classes.hide]: open,\n              // })}\n              >\n                <MenuIcon />\n              </IconButton> */}\n\n              <Drawer\n                classes={{ paper: classes.drawer_paper, paperAnchorDocked: classes.drawer_paper }}\n                variant=\"permanent\"\n              >\n\n                <Menu\n                  id=\"long-menu\"\n                  anchorEl={this.state.menuPosition}\n                  open={Boolean(this.state.menuPosition)}\n                  onClose={() => this.hideAddNewMonth()}\n                  classes={{ list: classes.menu_list }}\n                >\n\n                  <FormControl\n                    classes={{ root: classes.formControl_root }}\n                  >\n\n                    <InputLabel id=\"simple-select-label\">Month</InputLabel>\n                    <Select\n                      id=\"simple-select\"\n                      defaultValue={this.state.newSpendings.month}\n                      onChange={(e) => this.selectFieldOnChangeHandler(e)}\n                    >\n\n                      {[\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"].map(month =>\n                        <MenuItem\n                          value={month}>\n                          {month}\n                        </MenuItem>\n                      )}\n\n                    </Select>\n\n                  </FormControl>\n\n                  <TextField onKeyDown={e => e.stopPropagation()}\n                    id=\"standard-basic\"\n                    label=\"Year\"\n                    classes={{ root: classes.menu_item }}\n                    value={this.state.newSpendings.year}\n                    onChange={(e) => this.updateSpendingsYear(e)}\n                  />\n\n                  <TextField onKeyDown={e => e.stopPropagation()}\n                    id=\"standard-basic\"\n                    label=\"Projected Spendings\"\n                    classes={{ root: classes.menu_item }}\n                    value={this.state.newSpendings.projectedSpendings}\n                    onChange={(e) => this.updateSpendingsProjected(e)}\n                  />\n\n                  <Button\n                    variant=\"outlined\"\n                    color=\"primary\"\n                    classes={{ root: classes.menu_item }}\n                    size=\"small\"\n                    onClick={() => this.createNewSpendings()}\n                  >\n                    Add New Spendings Page\n                  </Button>\n\n                </Menu>\n\n                <IconButton\n                  aria-label=\"add\"\n                  onClick={(e) => this.displayAddNewMonth(e)}>\n                  <AddIcon />\n                </IconButton>\n                <Divider />\n\n                <div>\n                  {this.state.entire_data.map((yearObj, yearIndex) => (\n                    <div>\n\n                      <Typography\n                        color=\"textSecondary\"\n                        display=\"block\"\n                        variant=\"caption\"\n                        align=\"center\"\n                      >\n                        {Object.keys(yearObj).map(year => <p>{year}</p>)}\n                      </Typography>\n\n                      <List>\n                        {this.renderMonths(yearObj, yearIndex).map((month, monthIndex) => (\n                          <ListItem\n                            className={(this.state.currentlySelectedMonth[\"yearIndex\"] == yearIndex && this.state.currentlySelectedMonth[\"monthIndex\"] == monthIndex) ? classes.listItem_buttonSelected : classes.listItem_button}\n                            button\n                            key={month}\n                            onClick={(e) => this.monthsOnClickHandler(e, yearIndex, monthIndex, this.getYearFromIndex(yearIndex), month)}>\n                            <ListItemText primary={month} />\n                          </ListItem>\n                        ))}\n                      </List>\n\n                    </div>\n                  ))}\n                </div>\n\n              </Drawer>\n\n            </div>\n\n            <div className=\"Content\">\n\n              <div className=\"Chart\">\n\n                <PieChart\n                  listToDisplay={this.state.sumForCategories}\n                  pieChartSize={600}\n                  pieChartRadius={150}\n                >\n\n                </PieChart>\n\n                <div className={classes.accountBalanceDiv}>\n                  <Typography variant=\"h5\" className={classes.accountBalance}>\n                    Total Amount: ${this.state.accountBalance}\n                    <br></br>\n                    Projected Spendings: ${this.state.projectedSpendings}\n                  </Typography>\n                </div>\n\n              </div>\n\n              <div className=\"Table\">\n\n                <TableComp\n                  // use the TableContainer class to style the table itself \n                  classes={{ TableContainer: 'TableContainer' }}\n                  headings={this.state.transactions_headings}\n                  data={this.state.transactions_data}\n                  options={this.state.transactions_options}\n                  categories={this.state.transactions_categories}\n                  addRow={this.addTransaction}\n                  editRow={this.editTransaction}\n                  removeRow={this.deleteTransaction}\n                  addCategory={this.addCategory}\n                  removeCategory={this.deleteCategory}\n                />\n\n                <div className=\"SortButtons\">\n\n                  <Grid container spacing={3}>\n\n                    <Grid item xs={4}>\n                      <Paper>\n                        <Button\n                          className=\"SortButton\"\n                          variant={this.state.sortBy == \"Date\" ? \"contained\" : \"outlined\"}\n                          color=\"primary\"\n                          onClick={() => this.changeSort(\"Date\")}>\n                          Sort By Date\n                          {this.state.sortDes[\"Date\"] ? <ArrowDownwardIcon /> : <ArrowUpwardIcon />}\n                        </Button>\n                      </Paper>\n                    </Grid>\n\n                    <Grid item xs={4}>\n                      <Paper>\n                        <Button\n                          className=\"SortButton\"\n                          variant={this.state.sortBy == \"Amount\" ? \"contained\" : \"outlined\"}\n                          color=\"primary\"\n                          onClick={() => this.changeSort(\"Amount\")}>\n                          Sort By Amount\n                          {this.state.sortDes[\"Amount\"] ? <ArrowDownwardIcon /> : <ArrowUpwardIcon />}\n                        </ Button>\n                      </Paper>\n                    </Grid>\n\n                    <Grid item xs={4}>\n                      <Paper>\n                        <Button\n                          className=\"SortButton\"\n                          variant={this.state.sortBy == \"Category\" ? \"contained\" : \"outlined\"}\n                          color=\"primary\"\n                          onClick={() => this.changeSort(\"Category\")}>\n                          Sort By Category\n                          {this.state.sortDes[\"Category\"] ? <ArrowDownwardIcon /> : <ArrowUpwardIcon />}\n                        </Button>\n                      </Paper>\n                    </Grid>\n\n                  </Grid>\n\n                </div>\n\n              </div>\n\n            </div>\n\n          </div >\n\n        </ThemeProvider >\n\n        : <Redirect to=\"/login\" />\n\n    )\n\n  }\n\n}\n\nexport default withStyles(useStyles)(Spendings);","/Users/emilyhuang/Documents/CSC309/team06/src/components/Community/index.js",["338","339"],"import React from 'react';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { deepPurple } from '@material-ui/core/colors';\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { Redirect } from 'react-router';\n\nimport ForumList from \"./forumList.js\"\nimport Sidebar from \"./sidebar.js\"\nimport Grid from '@material-ui/core/Grid';\nimport Fab from '@material-ui/core/Fab';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport MenuOpenIcon from '@material-ui/icons/MenuOpen';\n\n// styles definiton\nconst useStyles = theme => ({\n  root: {\n    display: 'flex',\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n  sidebar: {\n    flexShrink: 0,\n  },\n  sidebarButton: {\n    position: 'absolute',\n    zIndex: 1,\n    top: 100,\n    left: 30,\n    margin: '0 auto',\n  }\n});\n\n// theme definition\nconst theme = createMuiTheme({\n  palette: {\n      primary: {\n          main: deepPurple[800],\n      },\n      secondary: {\n          main: deepPurple[100],\n      }\n  },\n  typography: {\n      fontFamily: [\n          'Poppins',\n          'sans-serif',\n      ].join(','),\n  },\n});\n\n// class definition\nclass Community extends React.Component {\n\n  // ===state===\n  // tempFAInfo: stores information about registered Financial Advisor, this will be fetched from a database\n  // userInfo: stores information about the current user, this is constructed when the class is mounted\n  // openSidebar: flag for opening the side bar\n  // sidebarToggle: determines which side bar option is selected\n  state = {\n    tempFAInfo: [\n      {FAName: \"Angus Wang\",\n        FAIntro: \"I am Angus Wang. I am here to guide you to treasures you'll never find yourself.\",\n        FAFields: [\"Stocks\", \"Budget Planning\", \"Life Hacks\"],\n        FAPoints: 123,\n      },\n      {FAName: \"Angela Merkel\",\n        FAIntro: \"I am Angela Merkel, the chancellor of Germany. I post stuff about the EU on here sometimes.\",\n        FAFields: [\"Politics\", \"Nation Building\"],\n        FAPoints: 456,\n      },\n      {FAName: \"Bill Gates\",\n        FAIntro: \"I am Bill Gates. I won't say much here because my name says it all\",\n        FAFields: [\"Programming\", \"Company Building\"],\n        FAPoints: 789,\n      }\n    ],\n    userInfo: {\n      username: \"\",\n      usertype: \"\",\n      userUpvotedPosts: [],\n      userDownvotedPosts: [],\n      userSavedPosts: [],\n      userFollows: [],\n    },\n    openSidebar: false,\n    sidebarToggle: \"Home\",\n  }\n\n  // constructor\n  constructor(props) {\n    super(props)\n\n    this.userInfoUpdater = this.userInfoUpdater.bind(this)\n  }\n\n  // construct the userInfo state variable (info is passed as a prop)\n  componentDidMount() {\n\n    let usertype = \"\"\n    if (this.props.usertype === \"Financial Advisor\") usertype = \"FA\"\n    else usertype = \"RU\"\n\n    const newUserInfo = {\n      username: this.props.username,\n      usertype: usertype,\n      userUpvotedPosts: [],\n      userDownvotedPosts: [],\n      userSavedPosts: [],\n      userFollows: [],\n    }\n\n    this.setState({ userInfo: newUserInfo })\n  }\n\n  // called in children components to update the userInfo state in this component\n  userInfoUpdater(newUserInfo) {\n\n    this.setState({ userInfo: newUserInfo })\n  }\n\n  // called to open the side bar\n  openSidebar = () => {\n\n    this.setState({ openSidebar: true })\n  }\n\n  // called to close the side bar\n  closeSidebar = () => {\n\n    this.setState({ openSidebar: false })\n  }\n\n  // called when the user makes a selection in the side bar\n  handleSidebarToggle = (toggle) => {\n\n    this.setState({ sidebarToggle: toggle })\n  }\n\n  // render function\n  render() {\n\n    // pass in relevant information as props\n    const { classes, username, usertype, loggedIn } = this.props\n\n    return (\n\n      loggedIn ? \n      <ThemeProvider theme={ theme } className={ classes.root }>\n\n        {/* {side bar component} */}\n        <Sidebar classNmae={ classes.sidebar }\n                  openSidebar={ this.openSidebar }\n                  closeSidebar={ this.closeSidebar }\n                  handleSidebarToggle={ this.handleSidebarToggle }\n                  open={ this.state.openSidebar }/>\n        \n        {/* {button to open side bar} */}\n        <Tooltip title=\"More Page Options\" className={ classes.sidebarButton }>\n          <Fab color=\"primary\" size=\"medium\" onClick={ this.openSidebar }>\n            <MenuOpenIcon fontSize=\"default\" />\n          </Fab>\n        </Tooltip>\n\n        {/* {main forum header and list} */}\n        <Grid container className={ classes.content }>\n          <ForumList userInfo={ this.state.userInfo }\n                    FAInfo={ this.state.tempFAInfo }\n                    sidebarToggle={ this.state.sidebarToggle }\n                    userInfoUpdater={ this.userInfoUpdater }/>\n        </Grid>\n\n      </ThemeProvider> : <Redirect to=\"/login\" />\n    )\n  }\n}\n\nexport default withStyles(useStyles)(Community);\n","/Users/emilyhuang/Documents/CSC309/team06/src/components/Community/comment.js",[],"/Users/emilyhuang/Documents/CSC309/team06/src/components/Sliding/sliding.js",["340"],"/* References:\n   bitcoin image: https://unsplash.com/photos/Ph5_4TnXXYE\n   stock image: https://unsplash.com/photos/osWDvhPlGLU\n   finance image: https://unsplash.com/photos/5fNmWej4tAA\n   image slider reference: https://www.youtube.com/watch?v=l1MYfu5YWHc\n*/\n\nimport { withStyles,\n        Button,\n        Box,\n        Typography,\n        createMuiTheme,\n        ThemeProvider,\n        IconButton} from '@material-ui/core';\nimport { deepPurple } from '@material-ui/core/colors';\nimport { NavigateNext, NavigateBefore } from '@material-ui/icons';\nimport {Link} from 'react-router-dom';\nimport React from 'react';\nimport bitcoin from './../Images/bitcoin.jpg';\nimport stock from './../Images/stock.jpg';\nimport finance from './../Images/finance.jpg';\nimport \"./sliding.css\";\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: deepPurple[800],\n        },\n        secondary: {\n            main: deepPurple[100],\n        }\n    },\n    typography: {\n        fontFamily: [\n            'Poppins',\n            'sans-serif',\n        ].join(','),\n    },\n});\n\nconst useStyles = theme => ({\n\n    signInButton: {\n        position: 'absolute',\n        top: '60%',\n        left: '70%',\n    },\n    box: {\n        position: 'absolute',\n        top: '40%',\n        left: '70%',\n        borderRadius: 10,\n        width: 180,\n    },\n    text: {\n        color: 'white',\n    },\n    title: {\n        position: 'absolute',\n        top: '50%',\n        left: 100,\n    },\n    beforeButton: {\n        position: 'absolute',\n        top: '50%',\n        left: 32,\n        fontSize: '3em',\n        cursor: 'pointer',\n    },\n    nextButton: {\n        position: 'absolute',\n        top: '50%',\n        right: 32,\n        fontSize: '3em',\n        cursor: 'pointer',\n    },\n    beforeIcon: {\n        fontSize: '1em',\n    },\n    nextIcon: {\n        fontSize: '1em',\n    }\n});\n\nconst slides = [\n    { image: bitcoin },\n    { image: stock },\n    { image: finance }\n]\n\nconst length = slides.length;\nlet value = 0;\n\nclass Sliding extends React.Component {\n    state = {\n        currentSlide: 0,\n    };\n\n    nextSlide = (event) => {\n\n        if(value === length - 1) {\n            value = 0;\n        } else {\n            value = value + 1;\n        }\n\n        this.setState({\n            currentSlide: value\n        })\n    }\n\n    prevSlide = (event) => {\n        \n        if(value === 0) {\n            value = length - 1;\n        } else {\n            value = value - 1;\n        }\n\n        this.setState({\n            currentSlide: value\n        })\n    }\n\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <ThemeProvider theme={theme}>\n                <section className=\"slider\">\n                    <IconButton value={this.state.currentSlide} name=\"currentSlide\" color=\"primary\" size=\"large\" aria-label=\"before\" name=\"currentSlide\" className={classes.beforeButton} onClick={this.prevSlide}>\n                        <NavigateBefore className={classes.beforeIcon} />\n                    </IconButton>\n\n                    <IconButton value={this.state.currentSlide} name=\"currentSlide\" color=\"primary\" size=\"large\" aria-label=\"next\" className={classes.nextButton} onClick={this.nextSlide}>\n                        <NavigateNext className={classes.nextIcon} />\n                    </IconButton>\n\n                    {slides.map((slide, index) => {\n                        return (\n                            <div>\n                                <div className={index === this.state.currentSlide ? 'slide active' : 'slide'} key={index}>\n                                    {index === this.state.currentSlide && (<img src={slide.image} alt=\"travel\" className=\"image\"/>)}\n                                </div>\n                                <Box className={classes.box}>\n                                    <Typography variant=\"h5\" className={classes.text}>\n                                        We can help investor's dream come true!\n                                    </Typography>\n                                </Box>\n                                <Link to={'/signup'}>\n                                    <Button href=\"#signin\" size=\"large\" color=\"primary\" variant=\"contained\" className={classes.signInButton}>\n                                        Get Started\n                                    </Button>\n                                </Link>\n                            </div>\n                        )\n                    })}\n                </section>\n            </ThemeProvider>\n        )\n    }\n\n}\n\nexport default withStyles(useStyles)(Sliding);","/Users/emilyhuang/Documents/CSC309/team06/src/components/Community/forumList.js",["341","342","343","344","345","346"],"import React from 'react';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Fab from '@material-ui/core/Fab';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport ForumListItem from \"./forumListItem.js\"\n\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { deepPurple } from '@material-ui/core/colors';\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport AddIcon from '@material-ui/icons/Add';\n\n// define styles\nconst styles =  theme => ({\n  root: {\n    flexGrow: 1,\n    marginLeft: 50,\n  },\n  forumList: {\n    backgroundColor: '#f0f0f0',\n    borderRadius: 5,\n    margin: 10,\n  },\n  forumTopBar: {\n    backgroundColor: deepPurple[50],\n    borderRadius: 5,\n    spacing: '100',\n  },\n  forumTopChunk: {\n    margin: 10,\n  },\n  addPostPanel: {\n    backgroundColor: '#f0f0f0',\n  },\n  filter: {\n    minWidth: 200,\n  },\n  forumBarButton: {\n    padding: 10,\n    marginLeft: 10,\n    marginRight: 0,\n  },\n  purpleText: {\n    color: deepPurple[500],\n    fontSize: 30\n  }\n});\n\n// define theme\nconst theme = createMuiTheme({\n  palette: {\n      primary: {\n          main: deepPurple[800],\n      },\n      secondary: {\n          main: deepPurple[100],\n      }\n  },\n  typography: {\n      fontFamily: [\n          'Poppins',\n          'sans-serif',\n      ].join(','),\n  },\n});\n\n// class defintion\nclass ForumList extends React.Component {\n\n  // ===state===\n  // openNewPost: determines if the newPost drop down is opened\n  // openManagePost: determines if user is managing posts\n  // author: holds the username of the current user if they decide to create a new post\n  // title: holds the new post's title\n  // authorAvatar: the user avatar of the user, currently set to null to display default user icon, later will be fetched from a database\n  // content: holds the new post's content\n  // category: holds the new post's category\n  // postFilter: decides which category of post to display on screen\n  // sortOrder: determines which order the posts are displayed\n  // commenter: holds the username of the current user if they decide to comment on a post\n  // commentContent: holds the new comment's content\n  // posts: stores information about all the posts posted on the website, will be fetched from a database\n  //    author: holds the post's author\n  //    authorUsertype: holds the post's author's user type (regular for financial advisor)\n  //    title: holds the title of the post\n  //    content: holds the content of the post\n  //    authorAvatar: holds the avatar of the post's author, currently null, will be fetched from a database\n  //    category: holds the category of the post\n  //    postID: unique id for the post, used to identify post (IMPORTANT)\n  //    numUpvotes: holds the number of upvotes of the post\n  //    numDownvotes: holds the number of downvotes of the post\n  //    comments: holds the list of comments in the post\n  //        commenter: the username of the commenter\n  //        commentContent: the content of the comment\n  state = {\n    openNewPost: false,\n    openManagePost: false,\n    author: \"\",\n    title: \"\",\n    authorAvatar: \"\",\n    content: \"\",\n    category: \"\",\n    postFilter: \"\",\n    sortOrder: \"\",\n    commenter: \"\",\n    commentContent: \"\",\n    posts: [\n      {author: 'Angus Wang', \n        authorUsertype: \"FA\",\n        title: 'welcome to communtiy', \n        content: 'this is the first community thread', \n        authorAvatar: null,\n        category: \"Announcement\",\n        postID: 1,\n        numUpvotes: 5,\n        numDownvotes: 1,\n        comments: [\n        {commenter: \"Angus Wang\",\n          commentContent: \"a great start to a great forum!\"},\n        {commenter: \"Ian Chen\",\n          commentContent: \"Is there a way to upvote this thread twice? This is honestly the best thing ever\"}\n        ]\n      },\n      {author: 'Winston Churchil', \n        authorUsertype: \"RU\",\n        title: 'victory is at hand', \n        content: \"We are weeks away from winning the war, thanks to my personal genius and our nation's strength. Brothers and sisters, we will soon be remembered as heros of our time, the greatest generation if I might add!\", \n        authorAvatar: null,\n        category: \"Announcement\",\n        postID: 2,\n        numUpvotes: 4,\n        numDownvotes: 2,\n        comments: [\n        {commenter: \"Joseph Stalin\",\n          commentContent: \"The Soviet Union is the reason this war is won! How dare you not include us is this post\"},\n        {commenter: \"Anne Xie\",\n          commentContent: \"How are you guys still alive? I thought you guys died decades ago\"}\n        ]\n      },\n      {author: 'Angela Merkel', \n        authorUsertype: \"FA\",\n        title: 'Bitcoin is gonna fail', \n        content: \"There's no way that bitcoin is going to grow much longer. I predict that bitcoin value will collapse by the end of this year!\", \n        authorAvatar: null,\n        category: \"Opinion\",\n        postID: 3,\n        numUpvotes: 30,\n        numDownvotes: 5,\n        comments: [\n        {commenter: \"Emily Huang\",\n          commentContent: \"Where did you get to this conclusion? In my opinion bitcoin is far from failing, in fact, I think it'll grow another 10 fold!\"},\n        {commenter: \"Carl Marx\",\n          commentContent: \"Stop talking about capitalism in the posts. We all know that all nations will eventually become communist as they develop to their final form. Communism is inevitable and most desirable!\"}\n        ]\n      },\n      {author: 'Bill Gates', \n        authorUsertype: \"FA\",\n        title: 'What do you think about the future of Microsoft?', \n        content: \"Microsoft has been a great company all these year, but we are running out of steam in the recent years. Does anyone have some suggestions for Windows 10 and Microsoft's other products?\", \n        authorAvatar: null,\n        category: \"Question\",\n        postID: 4,\n        numUpvotes: 40,\n        numDownvotes: 20,\n        comments: [\n        {commenter: \"Ian Chen\",\n          commentContent: \"Windows 10 really sucks. Anyone who values productivity should switch to macOS!\"},\n        {commenter: \"Claude Debussy\",\n          commentContent: \"I honestly think Microsoft should just focus on Minecraft. The game is awesome and honestly it seems to be the best Microsoft product now\"}\n        ]\n      },\n      {author: 'The Queen', \n        authorUsertype: \"RU\",\n        title: 'How should I get into stocks?', \n        content: 'I know I am really old, but I am still interested in getting into stocks and other ways of investing? Any experts on this platform willing to help your queen? You rewards will be in the millions!', \n        authorAvatar: null,\n        category: \"Question\",\n        postID: 5,\n        numUpvotes: 1,\n        numDownvotes: 50,\n        comments: [\n        {commenter: \"Prince Charles\",\n          commentContent: \"How are you still alive and kicking?\"}\n        ]\n      }\n    ]\n  }\n\n  // called when opening write new post\n  handleClickOpen = () => {\n    this.setState({ openNewPost: true })\n  }\n\n  // called when closing write new post\n  handleClose = () => {\n\n    this.setState({\n      openNewPost: false,\n      openManagePost: false,\n\n      author: \"\",\n      title: \"\",\n      authorAvatar: \"\",\n      content: \"\",\n      category: \"\",\n      postID: null\n    })\n  }\n\n  // called when opening manage post\n  handleClickManage = () => {\n    this.setState({ openManagePost: true })\n  }\n\n  // called when finished manage post\n  handleClickManageDone = () => {\n    this.setState({ openManagePost: false })\n  }\n\n  // called when user types into a textbox\n  handleInputChange = (event) => {\n    const value = event.target.value\n    const name = event.target.name\n    this.setState({ [name]: value })\n  }\n\n  // called when user chooses a post filter\n  handleFilterInputChange = (event) => {\n    const value = event.target.value\n    this.setState({ postFilter: value })\n  }\n\n  // called when user chooses a sort by option\n  handleSortInputChange = (event) => {\n    const value = event.target.value\n    this.setState({ sortOrder: value }, () => this.sortPosts(value))\n  }\n\n  // helper that sort the list of posts\n  sortPosts = (order) => {\n\n    const posts = this.state.posts\n\n    switch(order) {\n      case \"Oldest\":\n        posts.sort((a, b) => a.postID > b.postID ? 1 : -1)\n        break;\n      case \"Newest\":\n        posts.sort((a, b) => a.postID < b.postID ? 1 : -1)\n        break;\n      case \"MostUpvotes\":\n        posts.sort((a, b) => a.numUpvotes < b.numUpvotes ? 1 : -1)\n        break;\n      case \"BestRated\":\n        posts.sort((a, b) => a.numUpvotes-a.numDownvotes < b.numUpvotes-b.numDownvotes ? 1 : -1)\n\n    }\n\n    this.setState({ posts: posts })\n  }\n\n  // called when a new post is created\n  addPost = (username) => {\n\n    const postList = this.state.posts\n    const maxValue = Math.max.apply(Math, postList.map(function(p) { return p.postID; }))\n    const newID = (postList.length === 0) ? 1 : maxValue + 1\n\n    const newPost = {\n      author: username,\n      authorUsertype: this.props.userInfo.usertype,\n      title: this.state.title,\n      authorAvatar: null,\n      content: this.state.content,\n      category: this.state.category,\n      postID: newID,\n      numUpvotes: 0,\n      numDownvotes: 0,\n      comments: []\n    }\n\n    postList.push(newPost)\n\n    this.setState({\n      posts: postList,\n\n      author: \"\",\n      title: \"\",\n      authorAvatar: \"\",\n      content: \"\",\n      category: \"\",\n      postID: null\n    })\n\n    this.handleClose()\n    this.sortPosts(this.state.sortOrder)\n  }\n\n  // called when user chooses a category for new post\n  changeCategory = (_category) => {\n    this.setState({ category: _category })\n  }\n\n  // called when user adds a comment to a post\n  postComment = (target) => {\n\n    const targetPostID = target.postID\n    const targetPostIndex = this.state.posts.findIndex(post => post.postID === targetPostID)\n    const targetPost = this.state.posts.filter((p) => { return p.postID === targetPostID })\n    const targetPostComments = targetPost[0].comments\n\n    const newComment = {\n      commenter: this.props.userInfo.username,\n      commentContent: target.comment\n    }\n\n    targetPostComments.push(newComment)\n    targetPost[0].comments = targetPostComments\n    const otherPosts = this.state.posts.filter((p) => { return p.postID !== targetPostID })\n    otherPosts.splice(targetPostIndex, 0, targetPost[0])\n\n    this.setState({ posts: otherPosts })\n  }\n\n  // called when user deletes a post\n  deletePosts = (target) => {\n\n    const targetPostID = target.postID\n    const otherPosts = this.state.posts.filter((p) => { return p.postID !== targetPostID })\n    this.setState({ posts: otherPosts })\n\n    const userInfo = this.props.userInfo\n    const indexu = userInfo.userUpvotedPosts.indexOf(targetPostID)\n    const indexd = userInfo.userDownvotedPosts.indexOf(targetPostID)\n    const indexs = userInfo.userSavedPosts.indexOf(targetPostID)\n\n    if (indexu !== -1) {\n      userInfo.userUpvotedPosts.splice(indexu, 1)\n      this.props.userInfoUpdater(userInfo)\n    }\n    if (indexd !== -1) {\n      userInfo.userDownvotedPosts.splice(indexd, 1)\n      this.props.userInfoUpdater(userInfo)\n    }\n    if (indexs !== -1) {\n      userInfo.userSavedPosts.splice(indexs, 1)\n      this.props.userInfoUpdater(userInfo)\n    }\n\n  }\n\n  // called when user upvotes a post\n  addUpvote = (target) => {\n\n    const targetPostID = target.postID\n    const targetPostIndex = this.state.posts.findIndex(post => post.postID === targetPostID)\n    const targetPost = this.state.posts.filter((p) => { return p.postID === targetPostID })\n    targetPost[0].numUpvotes = targetPost[0].numUpvotes + 1\n    const otherPosts = this.state.posts.filter((p) => { return p.postID !== targetPostID })\n    otherPosts.splice(targetPostIndex, 0, targetPost[0])\n    this.setState({ posts: otherPosts })\n\n    const userInfo = this.props.userInfo\n    userInfo.userUpvotedPosts.push(targetPostID)\n    this.props.userInfoUpdater(userInfo)\n\n  }\n\n  // called when user deletes their upvote from a post\n  minusUpvote = (target) => {\n\n    const targetPostID = target.postID\n    const targetPostIndex = this.state.posts.findIndex(post => post.postID === targetPostID)\n    const targetPost = this.state.posts.filter((p) => { return p.postID === targetPostID })\n    targetPost[0].numUpvotes = targetPost[0].numUpvotes - 1\n    const otherPosts = this.state.posts.filter((p) => { return p.postID !== targetPostID })\n    otherPosts.splice(targetPostIndex, 0, targetPost[0])\n    this.setState({ posts: otherPosts })\n\n    const userInfo = this.props.userInfo\n    const index = userInfo.userUpvotedPosts.indexOf(targetPostID)\n    if (index !== -1) userInfo.userUpvotedPosts.splice(index, 1)\n    this.props.userInfoUpdater(userInfo)\n\n  }\n\n  // called when user downvotes a post\n  addDownvote = (target) => {\n\n    const targetPostID = target.postID\n    const targetPostIndex = this.state.posts.findIndex(post => post.postID === targetPostID)\n    const targetPost = this.state.posts.filter((p) => { return p.postID === targetPostID })\n    targetPost[0].numDownvotes = targetPost[0].numDownvotes + 1\n    const otherPosts = this.state.posts.filter((p) => { return p.postID !== targetPostID })\n    otherPosts.splice(targetPostIndex, 0, targetPost[0])\n    this.setState({ posts: otherPosts })\n\n    const userInfo = this.props.userInfo\n    userInfo.userDownvotedPosts.push(targetPostID)\n    this.props.userInfoUpdater(userInfo)\n\n  }\n\n  // called when user deletes a downvote from a post\n  minusDownvote = (target) => {\n\n    const targetPostID = target.postID\n    const targetPostIndex = this.state.posts.findIndex(post => post.postID === targetPostID)\n    const targetPost = this.state.posts.filter((p) => { return p.postID === targetPostID })\n    targetPost[0].numDownvotes = targetPost[0].numDownvotes - 1\n    const otherPosts = this.state.posts.filter((p) => { return p.postID !== targetPostID })\n    otherPosts.splice(targetPostIndex, 0, targetPost[0])\n    this.setState({ posts: otherPosts })\n\n    const userInfo = this.props.userInfo\n    const index = userInfo.userDownvotedPosts.indexOf(targetPostID)\n    if (index !== -1) userInfo.userDownvotedPosts.splice(index, 1)\n    this.props.userInfoUpdater(userInfo)\n    \n  }\n\n  // main render function\n  render() {\n\n    // pass in props\n    const { userInfo, FAInfo, userInfoUpdater, sidebarToggle } = this.props\n    const { classes } = this.props\n\n    // mainList is the list of posts to display, here we display different versions of the list based on some parameters\n    let mainList;\n\n    // case when the side bar is set to home\n    if (sidebarToggle === \"Home\") {\n      mainList = <List className={ classes.forumList }>\n        { this.state.posts.map((thread) => {\n            if (this.state.openManagePost ? (userInfo.usertype === \"FA\" ? this.state.postFilter === \"\" : this.state.postFilter === \"\" && thread.author === userInfo.username) : this.state.postFilter === \"\") {\n              return (\n                <div>\n                  <ForumListItem postTitle={ thread.title }\n                                postAuthor={ thread.author }\n                                postAuthorUsertype={ thread.authorUsertype}\n                                postTextContent={ thread.content }\n                                avatar={ thread.authorAvatar }\n                                category={ thread.category }\n                                comments={ thread.comments }\n                                postID={ thread.postID }\n                                openManagePost={ this.state.openManagePost ? true : false }\n                                numUpvotes={ thread.numUpvotes }\n                                numDownvotes={ thread.numDownvotes }\n                                userInfo={ userInfo }\n                                FAInfo={ FAInfo }\n                                userInfoUpdater={ userInfoUpdater }\n                                addUpvote={ this.addUpvote }\n                                minusUpvote={ this.minusUpvote }\n                                addDownvote={ this.addDownvote }\n                                minusDownvote={ this.minusDownvote }\n                                deletePosts={ this.deletePosts }\n                                postComment={ this.postComment }/>\n                  { this.state.posts[this.state.posts.length - 1] === thread ? null : <Divider variant=\"inset\" component=\"li\" />}\n                </div>\n              )\n            }\n            else if (this.state.openManagePost ? (userInfo.usertype === \"FA\" ? this.state.postFilter === thread.category : this.state.postFilter === thread.category && thread.author === userInfo.username) : this.state.postFilter === thread.category) {\n              return (\n                <div>\n                  <ForumListItem postTitle={ thread.title }\n                                postAuthor={ thread.author }\n                                postAuthorUsertype={ thread.authorUsertype}\n                                postTextContent={ thread.content }\n                                avatar={ thread.authorAvatar }\n                                category={ thread.category }\n                                comments={ thread.comments }\n                                postID={ thread.postID }\n                                openManagePost={ this.state.openManagePost ? true : false }\n                                numUpvotes={ thread.numUpvotes }\n                                numDownvotes={ thread.numDownvotes }\n                                userInfo={ userInfo }\n                                FAInfo={ FAInfo }\n                                userInfoUpdater={ userInfoUpdater }\n                                addUpvote={ this.addUpvote }\n                                minusUpvote={ this.minusUpvote }\n                                addDownvote={ this.addDownvote }\n                                minusDownvote={ this.minusDownvote }\n                                deletePosts={ this.deletePosts }\n                                postComment={ this.postComment }/>\n                  { this.state.posts[this.state.posts.length - 1] === thread ? null : <Divider variant=\"inset\" component=\"li\" />}\n                </div>\n              )\n            }\n          })\n        }\n      </List>\n    }\n\n    // case when the side bar is set to Followed Posts\n    else if (sidebarToggle === \"Followed Posts\") {\n      mainList = <List className={ classes.forumList }>\n        { this.state.posts.map((thread) => {\n            if (this.state.postFilter === \"\" && userInfo.userFollows.includes((FAInfo.filter((FA) => {return FA.FAName === thread.author}))[0])) {\n              return (\n                <div>\n                  <ForumListItem postTitle={ thread.title }\n                                postAuthor={ thread.author }\n                                postAuthorUsertype={ thread.authorUsertype}\n                                postTextContent={ thread.content }\n                                avatar={ thread.authorAvatar }\n                                category={ thread.category }\n                                comments={ thread.comments }\n                                postID={ thread.postID }\n                                openManagePost={ this.state.openManagePost ? true : false }\n                                numUpvotes={ thread.numUpvotes }\n                                numDownvotes={ thread.numDownvotes }\n                                userInfo={ userInfo }\n                                FAInfo={ FAInfo }\n                                userInfoUpdater={ userInfoUpdater }\n                                addUpvote={ this.addUpvote }\n                                minusUpvote={ this.minusUpvote }\n                                addDownvote={ this.addDownvote }\n                                minusDownvote={ this.minusDownvote }\n                                deletePosts={ this.deletePosts }\n                                postComment={ this.postComment }/>\n                  { this.state.posts[this.state.posts.length - 1] === thread ? null : <Divider variant=\"inset\" component=\"li\" />}\n                </div>\n              )\n            }\n            else if (this.state.postFilter === thread.category && userInfo.userFollows.includes((FAInfo.filter((FA) => {return FA.FAName === thread.author}))[0])) {\n              return (\n                <div>\n                  <ForumListItem postTitle={ thread.title }\n                                postAuthor={ thread.author }\n                                postAuthorUsertype={ thread.authorUsertype}\n                                postTextContent={ thread.content }\n                                avatar={ thread.authorAvatar }\n                                category={ thread.category }\n                                comments={ thread.comments }\n                                postID={ thread.postID }\n                                openManagePost={ this.state.openManagePost ? true : false }\n                                numUpvotes={ thread.numUpvotes }\n                                numDownvotes={ thread.numDownvotes }\n                                userInfo={ userInfo }\n                                FAInfo={ FAInfo }\n                                userInfoUpdater={ userInfoUpdater }\n                                addUpvote={ this.addUpvote }\n                                minusUpvote={ this.minusUpvote }\n                                addDownvote={ this.addDownvote }\n                                minusDownvote={ this.minusDownvote }\n                                deletePosts={ this.deletePosts }\n                                postComment={ this.postComment }/>\n                  { this.state.posts[this.state.posts.length - 1] === thread ? null : <Divider variant=\"inset\" component=\"li\" />}\n                </div>\n              )\n            }\n          })\n        }\n      </List>\n    }\n\n    // case when the side bar is set to Liked Posts\n    else if (sidebarToggle === \"Liked Posts\") {\n      mainList = <List className={ classes.forumList }>\n        { this.state.posts.map((thread) => {\n            if (this.state.postFilter === \"\" && userInfo.userUpvotedPosts.includes(thread.postID)) {\n              return (\n                <div>\n                  <ForumListItem postTitle={ thread.title }\n                                postAuthor={ thread.author }\n                                postAuthorUsertype={ thread.authorUsertype}\n                                postTextContent={ thread.content }\n                                avatar={ thread.authorAvatar }\n                                category={ thread.category }\n                                comments={ thread.comments }\n                                postID={ thread.postID }\n                                openManagePost={ this.state.openManagePost ? true : false }\n                                numUpvotes={ thread.numUpvotes }\n                                numDownvotes={ thread.numDownvotes }\n                                userInfo={ userInfo }\n                                FAInfo={ FAInfo }\n                                userInfoUpdater={ userInfoUpdater }\n                                addUpvote={ this.addUpvote }\n                                minusUpvote={ this.minusUpvote }\n                                addDownvote={ this.addDownvote }\n                                minusDownvote={ this.minusDownvote }\n                                deletePosts={ this.deletePosts }\n                                postComment={ this.postComment }/>\n                  { this.state.posts[this.state.posts.length - 1] === thread ? null : <Divider variant=\"inset\" component=\"li\" />}\n                </div>\n              )\n            }\n            else if (this.state.postFilter === thread.category && userInfo.userUpvotedPosts.includes(thread.postID)) {\n              return (\n                <div>\n                  <ForumListItem postTitle={ thread.title }\n                                postAuthor={ thread.author }\n                                postAuthorUsertype={ thread.authorUsertype}\n                                postTextContent={ thread.content }\n                                avatar={ thread.authorAvatar }\n                                category={ thread.category }\n                                comments={ thread.comments }\n                                postID={ thread.postID }\n                                openManagePost={ this.state.openManagePost ? true : false }\n                                numUpvotes={ thread.numUpvotes }\n                                numDownvotes={ thread.numDownvotes }\n                                userInfo={ userInfo }\n                                FAInfo={ FAInfo }\n                                userInfoUpdater={ userInfoUpdater }\n                                addUpvote={ this.addUpvote }\n                                minusUpvote={ this.minusUpvote }\n                                addDownvote={ this.addDownvote }\n                                minusDownvote={ this.minusDownvote }\n                                deletePosts={ this.deletePosts }\n                                postComment={ this.postComment }/>\n                  { this.state.posts[this.state.posts.length - 1] === thread ? null : <Divider variant=\"inset\" component=\"li\" />}\n                </div>\n              )\n            }\n          })\n        }\n      </List>\n    }\n\n    // case when the side bar is set to Saved Posts\n    else if (sidebarToggle === \"Saved Posts\") {\n      mainList = <List className={ classes.forumList }>\n        { this.state.posts.map((thread) => {\n            if (this.state.postFilter === \"\" && userInfo.userSavedPosts.includes(thread.postID)) {\n              return (\n                <div>\n                  <ForumListItem postTitle={ thread.title }\n                                postAuthor={ thread.author }\n                                postAuthorUsertype={ thread.authorUsertype}\n                                postTextContent={ thread.content }\n                                avatar={ thread.authorAvatar }\n                                category={ thread.category }\n                                comments={ thread.comments }\n                                postID={ thread.postID }\n                                openManagePost={ this.state.openManagePost ? true : false }\n                                numUpvotes={ thread.numUpvotes }\n                                numDownvotes={ thread.numDownvotes }\n                                userInfo={ userInfo }\n                                FAInfo={ FAInfo }\n                                userInfoUpdater={ userInfoUpdater }\n                                addUpvote={ this.addUpvote }\n                                minusUpvote={ this.minusUpvote }\n                                addDownvote={ this.addDownvote }\n                                minusDownvote={ this.minusDownvote }\n                                deletePosts={ this.deletePosts }\n                                postComment={ this.postComment }/>\n                  { this.state.posts[this.state.posts.length - 1] === thread ? null : <Divider variant=\"inset\" component=\"li\" />}\n                </div>\n              )\n            }\n            else if (this.state.postFilter === thread.category && userInfo.userSavedPosts.includes(thread.postID)) {\n              return (\n                <div>\n                  <ForumListItem postTitle={ thread.title }\n                                postAuthor={ thread.author }\n                                postAuthorUsertype={ thread.authorUsertype}\n                                postTextContent={ thread.content }\n                                avatar={ thread.authorAvatar }\n                                category={ thread.category }\n                                comments={ thread.comments }\n                                postID={ thread.postID }\n                                openManagePost={ this.state.openManagePost ? true : false }\n                                numUpvotes={ thread.numUpvotes }\n                                numDownvotes={ thread.numDownvotes }\n                                userInfo={ userInfo }\n                                FAInfo={ FAInfo }\n                                userInfoUpdater={ userInfoUpdater }\n                                addUpvote={ this.addUpvote }\n                                minusUpvote={ this.minusUpvote }\n                                addDownvote={ this.addDownvote }\n                                minusDownvote={ this.minusDownvote }\n                                deletePosts={ this.deletePosts }\n                                postComment={ this.postComment }/>\n                  { this.state.posts[this.state.posts.length - 1] === thread ? null : <Divider variant=\"inset\" component=\"li\" />}\n                </div>\n              )\n            }\n          })\n        }\n      </List>\n    }\n\n    return (\n        <div className={ classes.root }>\n          <Container maxWidth=\"xl\">\n\n            {/* {top bar of forum list} */}\n            <Card className={ classes.forumTopChunk }>\n\n              <CardActions className={ classes.forumTopBar }>\n\n                {/* {page title} */}\n                <CardContent>\n                  <span className={ classes.purpleText } > { sidebarToggle } </span>\n                </CardContent>\n\n                {/* {drop down to filter posts based on category} */}\n                <FormControl className={ classes.filter }> \n                  <InputLabel>Filter Posts</InputLabel>\n                  <Select onChange={ this.handleFilterInputChange }>\n                    <MenuItem value=\"\">None</MenuItem>\n                    <MenuItem value=\"Announcement\">Announcement</MenuItem>\n                    <MenuItem value=\"Question\">Question</MenuItem>\n                    <MenuItem value=\"Opinion\">Opinion</MenuItem>\n                  </Select>\n                </FormControl>\n\n                {/* {drop down to reorder posts} */}\n                <FormControl className={ classes.filter }>\n                  <InputLabel>Sort By</InputLabel>\n                  <Select onChange={ this.handleSortInputChange }>\n                    <MenuItem value=\"Oldest\">Oldest</MenuItem>\n                    <MenuItem value=\"Newest\">Newest</MenuItem>\n                    <MenuItem value=\"MostUpvotes\">Most Upvotes</MenuItem>\n                    <MenuItem value=\"BestRated\">Best Rated</MenuItem>\n                  </Select>\n                </FormControl>\n\n                <Grid Container justify=\"flex-end\">\n\n                  {/* {add post button} */}\n                  { this.state.openManagePost === true || this.state.openNewPost === true || sidebarToggle !== \"Home\" ? \n                    <Tooltip title=\"Add Post\">\n                      <Fab color=\"primary\" size=\"small\" onClick={ this.handleClickOpen } disabled>\n                        <AddIcon fontSize=\"large\"/>\n                      </Fab>\n                    </Tooltip>\n                    :\n                    <Tooltip title=\"Add Post\">\n                      <Fab color=\"primary\" size=\"small\" onClick={ this.handleClickOpen }>\n                        <AddIcon fontSize=\"large\"/>\n                      </Fab>\n                    </Tooltip>\n                  }\n\n                  {/* {manage post button} */}\n                  { this.state.openManagePost ? \n                    <Button className={ classes.forumBarButton } color=\"primary\" variant=\"contained\" onClick={ this.handleClickManageDone }>\n                      Done\n                    </Button> : (sidebarToggle === \"Home\" ? \n                    <Button className={ classes.forumBarButton } color=\"primary\" variant=\"contained\" onClick={ this.handleClickManage }>\n                      Manage Posts\n                    </Button> : \n                    <Button className={ classes.forumBarButton } color=\"primary\" variant=\"contained\" disabled>\n                      Manage Posts\n                    </Button> )\n                  }\n\n                </Grid>\n                \n              </CardActions>\n              \n              {/* {new post drop down entries} */}\n              { this.state.openNewPost ? \n              <React.Fragment>\n\n                <CardContent>\n\n                  {/* {enter post title} */}\n                  <TextField\n                    value={ this.state.title }\n                    onChange={ this.handleInputChange }\n                    size=\"small\"\n                    variant=\"outlined\"\n                    margin=\"dense\"\n                    name=\"title\"\n                    label=\"Post Title\"\n                    fullWidth\n                  />\n\n                  <br></br>\n                  <br></br>\n                  <Typography>Category:</Typography>\n                  <br></br>\n                  \n                  {/* {enter post category} */}\n                  <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\" fullWidth>\n                    <Button variant={ this.state.category === \"Announcement\" ? \"contained\" : \"outlined\"} onClick={ () => this.changeCategory(\"Announcement\") }>Announcement</Button>\n                    <Button variant={ this.state.category === \"Question\" ? \"contained\" : \"outlined\"} onClick={ () => this.changeCategory(\"Question\") }>Question</Button>\n                    <Button variant={ this.state.category === \"Opinion\" ? \"contained\" : \"outlined\"} onClick={ () => this.changeCategory(\"Opinion\") }>Opinion</Button>\n                  </ButtonGroup>\n\n                  <br></br>\n                  <br></br>\n\n                  {/* {enter post contents} */}\n                  <TextField\n                    value={ this.state.content }\n                    onChange={ this.handleInputChange }\n                    multiline\n                    rows=\"5\"\n                    variant=\"outlined\"\n                    margin=\"dense\"\n                    name=\"content\"\n                    label=\"Say something here...\"\n                    fullWidth\n                  />\n\n                </CardContent>\n\n                {/* {cancel and post buttons} */}\n                <CardActions>\n\n                  {/* <Button onClick={ this.handleClose } color=\"primary\">\n                    Cancel\n                  </Button> */}\n\n                  <Button onClick={ () => this.addPost(userInfo.username) } color=\"primary\" disabled={ this.state.title !== \"\" && this.state.content !== \"\" && this.state.category !== \"\" ? false : true}>\n                    Post\n                  </Button>\n\n                </CardActions>\n\n              </React.Fragment>\n              : null }\n              \n            </Card>\n\n            {/* {list of posts as defined above} */}\n            {mainList}\n              \n          </Container>\n        </div>\n    )\n  }\n}\n\nexport default withStyles(styles)(ForumList);","/Users/emilyhuang/Documents/CSC309/team06/src/components/Community/sidebar.js",["347","348","349"],"import React from 'react';\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Drawer from '@material-ui/core/Drawer';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport BarChartIcon from '@material-ui/icons/BarChart';\nimport PermIdentityIcon from '@material-ui/icons/PermIdentity';\nimport ThumbUpAltIcon from '@material-ui/icons/ThumbUpAlt';\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { deepPurple } from '@material-ui/core/colors';\n\n// define styles\nconst styles =  theme => ({\n    forumList: {\n      backgroundColor: '#f0f0f0',\n      borderRadius: 5,\n      margin: 10,\n    },\n    drawer: {\n      width: 200,\n      flexShrink: 0,\n    },\n    drawerContainer: {\n      overflow: 'auto',\n    }\n  });\n\n// define theme\nconst theme = createMuiTheme({\n  palette: {\n      primary: {\n          main: deepPurple[800],\n      },\n      secondary: {\n          main: deepPurple[100],\n      }\n  },\n  typography: {\n      fontFamily: [\n          'Poppins',\n          'sans-serif',\n      ].join(','),\n  },\n});\n\n// class definition\nclass Sidebar extends React.Component {\n\n  render() {\n\n    // save props\n    const { classes, openSidebar, closeSidebar, handleSidebarToggle, open } = this.props\n\n    return (\n      <Drawer\n        className={classes.drawer}\n        open={ this.props.open }\n        variant=\"persistent\"\n      >\n        <Toolbar />\n        <div className={classes.drawerContainer}>\n\n          {/* {close button} */}\n          <List>\n\n            <ListItem button color=\"secondary\" onClick={ closeSidebar } >\n              <ListItemIcon>\n               <ArrowBackIosIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Close\" />\n            </ListItem>\n\n          </List>\n\n          <Divider />\n\n          {/* {all posts and followed posts toggles} */}\n          <List>\n\n            <ListItem button onClick={ () => handleSidebarToggle(\"Home\") }>\n              <ListItemIcon>\n                <BarChartIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Home\" />\n            </ListItem>\n\n            <ListItem button onClick={ () => handleSidebarToggle(\"Followed Posts\") }>\n              <ListItemIcon>\n                <PermIdentityIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Followed Posts\" />\n            </ListItem>\n\n          </List>\n\n          <Divider />\n\n          {/* {liked posts and saved posts toggles} */}\n          <List>\n\n            <ListItem button onClick={ () => handleSidebarToggle(\"Liked Posts\") }>\n              <ListItemIcon>\n                <ThumbUpAltIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Liked Posts\" />\n            </ListItem>\n\n            <ListItem button onClick={ () => handleSidebarToggle(\"Saved Posts\") }>\n              <ListItemIcon>\n                <SaveAltIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Saved Posts\" />\n            </ListItem>\n\n          </List>\n          \n        </div>\n\n      </Drawer>\n    )\n  }\n}\n\nexport default withStyles(styles)(Sidebar) ","/Users/emilyhuang/Documents/CSC309/team06/src/components/Investments/PieChart.js",["350","351","352","353","354","355","356"],"//Sources used:\n//https://stackoverflow.com/questions/33924150/how-to-access-canvas-context-in-react\n//https://stackoverflow.com/questions/27736288/how-to-fill-the-whole-canvas-with-specific-color\n//https://medium.com/@pdx.lucasm/canvas-with-react-js-32e133c05258\n//https://gist.github.com/prof3ssorSt3v3/7f16fe9397c013d364f2d4484cad3ca8\n//https://stackoverflow.com/questions/30790010/html-canvas-hover-text\n//https://stackoverflow.com/questions/6270785/how-to-determine-whether-a-point-x-y-is-contained-within-an-arc-section-of-a-c\n//https://stackoverflow.com/questions/2142535/how-to-clear-the-canvas-for-redrawing\n//https://stackoverflow.com/questions/25630035/javascript-getboundingclientrect-changes-while-scrolling\n//https://stackoverflow.com/questions/43193341/how-to-generate-random-pastel-or-brighter-color-in-javascript\n\n\nimport React, { useRef, useEffect, useReducer } from 'react'\n\nclass PieChart extends React.Component {\n    state = {\n        canvasWidth: 600,\n        canvasHeight: 600,\n        slices: [],\n        radius: 125,\n    }\n\n    constructor(props) {\n        super(props);\n        const {pieChartSize, pieChartRadius} = this.props;\n        this.state.canvasHeight = pieChartSize;\n        this.state.canvasWidth = pieChartSize;\n        this.state.radius = pieChartRadius\n        this.pieChartRef = React.createRef();\n    }\n\n    randomPastelColourCode = () => {\n        return \"hsl(\" + 360 * Math.random() + ',' +\n             (25 + 70 * Math.random()) + '%,' + \n             (80 + 10 * Math.random()) + '%)'\n    }\n\n    drawSlices = () => {\n        //BookCost is the total amount spend on that stock/in that category\n       \n        const { listToDisplay} = this.props\n\n        let startAngle = 0; \n        let radius = this.state.radius;\n        let cx = this.state.canvasWidth/2;\n        let cy = this.state.canvasHeight/2;\n        let total = listToDisplay.reduce( (ttl, stock) => {\n            return ttl + Math.round( (parseFloat(stock[\"Book Cost\"])  * 100)/ 100 )\n        }, 0);\n\n        listToDisplay.forEach(element => {\n            //here the slices are draw backwards...(clockwise) so make sure to push into the list properly\n           \n            this.context.lineWidth = 3;\n            this.context.strokeStyle = '#fafafa';\n            this.context.fillStyle = this.randomPastelColourCode();\n            let sliceColour = this.context.fillStyle;\n            this.context.beginPath();\n            \n            // draw the pie wedges\n            let actualBookCost = parseFloat(element[\"Book Cost\"]);\n            actualBookCost = Math.round(actualBookCost * 100) / 100; //such that it's only to 2 decimal places\n            let endAngle = ((actualBookCost/ total) * Math.PI * 2) + startAngle;\n            this.context.moveTo(cx, cy);\n            this.context.arc(cx, cy, radius, startAngle, endAngle);\n            this.context.lineTo(cx, cy);\n            this.context.fill();\n            this.context.stroke();\n            this.context.closePath();\n            \n            // add the labels\n            this.context.beginPath();\n            this.context.font = '20px Poppins, sans-serif';\n            this.context.textAlign = 'center';\n            this.context.fillStyle = 'rebeccapurple';\n            // 1.5 * radius is the length of the Hypotenuse\n            let theta = (startAngle + endAngle) / 2.0;\n            let deltaY = Math.sin(theta) * 1.5 * radius;\n            let deltaX = Math.cos(theta) * 1.5 * radius;\n\n            //point to label\n            this.context.strokeStyle = 'rebeccapurple';\n            this.context.moveTo(cx+deltaX/1.65, cy+deltaY/1.65);\n            this.context.lineTo((4*deltaX/5)+cx, (4*deltaY/5)+cy);\n            this.context.stroke();\n\n            let percentage = Math.round(+((actualBookCost*100)/total));\n            this.context.fillText(element.Name + \" (\" + percentage + \"%)\", deltaX+cx, deltaY+cy);\n            \n            this.context.closePath();\n            \n            //store the slice information for redrawing after hovering\n            this.state.slices.push({ \n                    \"name\" : element.Name,\n                    \"colour\" : sliceColour,\n                    \"startAngle\" : (2.0*Math.PI) - endAngle,    //since arc draws the slice backwards in clockwise fasion\n                    \"endAngle\": (2.0*Math.PI) - startAngle,\n                    \"drawStartAngle\": startAngle,\n                    \"drawEndAngle\": endAngle,\n                    \"bookCost\": actualBookCost\n            });\n            startAngle = endAngle;\n        });\n    }\n\n    drawAccentedSlice = (slice, accented) => {\n        const { listToDisplay} = this.props\n        let radius = parseFloat(this.state.radius);\n        let cx = parseFloat(this.state.canvasWidth/2);\n        let cy = parseFloat(this.state.canvasHeight/2);\n        this.context.strokeStyle = '#fafafa';\n        this.context.fillStyle = slice.colour;\n        \n        this.context.beginPath();\n        \n        // draw the pie wedges\n        this.context.moveTo(cx, cy);\n        this.context.arc(cx, cy, radius, slice.drawStartAngle, slice.drawEndAngle);\n        this.context.lineTo(cx, cy);\n        this.context.fill();\n        this.context.stroke();\n        this.context.closePath();\n\n        this.context.beginPath();  \n        this.context.font = '20px Poppins, sans-serif';\n        this.context.textAlign = 'center';\n        this.context.fillStyle = 'rebeccapurple';\n        this.context.strokeStyle = 'rebeccapurple';\n\n        let theta = (slice.drawStartAngle + slice.drawEndAngle) / 2.0;\n        let deltaY = parseFloat(Math.sin(theta) * 1.5 * radius);\n        let deltaX = parseFloat(Math.cos(theta) * 1.5 * radius);\n        \n        let total = listToDisplay.reduce( (ttl, stock) => {\n            return ttl + Math.round( (parseFloat(stock[\"Book Cost\"])  * 100)/ 100 )\n        }, 0);\n\n        // add the labels\n        if(accented == 1){\n            this.context.fillText(\"$\" + slice.bookCost, deltaX/2+cx, deltaY/2+cy); \n            this.context.closePath();\n        }else{\n            this.context.moveTo(parseFloat(cx+deltaX/1.65), parseFloat(cy+deltaY/1.65));\n            this.context.lineTo(parseFloat((4*deltaX/5)+cx), parseFloat((4*deltaY/5)+cy));\n            this.context.lineWidth = 3;\n            this.context.stroke();\n            this.context.closePath();\n        } \n    }\n\n    redraw = () => {\n        for(let i = 0; i < this.state.slices.length; i++){\n            this.drawAccentedSlice(this.state.slices[i],0);\n        }\n    }\n\n    componentDidMount() {\n        this.context = this.pieChartRef.current.getContext('2d');\n        let elem = document.getElementById('pieChartCanvas');\n\n        const {listToDisplay} = this.props\n        this.drawSlices();\n\n        //NOTE!!!!!! get bounding client rect gets the positions according to the window not the document!!!\n        let rect = elem.getBoundingClientRect();\n        \n        //add event listeners\n        document.addEventListener('mousewheel', (e) => {\n            rect = elem.getBoundingClientRect();\n        })\n\n        document.addEventListener('mousemove', (e) => {\n            let mouseX=parseInt(e.clientX);\n            let mouseY=parseInt(e.clientY);\n            let cx = this.state.canvasWidth/2;\n            let cy = this.state.canvasHeight/2;\n            //mouse is relative to the window, rect is relative to the window\n            //cx and cy are fixed\n            //relativeX and relative Y are the distances from the center of the \"pie\"(no +ve or -ve signs)\n            let relativeX;\n            let relativeY;\n            let angle;\n      \n            //Find the mouse positions relative to the center of the pie chart\n            // quadrant I & II:\n            if(mouseY > rect.y && mouseY < (rect.y + cy)){\n                relativeY = (cy + rect.y ) - mouseY;\n                //quadrant I:\n                if(mouseX > (rect.x + cx) && mouseX < rect.x + (2*cx)){\n                    relativeX = mouseX - (cx + rect.x);\n                    angle = Math.atan(relativeY/relativeX);\n\n                //quadrant II:\n                }else if(mouseX > rect.x && mouseX < (rect.x + cx)){\n                    relativeX = (cx + rect.x) - mouseX;\n                    angle = Math.PI - Math.atan(relativeY/relativeX);\n                }\n            //quadrant III & IV:\n            }else if (mouseY > cy + rect.y && mouseY < rect.y + (2*cy)){\n                relativeY = mouseY - (cy + rect.y);\n                //quadrant IV:\n                if(mouseX > (rect.x + cx) && mouseX < rect.x + (2*cx)){\n                    relativeX = mouseX - (cx + rect.x);\n                    angle = (2*Math.PI) - Math.atan(relativeY/relativeX);\n                //quadrant III:\n                }else if(mouseX > rect.x && mouseX < (rect.x + cx)){\n                    relativeX = (cx + rect.x) - mouseX;\n                    angle = Math.PI + Math.atan(relativeY/relativeX);\n                }\n            }\n\n            let distanceOk = false;\n        \n            let distance = Math.sqrt( (relativeX * relativeX ) +  ( relativeY * relativeY));\n            if(distance < this.state.radius){\n                distanceOk = true;\n            }\n            for(let i=0;i<this.state.slices.length;i++){\n                let s=this.state.slices[i];\n                //check if the mouse angle matches with this slice\n                if(s.startAngle < angle && angle < s.endAngle){\n                    \n                    if(distanceOk){\n                        this.drawAccentedSlice(s, 1);\n                        setTimeout(this.drawAccentedSlice, 500, s, 0);\n                        distanceOk = false;\n                    }\n                }else continue;\n            }\n        }); \n    }\n\n    componentDidUpdate(prevProps, prevState) {        \n        this.context = this.pieChartRef.current.getContext('2d');\n        let elem = document.getElementById('pieChartCanvas');\n        let rect = elem.getBoundingClientRect();\n        const context = this.context;\n\n        //clear canvas\n        context.clearRect(0, 0, rect.width, rect.height);\n        context.beginPath();\n\n        //clear slices\n        this.state.slices = [];\n        //redraw to reflect newly editted table\n        this.drawSlices();\n    }\n    \n    render() {\n        return (\n          <canvas id = \"pieChartCanvas\" ref={this.pieChartRef} width = {this.state.canvasWidth} height = {this.state.canvasHeight} />\n        )\n    }\n}\n\nexport default PieChart","/Users/emilyhuang/Documents/CSC309/team06/src/components/Investments/Calculator.js",["357","358","359","360","361","362","363","364","365"],"//Sources referenced:\n//https://www.thecalculatorsite.com/articles/finance/compound-interest-formula.php#:~:text=The%20formula%20for%20compound%20interest,the%20number%20of%20time%20periods.\n\nimport React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Typography from '@material-ui/core/Typography';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { deepPurple } from '@material-ui/core/colors';\nimport { withStyles } from '@material-ui/core'\n\n\nconst useStyles = () => ({\n    calculator: {\n        backgroundColor: deepPurple[100],\n    },\n});\n\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: deepPurple[800],\n        },\n        secondary: {\n            main: deepPurple[100],\n        }\n    },\n    typography: {\n        fontFamily: [\n            'Poppins',\n            'sans-serif',\n        ].join(','),\n    },\n  });\n\n\nclass Calculator extends React.Component{\n    state = {\n        menuPosition: null,\n        initialInvestment: 0,\n        interestRate: 0,\n        yrsToGrow: 1,\n        compound: 1,\n        amount: 0,\n        error: 0,\n        strToDisplay: \"\",\n        buttonText: \"Compound Rate\",\n    }\n\n    //To open and close the menu:\n\n    displayCompoundTypes(e) {\n        this.setState({ menuPosition: e.currentTarget })\n    }\n\n    hideCompoundTypes() {\n        this.setState({ menuPosition: null })\n    }\n    \n    //To handle the inputs(error checking will be done once the user clicks calculate):\n    handleInitInvestment(e){\n        this.setState({\n            initialInvestment: e.target.value\n        })\n    }\n\n    handleInterestRate(e){\n        this.setState({\n            interestRate: e.target.value\n        })\n    }\n    handleYrsToGrow(e){\n        this.setState({\n            yrsToGrow: e.target.value\n        })\n    }\n\n    //Menu options, make sure to update what's shown on the button\n    clickedMonthly(event){\n        this.setState({\n            compound: 12,\n            buttonText: \"Monthly\",\n        })\n        this.anchorEl = null;\n        this.state.menuPosition = null;\n    }\n\n    clickedAnnually(event){\n        this.setState({\n            compound: 1,\n            buttonText: \"Annually\",\n        })\n        this.anchorEl = null;\n        this.state.menuPosition = null;\n    }\n\n    clickedQuarterly(event){\n        this.setState({\n            compound: 4,\n            buttonText: \"Quarterly\",\n        })\n        this.anchorEl = null;\n        this.state.menuPosition = null;\n    }\n\n    clickedSemiAnnually(event){\n        this.setState({\n            compound: 2,\n            buttonText: \"Semi-annually\",\n        })\n        this.anchorEl = null;\n        this.state.menuPosition = null;\n    }\n\n    //Calculate the final amount and do error checking:\n    calculateAmount(){\n        let insideBrackets = ((this.state.interestRate/100)/(this.state.compound)) + 1;\n        let exponentVal = this.state.compound * this.state.yrsToGrow;\n        let appliedPower = Math.pow(insideBrackets,exponentVal);\n        let finalAmount = appliedPower* this.state.initialInvestment;\n        let compoundStr = \"\";\n        if(this.state.compound == 1){\n            compoundStr = \"annually\";\n        }else if (this.state.compound == 2){\n            compoundStr = \"semi-annually\";\n        }else if (this.state.compound == 4){\n            compoundStr = \"quarterly\";\n        }else if (this.state.compound ==12){\n            compoundStr = \"monthly\";\n        }\n        let finalStr =  \"Your initial investment of $\"+String(this.state.initialInvestment)+\" at interest rate of \" + String(this.state.interestRate)+ \"% will be worth $\" + String(finalAmount.toFixed(2))\n        + \" after \" + String(this.state.yrsToGrow)+ \" year(s) when compounded \" +compoundStr + \".\";\n       \n        if(isNaN(insideBrackets) || isNaN(exponentVal) || isNaN(appliedPower) || isNaN(finalAmount)\n        || insideBrackets<0 || exponentVal < 0 || appliedPower < 0 || finalAmount < 0){\n            this.setState({\n                error:1,\n                strToDisplay:\"Erroneous input. Please only enter in positive numbers.\",\n            })\n        }else{\n            this.setState({\n                amount: finalAmount.toFixed(2),\n                strToDisplay: finalStr,\n            })\n        }\n        \n        this.setState({\n            interestRate: 0,\n            yrsToGrow: 1,\n            compound: 0,\n            initialInvestment: 0,\n            buttonText: \"Compound Rate\",\n            error:0\n        })\n    }\n\n    render(){\n        const {compoundTypes, classes } = this.props\n        return(\n        <ThemeProvider theme={ theme }>\n        <Card className = {classes.calculator} variant=\"outlined\" color = \"secondary\"> \n            <CardContent>\n                <Typography variant=\"h3\" component=\"h2\">\n                    Investment Calculator\n                </Typography>\n                <br/>\n                <form noValidate autoComplete=\"off\">\n                    <TextField value = {this.state.initialInvestment} label = \"Intial investment($):\" placeholder=\"ie. 5000\" \n                     margin=\"normal\"  onChange = {(e) => this.handleInitInvestment(e)}/>\n                    <br/>\n                    <TextField value = {this.state.interestRate} label=\"Interest rate(%):\" placeholder=\"ie. 5\" \n                    margin=\"normal\" onChange = {(e) => this.handleInterestRate(e)}/>\n                    <br/>\n                    <TextField value = {this.state.yrsToGrow} label=\"Years to grow(yrs):\" placeholder=\"ie. 1\"\n                    margin=\"normal\" onChange = {(e) => this.handleYrsToGrow(e)}/>\n                    <br/>\n                    <br/>\n\n                    <div className = \"CalculatorButtons\">\n                        <Button variant=\"outlined\" aria-label=\"add\" color = \"primary\" onClick={(e) => this.displayCompoundTypes(e)}>\n                            {this.state.buttonText}\n                            <AddCircleIcon/>\n                        </Button>\n                            <Menu\n                                id=\"long-menu\"\n                                anchorEl={this.state.menuPosition}\n                                open={Boolean(this.state.menuPosition)}\n                                onClose={() => this.hideCompoundTypes()}\n                            >\n                                <MenuItem >\n                                    <MenuItem onClick={(e)=>this.clickedMonthly(e)}>Monthly</MenuItem>\n                                    <MenuItem onClick={(e)=>this.clickedQuarterly(e)}>Quarterly</MenuItem>\n                                    <MenuItem onClick={(e)=>this.clickedSemiAnnually(e)}>Semi-annually</MenuItem>\n                                    <MenuItem onClick={(e)=>this.clickedAnnually(e)}>Annually</MenuItem>\n                                </MenuItem>\n                            </Menu>\n                        <br/>\n                        <br/>\n                        <Button variant=\"outlined\" aria-label=\"add\" color = \"primary\" onClick={() => this.calculateAmount()}>\n                            Calculate\n                        </Button>\n                    </div>\n                    <br/>\n                    <TextField fullWidth = \"true\" InputProps={{readOnly: true,}} label = \"Results($)\"\n                        value={this.state.strToDisplay}\n                    />\n                </form>\n            </CardContent>\n        </Card>\n        </ThemeProvider>\n        )\n    }\n}\n\nexport default withStyles(useStyles)(Calculator);","/Users/emilyhuang/Documents/CSC309/team06/src/components/Investments/GeneralCard.js",["366"],"import Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { deepPurple } from '@material-ui/core/colors';\nimport { Link } from 'react-router-dom';\nimport InvestmentImage from './financialmanagement.png';\nimport { withStyles } from '@material-ui/core'\n\n//For the card's background colour\nconst useStyles = () => ({\n  generalCard: {\n    backgroundColor: deepPurple[100],\n  },\n  removeLine: {\n    textDecoration: 'none',\n    color: 'black'\n  }\n});\n\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: deepPurple[800],\n        },\n        secondary: {\n            main: deepPurple[100],\n        }\n    },\n    typography: {\n        fontFamily: [\n            'Poppins',\n            'sans-serif',\n        ].join(','),\n    },\n  });\n\n//Shows some general account information\nclass GeneralCard extends React.Component {\n  //the account name, accounr number, currency here are all hardcoded. This will need to be linked to \n  //some database in phase 2. \n  //the total amount invested is also based on hard coded entries(in index.js's state)\n    render(){\n        const {total,classes} = this.props;\n        return(\n            <ThemeProvider theme={ theme }>\n            <Card variant=\"outlined\" className = {classes.generalCard}>\n            <CardContent>\n              <Typography variant=\"h3\">\n                Account overview\n              </Typography>\n              <br/>\n              <Typography variant=\"h5\" display=\"block\"gutterBottom>\n                Account name: <br/>\n                <Typography variant=\"h5\" gutterBottom>\n                  RRSP\n                </Typography>\n              </Typography>\n              <Typography variant=\"h5\" display=\"block\" gutterBottom>\n                Account number: <br/>\n                <Typography variant=\"h5\" gutterBottom>\n                  12345A6\n                </Typography>\n              </Typography>\n              <Typography variant=\"h5\" display=\"block\" gutterBottom>\n                  Currency: <br/>\n                <Typography variant=\"h5\" gutterBottom>\n                  CAD$\n                </Typography>\n              </Typography>\n              <Typography variant=\"h5\" display=\"block\" gutterBottom>\n                Total amount invested: <br/>\n                <Typography variant=\"h5\" gutterBottom>\n                ${total}\n                </Typography>\n              </Typography>\n              <br/>\n              <br/>\n              <Typography variant=\"h6\" display=\"block\">\n                If you'd like to learn more about saving and investing, visit our community page\n                <Link to={'/community'} className = {classes.removeLine}>\n                  <Button color=\"primary\" >\n                    <Typography variant=\"h6\" >\n                      here.\n                    </Typography>\n                  </Button>\n                </Link>\n              </Typography>\n            </CardContent>\n            <img className = \"InvestmentImage\" src = {InvestmentImage}/> \n          </Card> \n          \n          </ThemeProvider>\n        )\n    }\n}\n\nexport default  withStyles(useStyles)(GeneralCard);","/Users/emilyhuang/Documents/CSC309/team06/src/components/Investments/SortButton.js",["367"],"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\n\n//For making a sort button for the stock entries table\nclass SortButton extends React.Component{\n   render(){\n       const {categoryName,callBackFunction, sortDes, sortBy} = this.props;\n       return(\n        <Grid item xs={4}>\n            <Paper>\n            <Button color=\"primary\" \n                className=\"InvestmentSortButton\"\n                variant={sortBy == categoryName ? \"contained\" : \"outlined\"}\n                onClick={() => callBackFunction(categoryName)}>\n                Sort By {categoryName}\n                {sortDes[categoryName] ? <ArrowDownwardIcon /> : <ArrowUpwardIcon />}\n            </Button>\n            </Paper>\n        </Grid>\n       )\n   }\n  \n}\n\nexport default SortButton;","/Users/emilyhuang/Documents/CSC309/team06/src/components/Spendings/data.js",[],"/Users/emilyhuang/Documents/CSC309/team06/src/components/Community/forumListItem.js",["368","369","370","371"],"import React from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport Chip from '@material-ui/core/Chip';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport IconButton from '@material-ui/core/IconButton';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Fab from '@material-ui/core/Fab';\n\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { deepPurple, green } from '@material-ui/core/colors';\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport ThumbUpAltIcon from '@material-ui/icons/ThumbUpAlt';\nimport ThumbDownAltIcon from '@material-ui/icons/ThumbDownAlt';\nimport CloseIcon from '@material-ui/icons/Close';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\nimport IndeterminateCheckBoxIcon from '@material-ui/icons/IndeterminateCheckBox';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\n\nimport Comment from \"./comment.js\"\n\n// define styles\nconst styles =  theme => ({\n  closePostButton: {\n    backgroundColor: deepPurple[500],\n  },\n  blackText: {\n    color: '#000000',\n  },\n  redText: {\n    color: '#dd0000',\n  },\n  purpleText: {\n    color: deepPurple[500],\n    fontSize: 30\n  },\n  upvoteText: {\n    color: '#aaaaaa',\n  },\n  checkCircle: {\n    color: green[500]\n  },\n  financialAdvisorTag: {\n    color: '#ffffff',\n    backgroundColor: green[500]\n  },\n  followButtonGrid: {\n    padding: 20,\n  },\n});\n\n// define theme\nconst theme = createMuiTheme({\n  palette: {\n      primary: {\n          main: deepPurple[800],\n      },\n      secondary: {\n          main: deepPurple[100],\n      }\n  },\n  typography: {\n      fontFamily: [\n          'Poppins',\n          'sans-serif',\n      ].join(','),\n  },\n});\n\n// class definition\nclass ForumListItem extends React.Component {\n\n  // ===state===\n  // postID: the post's postID\n  // openPost: determines if the open post dialog is open\n  // openFAInfo: determines if the FA info dialog is open\n  // comment: the content of the comment to be posted\n  // upvoted: whether the user has upvoted the post\n  // downvoted: whether the user has downvoted the post\n  // authorFAInfo: store the financial advisor info if the author of the post is a financial advisor\n  //    FAName: the name of the financial advisor\n  //    FAIntro: the introduction of the financial advisor\n  //    FAFields: the fields of expertise of the financial advisor\n  //    FAPoints: the financial advisor's community points\n  state = {\n    postID: null,\n    openPost: false,\n    openFAInfo: false,\n    comment: \"\",\n    upvoted: false,\n    downvoted: false,\n    authorFAInfo: {\n      FAName: \"\",\n      FAIntro: \"\",\n      FAFields: [],\n      FAPoints: 0,\n    }\n  }\n\n  // update the state when the component is mounted\n  componentDidMount() {\n\n    this.setState({ postID: this.props.postID }, () => this.prepareOpenPost(), () => this.forceUpdate())\n  }\n\n  // update some states when the component updates\n  componentDidUpdate() {\n\n    if (this.state.postID !== this.props.postID) this.setState({ postID: this.props.postID }, () => this.prepareOpenPost())      \n  }\n\n  // called when a post is clicked to be opened\n  openPost = () => {\n\n    this.setState({ openPost: true }, () => this.prepareOpenPost())\n  }\n\n  // set up important states so that the page renders correctly\n  prepareOpenPost = () => {\n\n    const userInfo = this.props.userInfo\n\n    userInfo.userUpvotedPosts.includes(this.state.postID) ? this.setState({ upvoted: true }) : this.setState({ upvoted: false })\n    userInfo.userDownvotedPosts.includes(this.state.postID) ? this.setState({ downvoted: true }) : this.setState({ downvoted: false })\n  }\n\n  // called when the post dialog is closed\n  closePost = () => {\n\n    this.setState({ openPost: false })\n  }\n\n  // handles some input changes (comment entries)\n  handleInputChange = (event) => {\n\n    const value = event.target.value\n    const name = event.target.name\n\n    this.setState({\n      [name]: value\n    })\n  }\n\n  // called when a comment is posted\n  handlePostComment = () => {\n\n    this.props.postComment(this.state)\n    this.setState({ comment: \"\" })\n  }\n\n  // called when a financial advisor's info dialog is opened\n  handleOpenFAInfo = () => {\n\n    const targetFAInfo = this.props.FAInfo.filter((I) => { return I.FAName === this.props.postAuthor})\n\n    this.setState({\n      authorFAInfo: targetFAInfo[0],\n      openFAInfo: true,\n    })\n  }\n\n  // called when a financial advisor's info dialog is closed\n  handleCloseFAInfo = () => {\n\n    this.setState({ openFAInfo: false })\n  }\n\n  // called when the user follows the post author (financial advisor)\n  handleUserFollowFA = () => {\n\n    let newUserInfo = this.props.userInfo\n    newUserInfo.userFollows.push(this.state.authorFAInfo)\n    this.props.userInfoUpdater(newUserInfo)\n  }\n\n  // called when the user unfollows the post author (financial advisor)\n  handleUserUnfollowFA = () => {\n\n    let newUserInfo = this.props.userInfo\n    const newUserFollows = newUserInfo.userFollows.filter((UF) => { return UF !== this.state.authorFAInfo })\n    newUserInfo.userFollows = newUserFollows\n    this.props.userInfoUpdater(newUserInfo)\n  }\n\n  // called when user saves the post\n  handleSavePost = () => {\n\n    let newUserInfo = this.props.userInfo\n    newUserInfo.userSavedPosts.push(this.state.postID)\n    this.props.userInfoUpdater(newUserInfo)\n  }\n\n  // called when user unsaves the post\n  handleUnsavePost = () => {\n\n    let newUserInfo = this.props.userInfo\n    const newUserSavedPosts = newUserInfo.userSavedPosts.filter((US) => { return US !== this.state.postID })\n    newUserInfo.userSavedPosts = newUserSavedPosts\n    this.props.userInfoUpdater(newUserInfo)\n  }\n\n  // called when user upvotes the post\n  toggleUpvote = () => {\n\n    // clean up downvote\n    if (this.state.downvoted === true) {\n      this.setState({ downvoted: false })\n      this.props.minusDownvote(this.state)\n    }\n\n    if (this.state.upvoted === false) {\n      this.setState({ upvoted: true })\n      this.props.addUpvote(this.state)\n    }\n    else {\n      this.setState({ upvoted: false })\n      this.props.minusUpvote(this.state)\n    }\n  }\n\n  // called when user downvotes the post\n  toggleDownvote = () => {\n\n    // clean up upvote\n    if (this.state.upvoted === true) {\n      this.setState({ upvoted: false })\n      this.props.minusUpvote(this.state)\n    }\n\n    if (this.state.downvoted === false) {\n      this.setState({ downvoted: true })\n      this.props.addDownvote(this.state)\n    }\n    else {\n      this.setState({ downvoted: false })\n      this.props.minusDownvote(this.state)\n    }\n    \n  }\n\n  // main render function\n  render() {\n\n    // save props\n    const { classes, avatar, postTitle, postAuthor, postTextContent, category, comments, postComment, \n            deletePosts, openManagePost, numUpvotes, numDownvotes, postAuthorUsertype, userInfo, FAInfo, userInfoUpdater } = this.props\n\n    return (\n      <div>\n\n        {/* {post list item (not opened)} */}\n        <ListItem alignItems=\"flex-start\" button=\"true\" onClick={ openManagePost ? null : this.openPost }>\n\n          {/* {the avatar of the post author (currently null)} */}\n          <ListItemAvatar>\n            <Avatar>{ avatar }</Avatar>\n          </ListItemAvatar>\n\n          <ListItemText\n            primary={\n              <React.Fragment>\n\n                {/* {post title and the author's username} */}\n                <span>{ postTitle } :: </span>\n                <span> { postAuthor } </span>\n\n                {/* {draw the green check mark if the author is a financial advisor} */}\n                { postAuthorUsertype === \"FA\" ? \n                  <IconButton size=\"small\" component=\"span\" disabled>\n                    <CheckCircleIcon className={ classes.checkCircle } fontSize=\"small\" />\n                  </IconButton>\n                : null }\n\n                {/* {shows the number of upvotes and downvotes} */}\n                <IconButton size=\"small\" component=\"span\" disabled>\n                  <ThumbUpAltIcon color={ this.state.upvoted ? \"primary\" : '#dddddd'} fontSize=\"small\" />\n                </IconButton>\n                <span className={ classes.upvoteText }>{ numUpvotes } : { numDownvotes }</span>\n                <IconButton size=\"small\" component=\"span\" disabled>\n                  <ThumbDownAltIcon color={ this.state.downvoted ? \"primary\" : '#dddddd'} fontSize=\"small\" />\n                </IconButton>\n\n              </React.Fragment>\n            }            \n            secondary={\n              <React.Fragment>\n\n                {/* {post's contents} */}\n                { postTextContent }\n              </React.Fragment>\n            }\n          />\n\n          {/* {the category chip of the post} */}\n          <Chip label={ category }/>\n\n          {/* {display the view button if in manage post mode} */}\n          { openManagePost ? \n            <Tooltip title=\"View\">\n              <IconButton color=\"primary\" size=\"medium\" onClick={ this.openPost }>\n                <VisibilityIcon fontSize=\"default\" />\n              </IconButton>\n            </Tooltip> \n            : \n            null\n          }\n\n          {/* {display the delete button if in manage post mode} */}\n          { openManagePost ? \n            <Tooltip title=\"Delete\">\n              <IconButton color=\"primary\" size=\"medium\" onClick={ () => deletePosts(this.state) }>\n                <DeleteIcon fontSize=\"default\" />\n              </IconButton>\n            </Tooltip> \n            : \n            null\n          }\n\n        </ListItem>\n\n        {/* {the open post dialog} */}\n        <Dialog open={ this.state.openPost } onClose={ this.closePost } aria-labelledby=\"form-dialog-title\" fullScreen>\n\n          <DialogActions className={ classes.closePostButton }>\n\n            {/* {display view financial advisor info button if post author is a financial advisor} */}\n            { postAuthorUsertype === \"FA\" ? \n              <Button variant=\"contained\" color=\"secondary\" onClick={ this.handleOpenFAInfo }>\n                View Financial Advisor Info\n              </Button>\n            : null }\n\n            {/* {display the save post or unsave post button} */}\n            { userInfo.userSavedPosts.includes(this.props.postID) ? \n            <Tooltip title=\"Unsave Post\">\n              <Fab color=\"secondary\" size=\"small\" onClick={ this.handleUnsavePost }>\n                <IndeterminateCheckBoxIcon fontSize=\"default\" />\n              </Fab>\n            </Tooltip>\n              : \n            <Tooltip title=\"Save Post\">\n              <Fab color=\"secondary\" size=\"small\" onClick={ this.handleSavePost }>\n                <SaveAltIcon fontSize=\"default\" />\n              </Fab>\n            </Tooltip> }\n\n            {/* {display the close dialog button} */}\n            <Tooltip title=\"Close\">\n              <Fab color=\"secondary\" size=\"small\" onClick={ this.closePost }>\n                <CloseIcon fontSize=\"default\" />\n              </Fab>\n            </Tooltip>\n\n          </DialogActions>\n          \n          <DialogTitle id=\"form-dialog-title\">\n\n            {/* {display category, post title and author} */}\n            <Chip label={ category } size=\"small\"/>\n             :: { postTitle } :: \n            <span> { postAuthor } </span>\n\n            {/* {display green chip if author is financial advisor} */}\n            { postAuthorUsertype === \"FA\" ? \n              <Chip className={ classes.financialAdvisorTag } label={ \"Financial Advisor\" } size=\"small\"/>\n            : null }\n\n            {/* {display upvote and downvote buttons} */}\n            <IconButton color={ this.state.upvoted ? \"primary\" : \"secondary\" } component=\"span\" onClick={ this.toggleUpvote }>\n              <ThumbUpAltIcon />\n            </IconButton>\n            <span>{ numUpvotes }</span>\n            <IconButton color={ this.state.downvoted ? \"primary\" : \"secondary\" } component=\"span\" onClick={ this.toggleDownvote }>\n              <ThumbDownAltIcon />\n            </IconButton>\n            <span>{ numDownvotes }</span>\n\n          </DialogTitle>\n\n          <DialogContent>\n\n            {/* {display contents of the post} */}\n            <DialogContentText className={ classes.blackText }>\n              { postTextContent }\n            </DialogContentText>\n\n            <Divider variant=\"fullWidth\" />\n\n            <br></br>\n            <DialogContentText className={ classes.blackText }>Post a Comment:</DialogContentText>\n            \n            {/* {comment text box} */}\n            <TextField\n              value={ this.state.comment }\n              onChange={ this.handleInputChange }\n              multiline\n              rows=\"3\"\n              variant=\"outlined\"\n              margin=\"dense\"\n              name=\"comment\"\n              label=\"Say something...\"\n              fullWidth\n            />\n            <br></br>\n\n            {/* {post comment button} */}\n            <Button variant=\"outlined\" color=\"primary\" onClick={ this.handlePostComment }>\n              Post\n            </Button>\n            <br></br>\n            <br></br>\n\n            <Divider variant=\"fullWidth\" />\n\n            {/* {display list of comments} */}\n            <List>\n              {comments.map((comment) => {\n                  return (\n                    <div>\n                      <Comment commenter={ comment.commenter }\n                                commentContent={ comment.commentContent }/>\n                      <Divider variant=\"inset\" component=\"li\" />\n                    </div>\n                  )\n                }\n              )}\n            </List>\n            \n          </DialogContent>\n\n        </Dialog>\n\n        {/* {displays the financial advisor info if the author is a financial advisor} */}\n        <Dialog open={ this.state.openFAInfo } onClose={ this.handleCloseFAInfo }>\n          \n          {/* {display avatar and name} */}\n          <DialogTitle>\n            <Grid container justify=\"center\">\n              <Avatar></Avatar>\n            </Grid>\n            <Grid container justify=\"center\">\n              { this.state.authorFAInfo.FAName }\n            </Grid>\n          </DialogTitle>\n\n          <Divider variant=\"middle\" />\n\n          <DialogContent>\n\n            {/* {display financial advisor intro} */}\n            <DialogContentText align=\"center\">\n              { this.state.authorFAInfo.FAIntro }\n            </DialogContentText>\n\n            {/* {display financial advisor's fields of expertise} */}\n            <DialogContentText align=\"center\">\n              { this.state.authorFAInfo.FAFields.map((field) => {\n                return (\n                  <span>\n                    <Chip label={ field } size=\"small\" color=\"secondary\" />\n                    { this.state.authorFAInfo.FAFields[this.state.authorFAInfo.FAFields.length - 1] === field ? null : <span> : </span> }\n                  </span>\n                )\n              }) }\n            </DialogContentText>\n\n            {/* {display community points} */}\n            <DialogContentText align=\"center\">\n              <span className={ classes.blackText }>Community Points: </span>\n              <span className={ classes.purpleText }>{ this.state.authorFAInfo.FAPoints }</span>\n            </DialogContentText>\n            \n          </DialogContent>\n\n          {/* {display follow/unfollow button} */}\n          <Grid container justify=\"space-evenly\" className={ classes.followButtonGrid }>\n\n            { userInfo.userFollows.includes(this.state.authorFAInfo) ? \n            <Button color=\"primary\" variant=\"contained\" onClick={ this.handleUserUnfollowFA }>\n              Unfollow\n            </Button> : \n            <Button color=\"primary\" variant=\"contained\" onClick={ this.handleUserFollowFA }>\n              Follow\n            </Button> }\n\n          </Grid>\n\n        </Dialog>\n\n      </div>\n    )\n  }\n}\n\n  export default withStyles(styles)(ForumListItem);","/Users/emilyhuang/Documents/CSC309/team06/src/components/Table/index.js",["372","373","374","375","376"],"import React from 'react';\nimport TableRowComp from '../TableRow'\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core'\n\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport AddIcon from '@material-ui/icons/Add';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\n\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { Alert } from '@material-ui/lab';\n\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport TextField from '@material-ui/core/TextField';\n\nimport \"./table.css\"\n\nconst useStyles = () => ({\n  emptyMessage: {\n    textAlign: \"center\"\n  }\n})\n\nclass TableComp extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // true -> displays the new row to be added to table, false -> hides the new row to be added to table \n      add: false,\n      // the default values for the new row to be added to table \n      newRow: [],\n      // array that holds all the snacks (notifications) that remains to be shown \n      snacks: [],\n      // the message that the snack should currently display\n      currentSnackMsg: undefined,\n      // true -> displays the snack, false -> hides the snack\n      displaySnack: false,\n      // the categories menu position on the screen\n      menuPosition: null,\n      // the category name that the user can input to add customized category\n      newCategory: \"\"\n    }\n\n  }\n\n  // this function is called whenever there's a change in the DOM \n  componentDidUpdate() {\n\n    // if there is a snack message to be shown but we currently don't have the snack opened \n    if (this.state.snacks.length && !this.state.currentSnackMsg) {\n      this.setState({ currentSnackMsg: this.state.snacks[0] })\n      this.setState({ snacks: this.state.snacks.slice(1) })\n      this.setState({ displaySnack: true })\n    }\n\n    // if there is a snack message to be shown and we are already displaying a snack, close the active one \n    else if (this.state.snacks.length && this.state.currentSnackMsg && this.state.displaySnack) {\n      this.setState({ displaySnack: false })\n    }\n\n  }\n\n  // handles action for the 'plus' button to add a new row to table \n  addRowHandler() {\n\n    // the new rows will contain the headings for the table (can be changed if needed)\n    const newData = {}\n    this.props.headings.map((value, index) => {\n      newData[value] = null\n      // if (this.props.options[index] == \"Date\") newData[value] = null\n      // else newData[value] = value\n    })\n\n    this.setState({ newRow: newData })\n    this.toggleAdd()\n\n  }\n\n  toggleAdd() {\n    this.setState({ add: !this.state.add })\n  }\n\n  // displays categories menu\n  displayCategories(e) {\n    this.setState({ menuPosition: e.currentTarget })\n  }\n\n  hideCategories() {\n    this.setState({ menuPosition: null })\n  }\n\n  // updates the category string as user is inputting \n  updateCategory(e) {\n    this.state.newCategory = e.target.value\n    this.setState({ newCategory: this.state.newCategory })\n  }\n\n  // adds a message to the snack array \n  addSnack(message) {\n    this.state.snacks.push(message)\n    this.setState({ snacks: this.state.snacks })\n  }\n\n  snackBarOnClose() {\n    this.setState({ displaySnack: false })\n  }\n\n  snackBarOnExited() {\n    this.setState({ currentSnackMsg: undefined })\n  }\n\n  // renders different helper messages depending on the error or success \n  renderHelperMsg() {\n    switch (this.state.currentSnackMsg) {\n      case \"addError\":\n        return \"Could not add, please check the fields.\"\n      case \"editError\":\n        return \"Could not edit, please check the fields.\"\n      case \"addSuccess\":\n        return \"Added successfully!\"\n      case \"editSuccess\":\n        return \"Edited successfully!\"\n      case \"deleteSuccess\":\n        return \"Deleted successfully!\"\n      default:\n        return \"\"\n    }\n  }\n\n  render() {\n\n    const { headings, data, options, categories, addRow, editRow, removeRow, addCategory, removeCategory } = this.props;\n\n    return (\n\n      <div>\n\n        <Paper>\n\n          <TableContainer className=\"TableContainer\">\n\n            <Table stickyHeader aria-label=\"sticky table\">\n\n              <TableHead>\n\n                <TableRow>\n\n                  {/* displays the headings for each column */}\n                  {headings.map((heading, index) =>\n                    <TableCell>\n\n                      {heading}\n\n                      {/* used for the vertical three dots icon, only display for \"select\" options */}\n                      {options[index] == \"Select\" ?\n                        <IconButton aria-label=\"add\" onClick={(e) => this.displayCategories(e)}>\n                          <MoreVertIcon />\n                        </IconButton>\n                        : null\n                      }\n\n                      <Menu\n                        id=\"long-menu\"\n                        anchorEl={this.state.menuPosition}\n                        open={Boolean(this.state.menuPosition)}\n                        onClose={() => this.hideCategories()}\n                      >\n\n                        {/* user can't delete predetermined categories */}\n                        {categories.map((category, index) => (\n                          <MenuItem\n                            key={category}\n                            onClick={() => {\n                              if (index > 3) removeCategory(category)\n                            }}\n                          >\n                            {category}\n                            {index > 3 ? <RemoveIcon /> : null}\n\n                          </MenuItem>\n                        ))}\n\n                        <MenuItem onKeyDown={e => e.stopPropagation()}>\n\n                          <TextField\n                            id=\"standard-basic\"\n                            label=\"New Category\"\n                            onChange={(e) => this.updateCategory(e)}\n                            value={this.state.newCategory}\n                          />\n\n                          <AddIcon\n                            onClick={() => {\n                              addCategory(this.state.newCategory)\n                              this.state.newCategory = \"\"\n                              this.setState({ newCategory: this.state.newCategory })\n                            }} />\n\n                        </MenuItem>\n\n                      </Menu>\n\n                    </TableCell>\n                  )}\n\n                  <TableCell width=\"100vw\" align=\"right\">\n\n                    <IconButton\n                      aria-label=\"add\"\n                      onClick={() => this.addRowHandler()}>\n                      <AddIcon />\n                    </IconButton>\n\n                  </TableCell>\n\n                </TableRow>\n\n              </TableHead>\n\n              <TableBody>\n\n                {this.state.add ?\n\n                  <TableRowComp\n                    headings={headings}\n                    row={this.state.newRow}\n                    options={options}\n                    categories={categories}\n                    addRow={addRow}\n                    editRow={editRow}\n                    removeRow={removeRow}\n                    rowForAdd={true}\n                    addSnacks={this.addSnack.bind(this)}\n                    toggleAdd={this.toggleAdd.bind(this)}\n                  />\n\n                  : null\n                }\n\n                {data.map(row =>\n                  <TableRowComp\n                    headings={headings}\n                    row={row}\n                    options={options}\n                    categories={categories}\n                    addRow={addRow}\n                    editRow={editRow}\n                    removeRow={removeRow}\n                    rowForAdd={false}\n                    addSnacks={this.addSnack.bind(this)}\n                    toggleAdd={this.toggleAdd.bind(this)}\n                  />\n                )}\n\n                {/* if there are currently no entries in table right now, display message */}\n                {data.length == 0 ?\n                  <TableRow>\n                    <TableCell\n                      className={this.props.classes.emptyMessage}\n                      colspan={headings.length + 1}>\n                      <Typography variant=\"h5\" >\n                        You have no entry so far! <br></br>Add an entry by clicking on the add icon above!\n                      </Typography>\n                    </TableCell>\n                  </TableRow>\n                  : null\n                }\n\n                <Snackbar\n                  open={this.state.displaySnack}\n                  autoHideDuration={2000}\n                  onClose={() => this.snackBarOnClose()}\n                  onExited={() => this.snackBarOnExited()}\n                >\n\n                  <Alert\n                    severity={this.state.currentSnackMsg ? (this.state.currentSnackMsg.includes(\"Success\") ? \"success\" : \"error\") : undefined}\n                    variant=\"filled\">\n                    {this.renderHelperMsg()}\n                  </Alert>\n\n                </Snackbar>\n\n              </TableBody>\n\n            </Table>\n\n          </TableContainer>\n\n        </Paper >\n\n      </div >\n\n    )\n\n  }\n\n}\n\nexport default withStyles(useStyles)(TableComp);","/Users/emilyhuang/Documents/CSC309/team06/src/components/TableRow/index.js",["377","378","379","380","381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399","400"],"import React from 'react';\nimport { withStyles } from '@material-ui/core'\n\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport TextField from '@material-ui/core/TextField';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport DoneIcon from '@material-ui/icons/Done';\n\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputAdornment from '@material-ui/core/InputAdornment';\n\nconst useStyles = () => ({\n    formControl_root: {\n        minWidth: \"10vw\",\n    }\n})\n\nclass TableRowComp extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            // true -> displays the edit and delete buttons, false -> hides the edit and delete buttons\n            hover: false,\n            // true -> displays done button, false -> displays edit button \n            edit: this.props.rowForAdd,\n            // holds the input values when the row is being edited, key = heading, value = data \n            update: {},\n            // holds the data value that will be updated when dates are selected on the calendar\n            date: \"\",\n            // holds an array (same length as headings) that will show if there is an error or not \n            // if cell is empty (for adding) => null, if error => true, if no error => false \n            error: this.props.rowForAdd ? Array.from({ length: this.props.headings.length }, () => null) :\n                Array.from({ length: this.props.headings.length }, () => false)\n        }\n\n    }\n\n    clearState() {\n        this.setState({ update: {} })\n        this.setState({ date: \"\" })\n        this.setState({\n            error: this.props.rowForAdd ? Array.from({ length: this.props.headings.length }, () => null) :\n                Array.from({ length: this.props.headings.length }, () => false)\n        })\n    }\n\n    displayIcons() {\n        this.setState({ hover: true })\n    }\n\n    hideIcons() {\n        this.setState({ hover: false })\n    }\n\n    toggleEdit() {\n        this.setState({ edit: !this.state.edit })\n    }\n\n    // updates the state as the value in the inputs are being changed \n    textFieldOnChangeHandler(e, headings, index) {\n\n        this.state.update[headings[index]] = e.target.value\n        this.setState({ update: this.state.update })\n\n        // if nothing is in the cell, put null error \n        if (e.target.value == \"\" || e.target.value === null) this.state.error[index] = null\n\n        else {\n            switch (this.props.options[index]) {\n\n                case \"Number\":\n                case \"Percentage\":\n                    // error if input not a number, or less than 0 \n                    if (!isNaN(e.target.value) && parseFloat(e.target.value) >= 0) this.state.error[index] = false\n                    else this.state.error[index] = true\n                    break\n                case \"Dollar\":\n                    if (!isNaN(e.target.value)) this.state.error[index] = false\n                    else this.state.error[index] = true\n                    break\n                case \"Any\":\n                    // I think description can be anything? \n                    this.state.error[index] = false\n                    break\n                case \"Select\":\n                    this.state.error[index] = false\n                    break\n                default:\n                    throw (\"Please specify a valid option.\")\n\n            }\n        }\n\n        this.setState({ error: this.state.error })\n\n    }\n\n    // updates the state for the date as the inputs are being changed \n    dateFieldOnChangeHandler(e, heading, index) {\n\n        // if it's an invalid date, set it to the invalid data so Material UI knows to display \"incorrect date format\"\n        if (e == \"Invalid Date\") {\n            this.setState({ date: e })\n            this.state.error[index] = true\n            this.setState({ error: this.state.error })\n            return\n        }\n\n        // if no dates have been inputted, set error state to null\n        else if (e == null) {\n            this.setState({ date: null })\n            this.state.error[index] = null\n            this.setState({ error: this.state.error })\n            return\n        }\n\n        // converting the string to the appropriate format (MM/dd/yyyy)\n        const isoString = e.toISOString()\n        const year = isoString.substring(0, 4)\n        const month = isoString.substring(5, 7)\n        const day = isoString.substring(8, 10)\n        const newDate = month + '/' + day + '/' + year\n\n        this.state.update[heading] = newDate\n        this.setState({ date: newDate, update: this.state.update })\n\n        this.state.error[index] = false\n        this.setState({ error: this.state.error })\n\n    }\n\n    // put the edited data into newRow \n    getUpdatedRow(headings, row) {\n\n        // if there has been an error in any cell\n        if (this.state.error.includes(null) || this.state.error.includes(true)) return null\n\n        const newRow = {}\n\n        // use the new values if user edited the input, otherwise use previous values\n        headings.map((heading, index) => {\n            if (heading in this.state.update) {\n                if (this.props.options[index] == \"Date\") newRow[heading] = this.state.date\n                else newRow[heading] = this.state.update[heading]\n            }\n            else newRow[heading] = row[heading]\n        })\n\n        return newRow\n\n    }\n\n    // a switch function that displays different kind of cells when editing depending on the options \n    renderEditCell(option, heading, index) {\n\n        switch (option) {\n            case \"Date\":\n                return <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                    <KeyboardDatePicker\n                        // disableToolbar\n                        id=\"date-picker-inline\"\n                        label={heading}\n                        variant=\"inline\"\n                        format=\"MM/dd/yyyy\"\n                        value={this.state.date == \"\" ? this.props.row[heading] : this.state.date}\n                        onChange={(e) => this.dateFieldOnChangeHandler(e, heading, index)}\n                    />\n                </MuiPickersUtilsProvider>\n\n            case \"Select\":\n                return <FormControl classes={{ root: this.props.classes.formControl_root }}>\n                    <InputLabel id=\"simple-select-label\">Category</InputLabel>\n                    <Select\n                        error={this.state.error[index]}\n                        id=\"simple-select\"\n                        defaultValue={this.props.rowForAdd ? \"\" : this.props.row[heading]}\n                        onChange={(e) => this.textFieldOnChangeHandler(e, this.props.headings, index)}\n                    >\n                        {this.props.categories.map(category =>\n                            <MenuItem\n                                value={category}>\n                                {category}\n                            </MenuItem>\n                        )}\n\n                    </Select>\n                </FormControl>\n\n            case \"Number\":\n                return <TextField\n                    error={this.state.error[index]}\n                    helperText={this.state.error[index] ? `Please enter: ${option}` : \"\"}\n                    id=\"standard-basic\"\n                    label={this.props.headings[index]}\n                    defaultValue={this.props.rowForAdd ? \"\" : this.props.row[heading]}\n                    onChange={(e) => this.textFieldOnChangeHandler(e, this.props.headings, index)}\n                // InputProps={{ startAdornment: <InputAdornment position=\"start\">$</InputAdornment> }}\n                > </TextField>\n\n            default:\n                return <TextField\n                    error={this.state.error[index]}\n                    helperText={this.state.error[index] ? `Please enter: ${option}` : \"\"}\n                    id=\"standard-basic\"\n                    label={this.props.headings[index]}\n                    defaultValue={this.props.rowForAdd ? \"\" : this.props.row[heading]}\n                    onChange={(e) => this.textFieldOnChangeHandler(e, this.props.headings, index)}\n                > </TextField>\n\n        }\n\n    }\n\n    renderCellValue(option, value) {\n        switch (option) {\n            case \"Percentage\":\n                return value + '%'\n            case \"Dollar\":\n                if (value > 0) return '$' + value\n                else {\n                    // if value is a string (used by spendings)\n                    if (typeof value === \"string\") return '-' + '$' + value.slice(1)\n                    // if value is a float (used by investments)\n                    else return '-' + '$' + Math.abs(value)\n                }\n            default:\n                return value\n        }\n    }\n\n    doneIconOnClick() {\n\n        if (this.props.rowForAdd) {\n            const newRow = this.getUpdatedRow(this.props.headings, this.props.row)\n            if (newRow === null) {\n                this.props.addSnacks(\"addError\")\n                return\n            }\n            this.props.addRow(newRow)\n            this.props.addSnacks(\"addSuccess\")\n            this.toggleEdit()\n            this.props.toggleAdd()\n        }\n\n        else {\n            const newRow = this.getUpdatedRow(this.props.headings, this.props.row)\n            if (newRow === null) {\n                this.props.addSnacks(\"editError\")\n                return\n            }\n            this.props.editRow(this.props.row, newRow)\n            this.props.addSnacks(\"editSuccess\")\n            this.toggleEdit()\n        }\n\n    }\n\n    render() {\n\n        const { headings, row, options, categories, addRow, editRow, removeRow, rowForAdd, addSnacks, toggleAdd } = this.props;\n\n        return (\n            <TableRow hover\n                onMouseEnter={() => this.displayIcons()}\n                onMouseLeave={() => this.hideIcons()}\n            >\n\n                {headings.map((heading, index) =>\n\n                    <TableCell>\n\n                        {this.state.edit ?\n\n                            <div>\n                                {this.renderEditCell(options[index], heading, index)}\n                            </div>\n                            :\n                            <div>\n                                {this.renderCellValue(options[index], row[heading])}\n                            </div>\n\n                        }\n\n                    </TableCell>\n\n                )}\n\n                <TableCell>\n\n                    {this.state.hover ?\n\n                        <div className=\"icons\">\n\n                            {this.state.edit ?\n\n                                <IconButton\n                                    aria-label=\"done\"\n                                    onClick={() => this.doneIconOnClick()}\n                                >\n                                    <DoneIcon />\n                                </IconButton>\n                                :\n                                <IconButton\n                                    aria-label=\"edit\"\n                                    onClick={() => this.toggleEdit()}\n                                >\n                                    <EditIcon />\n                                </IconButton>\n\n                            }\n\n                            <IconButton\n                                aria-label=\"delete\"\n                                onClick={() => {\n                                    if (rowForAdd) toggleAdd()\n                                    else {\n                                        removeRow(row)\n                                        addSnacks(\"deleteSuccess\")\n                                        this.clearState()\n                                    }\n                                    if (this.state.edit) this.toggleEdit()\n                                }} >\n                                <DeleteIcon />\n                            </IconButton>\n\n                        </div>\n\n                        : null\n                    }\n\n                </TableCell>\n\n            </TableRow >\n\n        )\n\n    }\n\n}\n\nexport default withStyles(useStyles)(TableRowComp);",{"ruleId":"401","severity":1,"message":"402","line":30,"column":18,"nodeType":"403","messageId":"404","endLine":30,"endColumn":20},{"ruleId":"401","severity":1,"message":"402","line":30,"column":40,"nodeType":"403","messageId":"404","endLine":30,"endColumn":42},{"ruleId":"405","severity":1,"message":"406","line":31,"column":7,"nodeType":"407","endLine":31,"endColumn":17},{"ruleId":"405","severity":1,"message":"406","line":32,"column":7,"nodeType":"407","endLine":32,"endColumn":17},{"ruleId":"405","severity":1,"message":"406","line":33,"column":7,"nodeType":"407","endLine":33,"endColumn":17},{"ruleId":"405","severity":1,"message":"406","line":34,"column":7,"nodeType":"407","endLine":34,"endColumn":17},{"ruleId":"401","severity":1,"message":"402","line":36,"column":23,"nodeType":"403","messageId":"404","endLine":36,"endColumn":25},{"ruleId":"401","severity":1,"message":"402","line":36,"column":46,"nodeType":"403","messageId":"404","endLine":36,"endColumn":48},{"ruleId":"405","severity":1,"message":"406","line":37,"column":7,"nodeType":"407","endLine":37,"endColumn":17},{"ruleId":"405","severity":1,"message":"406","line":38,"column":7,"nodeType":"407","endLine":38,"endColumn":17},{"ruleId":"405","severity":1,"message":"406","line":39,"column":7,"nodeType":"407","endLine":39,"endColumn":17},{"ruleId":"405","severity":1,"message":"406","line":40,"column":7,"nodeType":"407","endLine":40,"endColumn":17},{"ruleId":"405","severity":1,"message":"406","line":42,"column":10,"nodeType":"407","endLine":42,"endColumn":20},{"ruleId":"405","severity":1,"message":"406","line":53,"column":5,"nodeType":"407","endLine":53,"endColumn":15},{"ruleId":"405","severity":1,"message":"406","line":54,"column":5,"nodeType":"407","endLine":54,"endColumn":15},{"ruleId":"408","severity":1,"message":"409","line":69,"column":32,"nodeType":"410","messageId":"411","endLine":69,"endColumn":40},{"ruleId":"412","severity":1,"message":"413","line":85,"column":64,"nodeType":"414","messageId":"415","endLine":85,"endColumn":65},{"ruleId":"405","severity":1,"message":"406","line":121,"column":7,"nodeType":"407","endLine":121,"endColumn":17},{"ruleId":"405","severity":1,"message":"406","line":124,"column":7,"nodeType":"407","endLine":124,"endColumn":17},{"ruleId":"405","severity":1,"message":"406","line":141,"column":7,"nodeType":"407","endLine":141,"endColumn":17},{"ruleId":"405","severity":1,"message":"406","line":144,"column":7,"nodeType":"407","endLine":144,"endColumn":17},{"ruleId":"405","severity":1,"message":"406","line":155,"column":5,"nodeType":"407","endLine":155,"endColumn":15},{"ruleId":"408","severity":1,"message":"416","line":2,"column":22,"nodeType":"410","messageId":"411","endLine":2,"endColumn":28},{"ruleId":"408","severity":1,"message":"417","line":2,"column":58,"nodeType":"410","messageId":"411","endLine":2,"endColumn":62},{"ruleId":"408","severity":1,"message":"418","line":2,"column":64,"nodeType":"410","messageId":"411","endLine":2,"endColumn":69},{"ruleId":"408","severity":1,"message":"419","line":2,"column":71,"nodeType":"410","messageId":"411","endLine":2,"endColumn":82},{"ruleId":"408","severity":1,"message":"420","line":2,"column":84,"nodeType":"410","messageId":"411","endLine":2,"endColumn":94},{"ruleId":"408","severity":1,"message":"421","line":2,"column":96,"nodeType":"410","messageId":"411","endLine":2,"endColumn":102},{"ruleId":"408","severity":1,"message":"422","line":2,"column":104,"nodeType":"410","messageId":"411","endLine":2,"endColumn":112},{"ruleId":"408","severity":1,"message":"423","line":2,"column":129,"nodeType":"410","messageId":"411","endLine":2,"endColumn":138},{"ruleId":"408","severity":1,"message":"424","line":5,"column":22,"nodeType":"410","messageId":"411","endLine":5,"endColumn":26},{"ruleId":"405","severity":1,"message":"406","line":245,"column":9,"nodeType":"407","endLine":245,"endColumn":19},{"ruleId":"405","severity":1,"message":"406","line":254,"column":9,"nodeType":"407","endLine":254,"endColumn":19},{"ruleId":"405","severity":1,"message":"406","line":264,"column":9,"nodeType":"407","endLine":264,"endColumn":19},{"ruleId":"405","severity":1,"message":"406","line":273,"column":9,"nodeType":"407","endLine":273,"endColumn":19},{"ruleId":"405","severity":1,"message":"406","line":286,"column":9,"nodeType":"407","endLine":286,"endColumn":39},{"ruleId":"401","severity":1,"message":"425","line":299,"column":67,"nodeType":"403","messageId":"404","endLine":299,"endColumn":69},{"ruleId":"405","severity":1,"message":"406","line":300,"column":9,"nodeType":"407","endLine":300,"endColumn":19},{"ruleId":"405","severity":1,"message":"406","line":301,"column":9,"nodeType":"407","endLine":301,"endColumn":39},{"ruleId":"405","severity":1,"message":"406","line":314,"column":9,"nodeType":"407","endLine":314,"endColumn":40},{"ruleId":"408","severity":1,"message":"426","line":325,"column":15,"nodeType":"410","messageId":"411","endLine":325,"endColumn":20},{"ruleId":"401","severity":1,"message":"425","line":326,"column":61,"nodeType":"403","messageId":"404","endLine":326,"endColumn":63},{"ruleId":"405","severity":1,"message":"406","line":327,"column":9,"nodeType":"407","endLine":327,"endColumn":19},{"ruleId":"401","severity":1,"message":"402","line":328,"column":83,"nodeType":"403","messageId":"404","endLine":328,"endColumn":85},{"ruleId":"401","severity":1,"message":"425","line":330,"column":45,"nodeType":"403","messageId":"404","endLine":330,"endColumn":47},{"ruleId":"405","severity":1,"message":"406","line":330,"column":52,"nodeType":"407","endLine":330,"endColumn":108},{"ruleId":"401","severity":1,"message":"402","line":349,"column":17,"nodeType":"403","messageId":"404","endLine":349,"endColumn":19},{"ruleId":"405","severity":1,"message":"406","line":351,"column":17,"nodeType":"407","endLine":351,"endColumn":36},{"ruleId":"405","severity":1,"message":"406","line":352,"column":17,"nodeType":"407","endLine":352,"endColumn":36},{"ruleId":"405","severity":1,"message":"406","line":354,"column":13,"nodeType":"407","endLine":354,"endColumn":23},{"ruleId":"405","severity":1,"message":"406","line":355,"column":13,"nodeType":"407","endLine":355,"endColumn":23},{"ruleId":"405","severity":1,"message":"406","line":356,"column":13,"nodeType":"407","endLine":356,"endColumn":23},{"ruleId":"405","severity":1,"message":"406","line":476,"column":13,"nodeType":"407","endLine":476,"endColumn":23},{"ruleId":"405","severity":1,"message":"406","line":477,"column":13,"nodeType":"407","endLine":477,"endColumn":23},{"ruleId":"405","severity":1,"message":"406","line":478,"column":13,"nodeType":"407","endLine":478,"endColumn":23},{"ruleId":"405","severity":1,"message":"406","line":479,"column":13,"nodeType":"407","endLine":479,"endColumn":23},{"ruleId":"405","severity":1,"message":"406","line":480,"column":13,"nodeType":"407","endLine":480,"endColumn":23},{"ruleId":"405","severity":1,"message":"406","line":481,"column":13,"nodeType":"407","endLine":481,"endColumn":23},{"ruleId":"405","severity":1,"message":"406","line":482,"column":13,"nodeType":"407","endLine":482,"endColumn":23},{"ruleId":"405","severity":1,"message":"406","line":483,"column":13,"nodeType":"407","endLine":483,"endColumn":23},{"ruleId":"405","severity":1,"message":"406","line":484,"column":13,"nodeType":"407","endLine":484,"endColumn":23},{"ruleId":"405","severity":1,"message":"406","line":531,"column":13,"nodeType":"407","endLine":531,"endColumn":23},{"ruleId":"405","severity":1,"message":"406","line":532,"column":13,"nodeType":"407","endLine":532,"endColumn":23},{"ruleId":"405","severity":1,"message":"406","line":533,"column":13,"nodeType":"407","endLine":533,"endColumn":23},{"ruleId":"405","severity":1,"message":"406","line":534,"column":13,"nodeType":"407","endLine":534,"endColumn":23},{"ruleId":"405","severity":1,"message":"406","line":535,"column":13,"nodeType":"407","endLine":535,"endColumn":23},{"ruleId":"405","severity":1,"message":"406","line":536,"column":13,"nodeType":"407","endLine":536,"endColumn":23},{"ruleId":"405","severity":1,"message":"406","line":537,"column":13,"nodeType":"407","endLine":537,"endColumn":23},{"ruleId":"405","severity":1,"message":"406","line":538,"column":13,"nodeType":"407","endLine":538,"endColumn":23},{"ruleId":"405","severity":1,"message":"406","line":539,"column":13,"nodeType":"407","endLine":539,"endColumn":23},{"ruleId":"408","severity":1,"message":"409","line":588,"column":50,"nodeType":"410","messageId":"411","endLine":588,"endColumn":58},{"ruleId":"405","severity":1,"message":"406","line":591,"column":13,"nodeType":"407","endLine":591,"endColumn":23},{"ruleId":"405","severity":1,"message":"406","line":593,"column":13,"nodeType":"407","endLine":593,"endColumn":23},{"ruleId":"412","severity":1,"message":"413","line":610,"column":84,"nodeType":"414","messageId":"415","endLine":610,"endColumn":85},{"ruleId":"412","severity":1,"message":"413","line":614,"column":87,"nodeType":"414","messageId":"415","endLine":614,"endColumn":88},{"ruleId":"412","severity":1,"message":"413","line":618,"column":84,"nodeType":"414","messageId":"415","endLine":618,"endColumn":85},{"ruleId":"412","severity":1,"message":"413","line":633,"column":84,"nodeType":"414","messageId":"415","endLine":633,"endColumn":85},{"ruleId":"401","severity":1,"message":"402","line":770,"column":48,"nodeType":"403","messageId":"404","endLine":770,"endColumn":50},{"ruleId":"427","severity":1,"message":"428","line":779,"column":69,"nodeType":"429","messageId":"430","endLine":779,"endColumn":71},{"ruleId":"408","severity":1,"message":"409","line":69,"column":32,"nodeType":"410","messageId":"411","endLine":69,"endColumn":40},{"ruleId":"412","severity":1,"message":"413","line":85,"column":64,"nodeType":"414","messageId":"415","endLine":85,"endColumn":65},{"ruleId":"412","severity":1,"message":"413","line":89,"column":66,"nodeType":"414","messageId":"415","endLine":89,"endColumn":67},{"ruleId":"412","severity":1,"message":"413","line":93,"column":64,"nodeType":"414","messageId":"415","endLine":93,"endColumn":65},{"ruleId":"405","severity":1,"message":"406","line":103,"column":7,"nodeType":"407","endLine":103,"endColumn":17},{"ruleId":"405","severity":1,"message":"406","line":105,"column":7,"nodeType":"407","endLine":105,"endColumn":17},{"ruleId":"408","severity":1,"message":"417","line":17,"column":8,"nodeType":"410","messageId":"411","endLine":17,"endColumn":12},{"ruleId":"408","severity":1,"message":"431","line":19,"column":8,"nodeType":"410","messageId":"411","endLine":19,"endColumn":18},{"ruleId":"408","severity":1,"message":"432","line":23,"column":10,"nodeType":"410","messageId":"411","endLine":23,"endColumn":23},{"ruleId":"408","severity":1,"message":"424","line":24,"column":22,"nodeType":"410","messageId":"411","endLine":24,"endColumn":26},{"ruleId":"408","severity":1,"message":"433","line":57,"column":7,"nodeType":"410","messageId":"411","endLine":57,"endColumn":12},{"ruleId":"408","severity":1,"message":"434","line":160,"column":92,"nodeType":"410","messageId":"411","endLine":160,"endColumn":103},{"ruleId":"408","severity":1,"message":"433","line":22,"column":7,"nodeType":"410","messageId":"411","endLine":22,"endColumn":12},{"ruleId":"408","severity":1,"message":"433","line":22,"column":7,"nodeType":"410","messageId":"411","endLine":22,"endColumn":12},{"ruleId":"408","severity":1,"message":"433","line":22,"column":9,"nodeType":"410","messageId":"411","endLine":22,"endColumn":14},{"ruleId":"408","severity":1,"message":"433","line":23,"column":7,"nodeType":"410","messageId":"411","endLine":23,"endColumn":12},{"ruleId":"408","severity":1,"message":"424","line":8,"column":22,"nodeType":"410","messageId":"411","endLine":8,"endColumn":26},{"ruleId":"435","severity":1,"message":"436","line":82,"column":5,"nodeType":"437","messageId":"438","endLine":127,"endColumn":6},{"ruleId":"439","severity":1,"message":"440","line":132,"column":22,"nodeType":"410","messageId":"441","endLine":132,"endColumn":31},{"ruleId":"401","severity":1,"message":"425","line":134,"column":34,"nodeType":"403","messageId":"404","endLine":134,"endColumn":36},{"ruleId":"405","severity":1,"message":"406","line":141,"column":5,"nodeType":"407","endLine":141,"endColumn":15},{"ruleId":"405","severity":1,"message":"406","line":164,"column":5,"nodeType":"407","endLine":164,"endColumn":30},{"ruleId":"405","severity":1,"message":"406","line":177,"column":5,"nodeType":"407","endLine":177,"endColumn":15},{"ruleId":"405","severity":1,"message":"406","line":179,"column":5,"nodeType":"407","endLine":179,"endColumn":23},{"ruleId":"439","severity":1,"message":"440","line":176,"column":22,"nodeType":"410","messageId":"441","endLine":176,"endColumn":31},{"ruleId":"401","severity":1,"message":"425","line":178,"column":37,"nodeType":"403","messageId":"404","endLine":178,"endColumn":39},{"ruleId":"405","severity":1,"message":"406","line":185,"column":5,"nodeType":"407","endLine":185,"endColumn":15},{"ruleId":"405","severity":1,"message":"406","line":195,"column":5,"nodeType":"407","endLine":195,"endColumn":15},{"ruleId":"427","severity":1,"message":"442","line":197,"column":50,"nodeType":"429","messageId":"443","endLine":197,"endColumn":52},{"ruleId":"401","severity":1,"message":"402","line":199,"column":69,"nodeType":"403","messageId":"404","endLine":199,"endColumn":71},{"ruleId":"401","severity":1,"message":"402","line":200,"column":17,"nodeType":"403","messageId":"404","endLine":200,"endColumn":19},{"ruleId":"405","severity":1,"message":"406","line":204,"column":7,"nodeType":"407","endLine":204,"endColumn":41},{"ruleId":"435","severity":1,"message":"436","line":213,"column":5,"nodeType":"437","messageId":"438","endLine":248,"endColumn":6},{"ruleId":"405","severity":1,"message":"406","line":272,"column":5,"nodeType":"407","endLine":272,"endColumn":33},{"ruleId":"405","severity":1,"message":"406","line":310,"column":5,"nodeType":"407","endLine":310,"endColumn":15},{"ruleId":"405","severity":1,"message":"406","line":312,"column":5,"nodeType":"407","endLine":312,"endColumn":23},{"ruleId":"405","severity":1,"message":"406","line":318,"column":5,"nodeType":"407","endLine":318,"endColumn":15},{"ruleId":"405","severity":1,"message":"406","line":332,"column":5,"nodeType":"407","endLine":332,"endColumn":28},{"ruleId":"405","severity":1,"message":"406","line":338,"column":5,"nodeType":"407","endLine":338,"endColumn":28},{"ruleId":"405","severity":1,"message":"406","line":344,"column":5,"nodeType":"407","endLine":344,"endColumn":28},{"ruleId":"401","severity":1,"message":"402","line":350,"column":38,"nodeType":"403","messageId":"404","endLine":350,"endColumn":40},{"ruleId":"401","severity":1,"message":"402","line":350,"column":77,"nodeType":"403","messageId":"404","endLine":350,"endColumn":79},{"ruleId":"401","severity":1,"message":"402","line":350,"column":129,"nodeType":"403","messageId":"404","endLine":350,"endColumn":131},{"ruleId":"444","severity":1,"message":"445","line":359,"column":20,"nodeType":"446","messageId":"447","endLine":359,"endColumn":32},{"ruleId":"444","severity":1,"message":"445","line":374,"column":20,"nodeType":"446","messageId":"447","endLine":374,"endColumn":32},{"ruleId":"444","severity":1,"message":"445","line":375,"column":23,"nodeType":"446","messageId":"447","endLine":375,"endColumn":35},{"ruleId":"405","severity":1,"message":"406","line":381,"column":5,"nodeType":"407","endLine":381,"endColumn":63},{"ruleId":"405","severity":1,"message":"406","line":382,"column":5,"nodeType":"407","endLine":382,"endColumn":63},{"ruleId":"427","severity":1,"message":"442","line":389,"column":54,"nodeType":"429","messageId":"443","endLine":389,"endColumn":56},{"ruleId":"405","severity":1,"message":"406","line":390,"column":7,"nodeType":"407","endLine":390,"endColumn":30},{"ruleId":"405","severity":1,"message":"406","line":392,"column":5,"nodeType":"407","endLine":392,"endColumn":15},{"ruleId":"427","severity":1,"message":"442","line":401,"column":49,"nodeType":"429","messageId":"443","endLine":401,"endColumn":51},{"ruleId":"405","severity":1,"message":"406","line":418,"column":5,"nodeType":"407","endLine":418,"endColumn":15},{"ruleId":"405","severity":1,"message":"406","line":419,"column":5,"nodeType":"407","endLine":419,"endColumn":38},{"ruleId":"405","severity":1,"message":"406","line":420,"column":5,"nodeType":"407","endLine":420,"endColumn":38},{"ruleId":"427","severity":1,"message":"442","line":433,"column":38,"nodeType":"429","messageId":"443","endLine":433,"endColumn":40},{"ruleId":"427","severity":1,"message":"442","line":434,"column":59,"nodeType":"429","messageId":"443","endLine":434,"endColumn":61},{"ruleId":"427","severity":1,"message":"442","line":435,"column":41,"nodeType":"429","messageId":"443","endLine":435,"endColumn":43},{"ruleId":"427","severity":1,"message":"442","line":453,"column":45,"nodeType":"429","messageId":"443","endLine":453,"endColumn":47},{"ruleId":"401","severity":1,"message":"402","line":455,"column":22,"nodeType":"403","messageId":"404","endLine":455,"endColumn":24},{"ruleId":"427","severity":1,"message":"442","line":470,"column":26,"nodeType":"429","messageId":"443","endLine":470,"endColumn":28},{"ruleId":"401","severity":1,"message":"402","line":472,"column":22,"nodeType":"403","messageId":"404","endLine":472,"endColumn":24},{"ruleId":"427","severity":1,"message":"442","line":480,"column":17,"nodeType":"429","messageId":"443","endLine":480,"endColumn":19},{"ruleId":"401","severity":1,"message":"402","line":599,"column":88,"nodeType":"403","messageId":"404","endLine":599,"endColumn":90},{"ruleId":"401","severity":1,"message":"402","line":599,"column":152,"nodeType":"403","messageId":"404","endLine":599,"endColumn":154},{"ruleId":"401","severity":1,"message":"402","line":662,"column":54,"nodeType":"403","messageId":"404","endLine":662,"endColumn":56},{"ruleId":"401","severity":1,"message":"402","line":675,"column":54,"nodeType":"403","messageId":"404","endLine":675,"endColumn":56},{"ruleId":"401","severity":1,"message":"402","line":688,"column":54,"nodeType":"403","messageId":"404","endLine":688,"endColumn":56},{"ruleId":"408","severity":1,"message":"448","line":147,"column":22,"nodeType":"410","messageId":"411","endLine":147,"endColumn":30},{"ruleId":"408","severity":1,"message":"449","line":147,"column":32,"nodeType":"410","messageId":"411","endLine":147,"endColumn":40},{"ruleId":"450","severity":1,"message":"451","line":131,"column":134,"nodeType":"452","endLine":131,"endColumn":153},{"ruleId":"408","severity":1,"message":"433","line":64,"column":7,"nodeType":"410","messageId":"411","endLine":64,"endColumn":12},{"ruleId":"435","severity":1,"message":"436","line":258,"column":5,"nodeType":"437","messageId":"438","endLine":271,"endColumn":6},{"ruleId":"427","severity":1,"message":"428","line":449,"column":41,"nodeType":"429","messageId":"430","endLine":449,"endColumn":43},{"ruleId":"427","severity":1,"message":"428","line":512,"column":41,"nodeType":"429","messageId":"430","endLine":512,"endColumn":43},{"ruleId":"427","severity":1,"message":"428","line":575,"column":41,"nodeType":"429","messageId":"430","endLine":575,"endColumn":43},{"ruleId":"427","severity":1,"message":"428","line":638,"column":41,"nodeType":"429","messageId":"430","endLine":638,"endColumn":43},{"ruleId":"408","severity":1,"message":"433","line":35,"column":7,"nodeType":"410","messageId":"411","endLine":35,"endColumn":12},{"ruleId":"408","severity":1,"message":"453","line":58,"column":22,"nodeType":"410","messageId":"411","endLine":58,"endColumn":33},{"ruleId":"408","severity":1,"message":"454","line":58,"column":70,"nodeType":"410","messageId":"411","endLine":58,"endColumn":74},{"ruleId":"408","severity":1,"message":"455","line":13,"column":17,"nodeType":"410","messageId":"411","endLine":13,"endColumn":23},{"ruleId":"408","severity":1,"message":"456","line":13,"column":25,"nodeType":"410","messageId":"411","endLine":13,"endColumn":34},{"ruleId":"408","severity":1,"message":"457","line":13,"column":36,"nodeType":"410","messageId":"411","endLine":13,"endColumn":46},{"ruleId":"408","severity":1,"message":"458","line":134,"column":13,"nodeType":"410","messageId":"411","endLine":134,"endColumn":18},{"ruleId":"401","severity":1,"message":"402","line":139,"column":21,"nodeType":"403","messageId":"404","endLine":139,"endColumn":23},{"ruleId":"408","severity":1,"message":"459","line":161,"column":16,"nodeType":"410","messageId":"411","endLine":161,"endColumn":29},{"ruleId":"405","severity":1,"message":"406","line":244,"column":9,"nodeType":"407","endLine":244,"endColumn":19},{"ruleId":"405","severity":1,"message":"406","line":92,"column":9,"nodeType":"407","endLine":92,"endColumn":19},{"ruleId":"405","severity":1,"message":"406","line":101,"column":9,"nodeType":"407","endLine":101,"endColumn":19},{"ruleId":"405","severity":1,"message":"406","line":110,"column":9,"nodeType":"407","endLine":110,"endColumn":19},{"ruleId":"405","severity":1,"message":"406","line":119,"column":9,"nodeType":"407","endLine":119,"endColumn":19},{"ruleId":"401","severity":1,"message":"402","line":129,"column":32,"nodeType":"403","messageId":"404","endLine":129,"endColumn":34},{"ruleId":"401","severity":1,"message":"402","line":131,"column":39,"nodeType":"403","messageId":"404","endLine":131,"endColumn":41},{"ruleId":"401","severity":1,"message":"402","line":133,"column":39,"nodeType":"403","messageId":"404","endLine":133,"endColumn":41},{"ruleId":"401","severity":1,"message":"402","line":135,"column":39,"nodeType":"403","messageId":"404","endLine":135,"endColumn":41},{"ruleId":"408","severity":1,"message":"460","line":165,"column":16,"nodeType":"410","messageId":"411","endLine":165,"endColumn":29},{"ruleId":"461","severity":1,"message":"462","line":94,"column":13,"nodeType":"463","endLine":94,"endColumn":73},{"ruleId":"401","severity":1,"message":"402","line":17,"column":33,"nodeType":"403","messageId":"404","endLine":17,"endColumn":35},{"ruleId":"408","severity":1,"message":"433","line":67,"column":7,"nodeType":"410","messageId":"411","endLine":67,"endColumn":12},{"ruleId":"408","severity":1,"message":"434","line":259,"column":90,"nodeType":"410","messageId":"411","endLine":259,"endColumn":101},{"ruleId":"408","severity":1,"message":"464","line":260,"column":98,"nodeType":"410","messageId":"411","endLine":260,"endColumn":104},{"ruleId":"408","severity":1,"message":"465","line":260,"column":106,"nodeType":"410","messageId":"411","endLine":260,"endColumn":121},{"ruleId":"427","severity":1,"message":"442","line":80,"column":44,"nodeType":"429","messageId":"443","endLine":80,"endColumn":46},{"ruleId":"405","severity":1,"message":"406","line":106,"column":5,"nodeType":"407","endLine":106,"endColumn":15},{"ruleId":"401","severity":1,"message":"402","line":167,"column":39,"nodeType":"403","messageId":"404","endLine":167,"endColumn":41},{"ruleId":"405","severity":1,"message":"406","line":207,"column":31,"nodeType":"407","endLine":207,"endColumn":41},{"ruleId":"401","severity":1,"message":"402","line":268,"column":30,"nodeType":"403","messageId":"404","endLine":268,"endColumn":32},{"ruleId":"408","severity":1,"message":"466","line":19,"column":8,"nodeType":"410","messageId":"411","endLine":19,"endColumn":22},{"ruleId":"405","severity":1,"message":"406","line":73,"column":9,"nodeType":"407","endLine":73,"endColumn":26},{"ruleId":"401","severity":1,"message":"402","line":77,"column":28,"nodeType":"403","messageId":"404","endLine":77,"endColumn":30},{"ruleId":"405","severity":1,"message":"406","line":77,"column":62,"nodeType":"407","endLine":77,"endColumn":78},{"ruleId":"405","severity":1,"message":"406","line":85,"column":84,"nodeType":"407","endLine":85,"endColumn":100},{"ruleId":"405","severity":1,"message":"406","line":86,"column":26,"nodeType":"407","endLine":86,"endColumn":42},{"ruleId":"405","severity":1,"message":"406","line":89,"column":49,"nodeType":"407","endLine":89,"endColumn":65},{"ruleId":"405","severity":1,"message":"406","line":90,"column":26,"nodeType":"407","endLine":90,"endColumn":42},{"ruleId":"405","severity":1,"message":"406","line":94,"column":21,"nodeType":"407","endLine":94,"endColumn":37},{"ruleId":"405","severity":1,"message":"406","line":97,"column":21,"nodeType":"407","endLine":97,"endColumn":37},{"ruleId":"467","severity":1,"message":"468","line":100,"column":21,"nodeType":"469","messageId":"470","endLine":100,"endColumn":61},{"ruleId":"401","severity":1,"message":"402","line":113,"column":15,"nodeType":"403","messageId":"404","endLine":113,"endColumn":17},{"ruleId":"405","severity":1,"message":"406","line":115,"column":13,"nodeType":"407","endLine":115,"endColumn":29},{"ruleId":"405","severity":1,"message":"406","line":123,"column":13,"nodeType":"407","endLine":123,"endColumn":29},{"ruleId":"405","severity":1,"message":"406","line":135,"column":9,"nodeType":"407","endLine":135,"endColumn":26},{"ruleId":"405","severity":1,"message":"406","line":138,"column":9,"nodeType":"407","endLine":138,"endColumn":25},{"ruleId":"427","severity":1,"message":"442","line":152,"column":39,"nodeType":"429","messageId":"443","endLine":152,"endColumn":41},{"ruleId":"401","severity":1,"message":"402","line":154,"column":47,"nodeType":"403","messageId":"404","endLine":154,"endColumn":49},{"ruleId":"401","severity":1,"message":"402","line":176,"column":48,"nodeType":"403","messageId":"404","endLine":176,"endColumn":50},{"ruleId":"471","severity":1,"message":"472","line":233,"column":63,"nodeType":"403","messageId":"473","endLine":233,"endColumn":64},{"ruleId":"471","severity":1,"message":"472","line":235,"column":37,"nodeType":"403","messageId":"473","endLine":235,"endColumn":38},{"ruleId":"408","severity":1,"message":"474","line":271,"column":41,"nodeType":"410","messageId":"411","endLine":271,"endColumn":51},{"ruleId":"408","severity":1,"message":"475","line":271,"column":53,"nodeType":"410","messageId":"411","endLine":271,"endColumn":59},{"ruleId":"408","severity":1,"message":"476","line":271,"column":61,"nodeType":"410","messageId":"411","endLine":271,"endColumn":68},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-unused-vars","'password' is assigned a value but never used.","Identifier","unusedVar","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'Button' is defined but never used.","'Grid' is defined but never used.","'Paper' is defined but never used.","'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'TextField' is defined but never used.","'grey' is defined but never used.","Expected '!==' and instead saw '!='.","'index' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'Typography' is defined but never used.","'ThemeProvider' is defined but never used.","'theme' is assigned a value but never used.","'postComment' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-shadow-restricted-names","Shadowing of global property 'undefined'.","shadowingRestrictedName","Array.prototype.map() expects a return value from arrow function.","expectedInside","no-new-object","The object literal notation {} is preferrable.","NewExpression","preferLiteral","'username' is assigned a value but never used.","'usertype' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'openSidebar' is assigned a value but never used.","'open' is assigned a value but never used.","'useRef' is defined but never used.","'useEffect' is defined but never used.","'useReducer' is defined but never used.","'total' is assigned a value but never used.","'listToDisplay' is assigned a value but never used.","'compoundTypes' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'FAInfo' is assigned a value but never used.","'userInfoUpdater' is assigned a value but never used.","'InputAdornment' is defined but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'categories' is assigned a value but never used.","'addRow' is assigned a value but never used.","'editRow' is assigned a value but never used."]