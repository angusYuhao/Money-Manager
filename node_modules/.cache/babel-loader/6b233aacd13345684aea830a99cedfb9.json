{"ast":null,"code":"var _jsxFileName = \"/Users/emilyhuang/Documents/CSC309/groupProject/team06/src/components/Investments/canvasExample2.js\";\n//Tutorials followed:\n//https://stackoverflow.com/questions/33924150/how-to-access-canvas-context-in-react\n//https://stackoverflow.com/questions/27736288/how-to-fill-the-whole-canvas-with-specific-color\nimport React, { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Canvas extends React.Component {\n  constructor(props) {\n    super(props);\n    this.pieChartRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    const {\n      stockList\n    } = this.props;\n    console.log(stockList);\n    this.context = this.pieChartRef.current.getContext('2d'); //     test example:\n    //    this.context.fillStyle = '#000000'\n    //    this.context.beginPath()\n    //    this.context.arc(50, 100, 20, 0, 2*Math.PI)\n    //    this.context.fill()\n\n    let total = stockList.reduce((ttl, stock) => {\n      return ttl + stock.avgCost * stock.quantity;\n    }, 0);\n    console.log(\"total\");\n    console.log(total);\n    let startAngle = 0;\n    let radius = 100;\n    let cx = 350;\n    let cy = 350;\n\n    const randomHexColorCode = () => {\n      return \"#\" + Math.random().toString(16).slice(2, 8);\n    };\n\n    stockList.forEach(element => {\n      this.context.fillStyle = randomHexColorCode();\n      this.context.lineWidth = 1;\n      this.context.strokeStyle = '#333';\n      this.context.beginPath(); //console.log(total, house.troops, house.troops/total);\n      // draw the pie wedges\n\n      let endAngle = element.troops / total * Math.PI * 2 + startAngle;\n      this.context.moveTo(cx, cy);\n      this.context.arc(cx, cy, radius, startAngle, endAngle, false);\n      this.context.lineTo(cx, cy);\n      this.context.fill();\n      this.context.stroke();\n      this.context.closePath(); // add the labels\n\n      this.context.beginPath();\n      this.context.font = '20px Helvetica, Calibri';\n      this.context.textAlign = 'center';\n      this.context.fillStyle = 'rebeccapurple'; // midpoint between the two angles\n      // 1.5 * radius is the length of the Hypotenuse\n\n      let theta = (startAngle + endAngle) / 2;\n      let deltaY = Math.sin(theta) * 1.5 * radius;\n      let deltaX = Math.cos(theta) * 1.5 * radius;\n      /***\n      SOH  - sin(angle) = opposite / hypotenuse\n                          = opposite / 1px\n      CAH  - cos(angle) = adjacent / hypotenuse\n                          = adjacent / 1px\n      TOA\n      \n      ***/\n\n      this.context.fillText(element.name, deltaX + cx, deltaY + cy);\n      this.context.closePath();\n      startAngle = endAngle;\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: this.pieChartRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default Canvas;","map":{"version":3,"sources":["/Users/emilyhuang/Documents/CSC309/groupProject/team06/src/components/Investments/canvasExample2.js"],"names":["React","useRef","useEffect","Canvas","Component","constructor","props","pieChartRef","createRef","componentDidMount","stockList","console","log","context","current","getContext","total","reduce","ttl","stock","avgCost","quantity","startAngle","radius","cx","cy","randomHexColorCode","Math","random","toString","slice","forEach","element","fillStyle","lineWidth","strokeStyle","beginPath","endAngle","troops","PI","moveTo","arc","lineTo","fill","stroke","closePath","font","textAlign","theta","deltaY","sin","deltaX","cos","fillText","name","render"],"mappings":"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","sourcesContent":["//Tutorials followed:\n//https://stackoverflow.com/questions/33924150/how-to-access-canvas-context-in-react\n//https://stackoverflow.com/questions/27736288/how-to-fill-the-whole-canvas-with-specific-color\n\nimport React, { useRef, useEffect } from 'react'\n\nclass Canvas extends React.Component {\n    \n    constructor(props) {\n       super(props);\n    \n       this.pieChartRef = React.createRef();\n\n    }\n    \n    componentDidMount() {\n        const {stockList}= this.props\n        console.log(stockList)\n        this.context = this.pieChartRef.current.getContext('2d');\n    //     test example:\n    //    this.context.fillStyle = '#000000'\n    //    this.context.beginPath()\n    //    this.context.arc(50, 100, 20, 0, 2*Math.PI)\n    //    this.context.fill()\n        let total = stockList.reduce( (ttl, stock) => {\n            return ttl + (stock.avgCost * stock.quantity)\n        }, 0);\n        console.log(\"total\")\n        console.log(total)\n        let startAngle = 0; \n        let radius = 100;\n        let cx = 350;\n        let cy = 350;\n\n\n        const randomHexColorCode = () => {\n            return \"#\" + Math.random().toString(16).slice(2, 8)\n        };\n        \n        stockList.forEach(element => {\n            this.context.fillStyle = randomHexColorCode();\n            this.context.lineWidth = 1;\n            this.context.strokeStyle = '#333';\n            this.context.beginPath();\n            //console.log(total, house.troops, house.troops/total);\n            // draw the pie wedges\n            let endAngle = ((element.troops / total) * Math.PI * 2) + startAngle;\n            this.context.moveTo(cx, cy);\n            this.context.arc(cx, cy, radius, startAngle, endAngle, false);\n            this.context.lineTo(cx, cy);\n            this.context.fill();\n            this.context.stroke();\n            this.context.closePath();\n            \n            // add the labels\n            this.context.beginPath();\n            this.context.font = '20px Helvetica, Calibri';\n            this.context.textAlign = 'center';\n            this.context.fillStyle = 'rebeccapurple';\n            // midpoint between the two angles\n            // 1.5 * radius is the length of the Hypotenuse\n            let theta = (startAngle + endAngle) / 2;\n            let deltaY = Math.sin(theta) * 1.5 * radius;\n            let deltaX = Math.cos(theta) * 1.5 * radius;\n            /***\n            SOH  - sin(angle) = opposite / hypotenuse\n                                = opposite / 1px\n            CAH  - cos(angle) = adjacent / hypotenuse\n                                = adjacent / 1px\n            TOA\n            \n            ***/\n           this.context.fillText(element.name, deltaX+cx, deltaY+cy);\n           this.context.closePath();\n            \n            startAngle = endAngle;\n        });\n\n        \n    }\n    \n    render() {\n        \n\n        return (\n          <canvas ref={this.pieChartRef} />\n       )\n    }\n}\n\nexport default Canvas"]},"metadata":{},"sourceType":"module"}