{"ast":null,"code":"var _jsxFileName = \"/Users/emilyhuang/Documents/CSC309/groupProject/team06/src/components/Investments/PieChart.js\";\n//Tutorials followed:\n//https://stackoverflow.com/questions/33924150/how-to-access-canvas-context-in-react\n//https://stackoverflow.com/questions/27736288/how-to-fill-the-whole-canvas-with-specific-color\n//https://medium.com/@pdx.lucasm/canvas-with-react-js-32e133c05258\n//https://gist.github.com/prof3ssorSt3v3/7f16fe9397c013d364f2d4484cad3ca8\n//https://stackoverflow.com/questions/30790010/html-canvas-hover-text\n//https://stackoverflow.com/questions/6270785/how-to-determine-whether-a-point-x-y-is-contained-within-an-arc-section-of-a-c\n//https://stackoverflow.com/questions/2142535/how-to-clear-the-canvas-for-redrawing\nimport React, { useRef, useEffect, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PieChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      canvasWidth: 600,\n      canvasHeight: 600,\n      slices: []\n    };\n\n    this.randomHexColorCode = () => {\n      return \"#\" + Math.random().toString(16).slice(2, 8);\n    };\n\n    this.drawSlices = () => {\n      let slicesList = this.state.slices;\n      const {\n        stockList\n      } = this.props;\n      let startAngle = 0;\n      let radius = 120;\n      let cx = this.state.canvasWidth / 2;\n      let cy = this.state.canvasHeight / 2;\n      let total = stockList.reduce((ttl, stock) => {\n        return ttl + stock.avgCost * stock.quantity;\n      }, 0);\n      stockList.forEach(element => {\n        console.log(\"Drawing slice\");\n        this.context.lineWidth = 1;\n        this.context.strokeStyle = '#fafafa';\n        this.context.fillStyle = this.randomHexColorCode();\n        this.context.beginPath(); // draw the pie wedges\n\n        let endAngle = element.avgCost * element.quantity / total * Math.PI * 2 + startAngle;\n        this.context.moveTo(cx, cy);\n        this.context.arc(cx, cy, radius, startAngle, endAngle);\n        this.context.lineTo(cx, cy);\n        this.context.fill();\n        this.context.stroke();\n        this.context.closePath(); // add the labels\n\n        this.context.beginPath();\n        this.context.font = '20px Helvetica, Calibri';\n        this.context.textAlign = 'center';\n        this.context.fillStyle = 'rebeccapurple'; // 1.5 * radius is the length of the Hypotenuse\n\n        let theta = (startAngle + endAngle) / 2;\n        let deltaY = Math.sin(theta) * 1.5 * radius;\n        let deltaX = Math.cos(theta) * 1.5 * radius;\n        this.context.fillText(element.name, deltaX + cx, deltaY + cy);\n        let percentage = Math.round(+(element.avgCost * element.quantity * 100 / total));\n        this.context.fillText(percentage + \"%\", deltaX * 1.3 + cx, deltaY * 1.4 + cy);\n        this.context.closePath(); //store the slice information\n\n        slicesList.push({\n          \"name\": element.name,\n          \"cx\": cx,\n          \"cy\": cy,\n          \"colour\": this.context.fillStyle,\n          \"radius\": radius,\n          \"startAngle\": startAngle,\n          \"endAngle\": endAngle\n        });\n        startAngle = endAngle;\n      });\n      const studentList = this.state.students;\n      const student = {\n        name: this.state.studentName,\n        //no query selector..\n        course: this.state.studentCourse\n      };\n      studentList.push(student);\n      this.setState({\n        slices: studentList\n      });\n    };\n\n    this.width = 0;\n    this.height = 0;\n    this.pieChartRef = /*#__PURE__*/React.createRef();\n  } // let elem = document.querySelector('canvas');\n  // let rect = elem.getBoundingClientRect();\n  // console.log(rect);\n\n\n  componentDidMount() {\n    console.log(\"Did mount!\");\n    this.context = this.pieChartRef.current.getContext('2d');\n    let elem = document.querySelector('canvas');\n    let rect = elem.getBoundingClientRect();\n    console.log(rect);\n    const {\n      stockList\n    } = this.props;\n    console.log(stockList);\n    this.drawSlices();\n    document.addEventListener('mousemove', e => {\n      let mouseX = parseInt(e.clientX);\n      let mouseY = parseInt(e.clientY); // console.log(e.pageX)\n      // console.log(e.pageY)\n      // console.log(e.clientX)\n      // console.log(e.clientY)\n\n      let cx = this.state.canvasWidth / 2;\n      let cy = this.state.canvasHeight / 2;\n\n      for (let i = 0; i < this.state.slices.length; i++) {\n        let s = this.state.slices[i]; // define the shape path we want to test against the mouse position\n        // defineShape(s.points);\n        //check the angle\n\n        let angleOk = false;\n        let angle = Math.atan(mouseY - cy, mouseX - cx); // let mouseAngle = Math.atan(e.pageY - cy,e.pageX - cx);\n\n        if (s.startAngle < s.endAngle && s.startAngle < angle && angle < s.endAngle) {\n          //console.log(\"Angle ok\")\n          angleOk = true;\n        } else if (s.startAngle > s.endAngle) {\n          if (angle > s.startAngle || angle < s.endAngle) {\n            //console.log(\"Angle ok\")\n            angleOk = true;\n          }\n        } //check the radius\n\n\n        let distanceOk = false; //this distance is wrong:\n\n        let distance = Math.sqrt((mouseX - cx) * (mouseX - cx) + (mouseY - cy) * (mouseY - cy)); // console.log(mouseX)\n        // console.log(mouseY)\n        // console.log(cx)\n        // console.log(cy)\n\n        if (distance < s.radius) {\n          distanceOk = true; // console.log(distance)\n          // console.log(\"Distance ok\")\n        } //all the slices \n\n\n        if (angleOk && distanceOk) {\n          // if yes, fill the shape in red\n          console.log(\"hovering over slice\"); //   s.drawcolor='red';\n        } else {// if no, fill the shape with blue\n            //   s.drawcolor=s.colour;\n          }\n      }\n    });\n  }\n\n  componentDidUpdate() {\n    console.log(\"Did update!\");\n    let elem = document.querySelector('canvas');\n    let rect = elem.getBoundingClientRect();\n    console.log(rect);\n    console.log(rect.x);\n    console.log(rect.y);\n    console.log(rect.width);\n    console.log(rect.height);\n    this.context = this.pieChartRef.current.getContext('2d');\n    const context = this.context;\n    context.clearRect(rect.x, rect.y, rect.width, rect.height);\n    context.beginPath(); //context.save();\n    //context.setTransform(1, 0, 0, 1, 0, 0);\n    //context.beginPath();\n    //context.restore();\n\n    const {\n      stockList\n    } = this.props;\n    console.log(stockList);\n    this.drawSlices();\n    document.addEventListener('mousemove', e => {\n      let mouseX = parseInt(e.clientX);\n      let mouseY = parseInt(e.clientY); // console.log(e.pageX)\n      // console.log(e.pageY)\n      // console.log(e.clientX)\n      // console.log(e.clientY)\n\n      let cx = this.state.canvasWidth / 2;\n      let cy = this.state.canvasHeight / 2;\n\n      for (let i = 0; i < this.state.slices.length; i++) {\n        let s = this.state.slices[i]; // define the shape path we want to test against the mouse position\n        // defineShape(s.points);\n        //check the angle\n\n        let angleOk = false;\n        let angle = Math.atan(mouseY - cy, mouseX - cx); // let mouseAngle = Math.atan(e.pageY - cy,e.pageX - cx);\n\n        if (s.startAngle < s.endAngle && s.startAngle < angle && angle < s.endAngle) {\n          //console.log(\"Angle ok\")\n          angleOk = true;\n        } else if (s.startAngle > s.endAngle) {\n          if (angle > s.startAngle || angle < s.endAngle) {\n            //console.log(\"Angle ok\")\n            angleOk = true;\n          }\n        } //check the radius\n\n\n        let distanceOk = false; //this distance is wrong:\n\n        let distance = Math.sqrt((mouseX - (cx + rect.x)) * (mouseX - (cx + rect.x)) + (mouseY - (cy + rect.y)) * (mouseY - (cy + rect.y))); // console.log(mouseX)\n        // console.log(mouseY)\n        // console.log(cx)\n        // console.log(cy)\n\n        if (distance < s.radius) {\n          distanceOk = true; // console.log(distance)\n\n          console.log(\"Distance ok\");\n        } //all the slices \n\n\n        if (angleOk && distanceOk) {\n          // if yes, fill the shape in red\n          console.log(\"hovering over slice\"); //   s.drawcolor='red';\n        } else {// if no, fill the shape with blue\n            //   s.drawcolor=s.colour;\n          }\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: this.pieChartRef,\n      width: this.state.canvasWidth,\n      height: this.state.canvasHeight\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default PieChart;","map":{"version":3,"sources":["/Users/emilyhuang/Documents/CSC309/groupProject/team06/src/components/Investments/PieChart.js"],"names":["React","useRef","useEffect","useReducer","PieChart","Component","constructor","props","state","canvasWidth","canvasHeight","slices","randomHexColorCode","Math","random","toString","slice","drawSlices","slicesList","stockList","startAngle","radius","cx","cy","total","reduce","ttl","stock","avgCost","quantity","forEach","element","console","log","context","lineWidth","strokeStyle","fillStyle","beginPath","endAngle","PI","moveTo","arc","lineTo","fill","stroke","closePath","font","textAlign","theta","deltaY","sin","deltaX","cos","fillText","name","percentage","round","push","studentList","students","student","studentName","course","studentCourse","setState","width","height","pieChartRef","createRef","componentDidMount","current","getContext","elem","document","querySelector","rect","getBoundingClientRect","addEventListener","e","mouseX","parseInt","clientX","mouseY","clientY","i","length","s","angleOk","angle","atan","distanceOk","distance","sqrt","componentDidUpdate","x","y","clearRect","render"],"mappings":"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","sourcesContent":["//Tutorials followed:\n//https://stackoverflow.com/questions/33924150/how-to-access-canvas-context-in-react\n//https://stackoverflow.com/questions/27736288/how-to-fill-the-whole-canvas-with-specific-color\n//https://medium.com/@pdx.lucasm/canvas-with-react-js-32e133c05258\n//https://gist.github.com/prof3ssorSt3v3/7f16fe9397c013d364f2d4484cad3ca8\n//https://stackoverflow.com/questions/30790010/html-canvas-hover-text\n//https://stackoverflow.com/questions/6270785/how-to-determine-whether-a-point-x-y-is-contained-within-an-arc-section-of-a-c\n//https://stackoverflow.com/questions/2142535/how-to-clear-the-canvas-for-redrawing\n\n\n\nimport React, { useRef, useEffect, useReducer } from 'react'\n\nclass PieChart extends React.Component {\n    state = {\n        canvasWidth: 600,\n        canvasHeight: 600,\n        slices: []\n    }\n    constructor(props) {\n        super(props);\n        this.width = 0;\n        this.height = 0;\n        this.pieChartRef = React.createRef();\n    }\n    \n    // let elem = document.querySelector('canvas');\n    // let rect = elem.getBoundingClientRect();\n    // console.log(rect);\n\n    randomHexColorCode = () => {\n        return \"#\" + Math.random().toString(16).slice(2, 8)\n    }\n\n    drawSlices = () => {\n        let slicesList = this.state.slices;\n        \n        const {stockList} = this.props\n        let startAngle = 0; \n        let radius = 120;\n        let cx = this.state.canvasWidth/2;\n        let cy = this.state.canvasHeight/2;\n        let total = stockList.reduce( (ttl, stock) => {\n            return ttl + (stock.avgCost * stock.quantity)\n        }, 0);\n\n        stockList.forEach(element => {\n            console.log(\"Drawing slice\")\n            \n            this.context.lineWidth = 1;\n            this.context.strokeStyle = '#fafafa';\n            this.context.fillStyle = this.randomHexColorCode();\n            this.context.beginPath();\n            \n            // draw the pie wedges\n            let endAngle = (((element.avgCost * element.quantity) / total) * Math.PI * 2) + startAngle;\n            this.context.moveTo(cx, cy);\n            this.context.arc(cx, cy, radius, startAngle, endAngle);\n            this.context.lineTo(cx, cy);\n            this.context.fill();\n            this.context.stroke();\n            this.context.closePath();\n            \n            // add the labels\n            this.context.beginPath();\n            this.context.font = '20px Helvetica, Calibri';\n            this.context.textAlign = 'center';\n            this.context.fillStyle = 'rebeccapurple';\n            // 1.5 * radius is the length of the Hypotenuse\n            let theta = (startAngle + endAngle) / 2;\n            let deltaY = Math.sin(theta) * 1.5 * radius;\n            let deltaX = Math.cos(theta) * 1.5 * radius;\n            this.context.fillText(element.name, deltaX+cx, deltaY+cy);\n            let percentage = Math.round(+((element.avgCost*element.quantity*100)/total));\n            this.context.fillText(percentage + \"%\", (deltaX*1.3)+cx, (deltaY*1.4)+cy);\n            this.context.closePath();\n            \n\n            //store the slice information\n            slicesList.push({ \n                    \"name\" : element.name,\n                    \"cx\" : cx,\n                    \"cy\" : cy,\n                    \"colour\" : this.context.fillStyle,\n                    \"radius\" : radius,\n                    \"startAngle\" : startAngle,\n                    \"endAngle\": endAngle,\n            });\n            startAngle = endAngle;\n        });\n        const studentList = this.state.students\n        const student = {\n        name:this.state.studentName,//no query selector..\n        course: this.state.studentCourse\n        }\n        studentList.push(student)\n        this.setState({\n        slices:studentList\n        })\n    }\n\n\n\n\n\n    componentDidMount() {\n        console.log(\"Did mount!\")\n        this.context = this.pieChartRef.current.getContext('2d');\n        let elem = document.querySelector('canvas');\n        let rect = elem.getBoundingClientRect();\n        console.log(rect);\n        \n        const {stockList} = this.props\n        console.log(stockList)\n        this.drawSlices();\n        \n\n        document.addEventListener('mousemove', (e) => {\n            let mouseX=parseInt(e.clientX);\n            let mouseY=parseInt(e.clientY);\n            // console.log(e.pageX)\n            // console.log(e.pageY)\n            // console.log(e.clientX)\n            // console.log(e.clientY)\n\n            let cx = this.state.canvasWidth/2;\n            let cy = this.state.canvasHeight/2;\n            for(let i=0;i<this.state.slices.length;i++){\n                let s=this.state.slices[i];\n            \n                // define the shape path we want to test against the mouse position\n                // defineShape(s.points);\n                \n                //check the angle\n                let angleOk = false;\n                let angle = Math.atan(mouseY - cy,mouseX - cx);\n                // let mouseAngle = Math.atan(e.pageY - cy,e.pageX - cx);\n         \n                if(s.startAngle < s.endAngle && s.startAngle < angle && angle < s.endAngle){\n                    //console.log(\"Angle ok\")\n                    angleOk = true;\n\n\n                }else if(s.startAngle > s.endAngle){\n                    if(angle > s.startAngle || angle < s.endAngle){\n                        //console.log(\"Angle ok\")\n                        angleOk = true;\n\n\n\n                    }\n                }\n                \n                //check the radius\n                let distanceOk = false;\n                //this distance is wrong:\n                let distance = Math.sqrt( ((mouseX - cx) * (mouseX - cx)) +  ((mouseY - cy) * (mouseY - cy)) );\n                \n                \n                \n                // console.log(mouseX)\n                // console.log(mouseY)\n                // console.log(cx)\n                // console.log(cy)\n\n\n                if(distance < s.radius){\n                    distanceOk = true;\n                    // console.log(distance)\n                    // console.log(\"Distance ok\")\n                }\n\n                //all the slices \n                if(angleOk && distanceOk){\n                  // if yes, fill the shape in red\n                  console.log(\"hovering over slice\")\n\n                //   s.drawcolor='red';\n                  \n                }else{\n                  // if no, fill the shape with blue\n                //   s.drawcolor=s.colour;\n                }\n                \n              }\n        }); \n    }\n\n    componentDidUpdate() {\n        console.log(\"Did update!\")\n        let elem  = document.querySelector('canvas');\n        let rect = elem.getBoundingClientRect();\n        console.log(rect);\n        console.log(rect.x)\n        console.log(rect.y)\n        console.log(rect.width)\n        console.log(rect.height)\n\n        this.context = this.pieChartRef.current.getContext('2d');\n        const context = this.context;\n        context.clearRect(rect.x, rect.y, rect.width, rect.height);\n        context.beginPath();\n        \n        //context.save();\n        //context.setTransform(1, 0, 0, 1, 0, 0);\n        //context.beginPath();\n        //context.restore();\n        \n        \n        const {stockList} = this.props\n        console.log(stockList)\n\n        this.drawSlices();\n\n        document.addEventListener('mousemove', (e) => {\n            let mouseX=parseInt(e.clientX);\n            let mouseY=parseInt(e.clientY);\n            // console.log(e.pageX)\n            // console.log(e.pageY)\n            // console.log(e.clientX)\n            // console.log(e.clientY)\n\n            let cx = this.state.canvasWidth/2;\n            let cy = this.state.canvasHeight/2;\n            for(let i=0;i<this.state.slices.length;i++){\n                let s=this.state.slices[i];\n            \n                // define the shape path we want to test against the mouse position\n                // defineShape(s.points);\n                \n                //check the angle\n                let angleOk = false;\n                let angle = Math.atan(mouseY - cy,mouseX - cx);\n                // let mouseAngle = Math.atan(e.pageY - cy,e.pageX - cx);\n         \n                if(s.startAngle < s.endAngle && s.startAngle < angle && angle < s.endAngle){\n                    //console.log(\"Angle ok\")\n                    angleOk = true;\n\n\n                }else if(s.startAngle > s.endAngle){\n                    if(angle > s.startAngle || angle < s.endAngle){\n                        //console.log(\"Angle ok\")\n                        angleOk = true;\n\n\n\n                    }\n                }\n                \n                //check the radius\n                let distanceOk = false;\n                //this distance is wrong:\n                let distance = Math.sqrt( ((mouseX - (cx+rect.x)) * (mouseX - (cx+rect.x))) +  ((mouseY - (cy+rect.y)) * (mouseY - (cy+rect.y))) );\n                \n                \n                \n                // console.log(mouseX)\n                // console.log(mouseY)\n                // console.log(cx)\n                // console.log(cy)\n\n\n                if(distance < s.radius){\n                    distanceOk = true;\n                    // console.log(distance)\n                    console.log(\"Distance ok\")\n                }\n\n                //all the slices \n                if(angleOk && distanceOk){\n                  // if yes, fill the shape in red\n                  console.log(\"hovering over slice\")\n\n                //   s.drawcolor='red';\n                  \n                }else{\n                  // if no, fill the shape with blue\n                //   s.drawcolor=s.colour;\n                }\n                \n              }\n        }); \n    }\n    \n    render() {\n        return (\n          <canvas ref={this.pieChartRef} width = {this.state.canvasWidth} height = {this.state.canvasHeight} />\n       )\n    }\n}\n\nexport default PieChart"]},"metadata":{},"sourceType":"module"}