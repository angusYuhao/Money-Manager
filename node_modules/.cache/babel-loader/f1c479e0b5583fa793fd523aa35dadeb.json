{"ast":null,"code":"var _jsxFileName = \"/Users/emilyhuang/Documents/CSC309/groupProject/team06/src/components/TableRow/index.js\";\nimport React from 'react';\nimport { withStyles } from '@material-ui/core';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport DoneIcon from '@material-ui/icons/Done';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst useStyles = () => ({\n  formControl_root: {\n    minWidth: \"10vw\"\n  }\n});\n\nclass TableRowComp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // true -> displays the edit and delete buttons, false -> hides the edit and delete buttons\n      hover: false,\n      // true -> displays done button, false -> displays edit button \n      edit: this.props.rowForAdd,\n      // holds the input values when the row is being edited, key = heading, value = data \n      update: {},\n      // holds the data value that will be updated when dates are selected on the calendar\n      date: \"\",\n      // holds an array (same length as headings) that will show if there is an error or not \n      // if cell is empty (for adding) => null, if error => true, if no error => false \n      error: this.props.rowForAdd ? Array.from({\n        length: this.props.headings.length\n      }, () => null) : Array.from({\n        length: this.props.headings.length\n      }, () => false)\n    };\n  }\n\n  clearState() {\n    this.setState({\n      update: {}\n    });\n    this.setState({\n      date: \"\"\n    });\n    this.setState({\n      error: this.props.rowForAdd ? Array.from({\n        length: this.props.headings.length\n      }, () => null) : Array.from({\n        length: this.props.headings.length\n      }, () => false)\n    });\n  }\n\n  displayIcons() {\n    this.setState({\n      hover: true\n    });\n  }\n\n  hideIcons() {\n    this.setState({\n      hover: false\n    });\n  }\n\n  toggleEdit() {\n    this.setState({\n      edit: !this.state.edit\n    });\n  } // updates the state as the value in the inputs are being changed \n\n\n  textFieldOnChangeHandler(e, headings, index) {\n    this.state.update[headings[index]] = e.target.value;\n    this.setState({\n      update: this.state.update\n    }); // if nothing is in the cell, put null error \n\n    if (e.target.value == \"\" || e.target.value === null) this.state.error[index] = null;else {\n      switch (this.props.options[index]) {\n        case \"Number\":\n        case \"Percentage\":\n          // error if input not a number, or less than 0 \n          if (!isNaN(e.target.value) && parseFloat(e.target.value) >= 0) this.state.error[index] = false;else this.state.error[index] = true;\n          break;\n\n        case \"Dollar\":\n          if (!isNaN(e.target.value)) this.state.error[index] = false;else this.state.error[index] = true;\n          break;\n\n        case \"Any\":\n          // I think description can be anything? \n          this.state.error[index] = false;\n          break;\n\n        case \"Select\":\n          this.state.error[index] = false;\n          break;\n\n        default:\n          throw \"Please specify a valid option.\";\n      }\n    }\n    this.setState({\n      error: this.state.error\n    });\n  } // updates the state for the date as the inputs are being changed \n\n\n  dateFieldOnChangeHandler(e, heading, index) {\n    // if it's an invalid date, set it to the invalid data so Material UI knows to display \"incorrect date format\"\n    if (e == \"Invalid Date\") {\n      this.setState({\n        date: e\n      });\n      this.state.error[index] = true;\n      this.setState({\n        error: this.state.error\n      });\n      return;\n    } // if no dates have been inputted, set error state to null\n    else if (e == null) {\n        this.setState({\n          date: null\n        });\n        this.state.error[index] = null;\n        this.setState({\n          error: this.state.error\n        });\n        return;\n      } // converting the string to the appropriate format (MM/dd/yyyy)\n\n\n    const isoString = e.toISOString();\n    const year = isoString.substring(0, 4);\n    const month = isoString.substring(5, 7);\n    const day = isoString.substring(8, 10);\n    const newDate = month + '/' + day + '/' + year;\n    this.state.update[heading] = newDate;\n    this.setState({\n      date: newDate,\n      update: this.state.update\n    });\n    this.state.error[index] = false;\n    this.setState({\n      error: this.state.error\n    });\n  } // put the edited data into newRow \n\n\n  getUpdatedRow(headings, row) {\n    // if there has been an error in any cell\n    if (this.state.error.includes(null) || this.state.error.includes(true)) return null;\n    const newRow = {}; // use the new values if user edited the input, otherwise use previous values\n\n    headings.map((heading, index) => {\n      if (heading in this.state.update) {\n        if (this.props.options[index] == \"Date\") newRow[heading] = this.state.date;else newRow[heading] = this.state.update[heading];\n      } else newRow[heading] = row[heading];\n    });\n    return newRow;\n  } // a switch function that displays different kind of cells when editing depending on the options \n\n\n  renderEditCell(option, heading, index) {\n    switch (option) {\n      case \"Date\":\n        return /*#__PURE__*/_jsxDEV(MuiPickersUtilsProvider, {\n          utils: DateFnsUtils,\n          children: /*#__PURE__*/_jsxDEV(KeyboardDatePicker // disableToolbar\n          , {\n            id: \"date-picker-inline\",\n            label: heading,\n            variant: \"inline\",\n            format: \"MM/dd/yyyy\",\n            value: this.state.date == \"\" ? this.props.row[heading] : this.state.date,\n            onChange: e => this.dateFieldOnChangeHandler(e, heading, index)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 24\n        }, this);\n\n      case \"Select\":\n        return /*#__PURE__*/_jsxDEV(FormControl, {\n          classes: {\n            root: this.props.classes.formControl_root\n          },\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            id: \"simple-select-label\",\n            children: \"Category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            error: this.state.error[index],\n            id: \"simple-select\",\n            defaultValue: this.props.rowForAdd ? \"\" : this.props.row[heading],\n            onChange: e => this.textFieldOnChangeHandler(e, this.props.headings, index),\n            children: this.props.categories.map(category => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: category,\n              children: category\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 29\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 24\n        }, this);\n\n      case \"Number\":\n        return /*#__PURE__*/_jsxDEV(TextField, {\n          error: this.state.error[index],\n          helperText: this.state.error[index] ? `Please enter: ${option}` : \"\",\n          id: \"standard-basic\",\n          label: this.props.headings[index],\n          defaultValue: this.props.rowForAdd ? \"\" : this.props.row[heading],\n          onChange: e => this.textFieldOnChangeHandler(e, this.props.headings, index) // InputProps={{ startAdornment: <InputAdornment position=\"start\">$</InputAdornment> }}\n          ,\n          children: \" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 24\n        }, this);\n\n      default:\n        return /*#__PURE__*/_jsxDEV(TextField, {\n          error: this.state.error[index],\n          helperText: this.state.error[index] ? `Please enter: ${option}` : \"\",\n          id: \"standard-basic\",\n          label: this.props.headings[index],\n          defaultValue: this.props.rowForAdd ? \"\" : this.props.row[heading],\n          onChange: e => this.textFieldOnChangeHandler(e, this.props.headings, index),\n          children: \" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 24\n        }, this);\n    }\n  }\n\n  renderCellValue(option, value) {\n    switch (option) {\n      case \"Percentage\":\n        return value + '%';\n\n      case \"Dollar\":\n        if (value > 0) return '$' + value;else {\n          // if value is a string (used by spendings)\n          if (typeof value === \"string\") return '-' + '$' + value.slice(1); // if value is a float (used by investments)\n          else return '-' + '$' + Math.abs(value);\n        }\n\n      default:\n        return value;\n    }\n  }\n\n  doneIconOnClick() {\n    if (this.props.rowForAdd) {\n      const newRow = this.getUpdatedRow(this.props.headings, this.props.row);\n\n      if (newRow === null) {\n        this.props.addSnacks(\"addError\");\n        return;\n      }\n\n      this.props.addRow(newRow);\n      this.props.addSnacks(\"addSuccess\");\n      this.toggleEdit();\n      this.props.toggleAdd();\n    } else {\n      const newRow = this.getUpdatedRow(this.props.headings, this.props.row);\n\n      if (newRow === null) {\n        this.props.addSnacks(\"editError\");\n        return;\n      }\n\n      this.props.editRow(this.props.row, newRow);\n      this.props.addSnacks(\"editSuccess\");\n      this.toggleEdit();\n    }\n  }\n\n  render() {\n    const {\n      headings,\n      row,\n      options,\n      categories,\n      addRow,\n      editRow,\n      removeRow,\n      rowForAdd,\n      addSnacks,\n      toggleAdd\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(TableRow, {\n      hover: true,\n      onMouseEnter: () => this.displayIcons(),\n      onMouseLeave: () => this.hideIcons(),\n      children: [headings.map((heading, index) => /*#__PURE__*/_jsxDEV(TableCell, {\n        children: this.state.edit ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.renderEditCell(options[index], heading, index)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.renderCellValue(options[index], row[heading])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(TableCell, {\n        children: this.state.hover ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"icons\",\n          children: [this.state.edit ? /*#__PURE__*/_jsxDEV(IconButton, {\n            \"aria-label\": \"done\",\n            onClick: () => this.doneIconOnClick(),\n            children: /*#__PURE__*/_jsxDEV(DoneIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(IconButton, {\n            \"aria-label\": \"edit\",\n            onClick: () => this.toggleEdit(),\n            children: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            \"aria-label\": \"delete\",\n            onClick: () => {\n              if (rowForAdd) toggleAdd();else {\n                removeRow(row);\n                addSnacks(\"deleteSuccess\");\n                this.clearState();\n              }\n              if (this.state.edit) this.toggleEdit();\n            },\n            children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 25\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default withStyles(useStyles)(TableRowComp);","map":{"version":3,"sources":["/Users/emilyhuang/Documents/CSC309/groupProject/team06/src/components/TableRow/index.js"],"names":["React","withStyles","TableCell","TableRow","TextField","IconButton","EditIcon","DeleteIcon","DoneIcon","MuiPickersUtilsProvider","KeyboardDatePicker","DateFnsUtils","MenuItem","Select","InputLabel","FormControl","InputAdornment","useStyles","formControl_root","minWidth","TableRowComp","Component","constructor","props","state","hover","edit","rowForAdd","update","date","error","Array","from","length","headings","clearState","setState","displayIcons","hideIcons","toggleEdit","textFieldOnChangeHandler","e","index","target","value","options","isNaN","parseFloat","dateFieldOnChangeHandler","heading","isoString","toISOString","year","substring","month","day","newDate","getUpdatedRow","row","includes","newRow","map","renderEditCell","option","root","classes","categories","category","renderCellValue","slice","Math","abs","doneIconOnClick","addSnacks","addRow","toggleAdd","editRow","render","removeRow"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AAEA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AAEA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,QAAP,MAAqB,yBAArB;AAEA,SAASC,uBAAT,EAAkCC,kBAAlC,QAA4D,sBAA5D;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;;;AAEA,MAAMC,SAAS,GAAG,OAAO;AACrBC,EAAAA,gBAAgB,EAAE;AACdC,IAAAA,QAAQ,EAAE;AADI;AADG,CAAP,CAAlB;;AAMA,MAAMC,YAAN,SAA2BpB,KAAK,CAACqB,SAAjC,CAA2C;AAEvCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACT;AACAC,MAAAA,KAAK,EAAE,KAFE;AAGT;AACAC,MAAAA,IAAI,EAAE,KAAKH,KAAL,CAAWI,SAJR;AAKT;AACAC,MAAAA,MAAM,EAAE,EANC;AAOT;AACAC,MAAAA,IAAI,EAAE,EARG;AAST;AACA;AACAC,MAAAA,KAAK,EAAE,KAAKP,KAAL,CAAWI,SAAX,GAAuBI,KAAK,CAACC,IAAN,CAAW;AAAEC,QAAAA,MAAM,EAAE,KAAKV,KAAL,CAAWW,QAAX,CAAoBD;AAA9B,OAAX,EAAmD,MAAM,IAAzD,CAAvB,GACHF,KAAK,CAACC,IAAN,CAAW;AAAEC,QAAAA,MAAM,EAAE,KAAKV,KAAL,CAAWW,QAAX,CAAoBD;AAA9B,OAAX,EAAmD,MAAM,KAAzD;AAZK,KAAb;AAeH;;AAEDE,EAAAA,UAAU,GAAG;AACT,SAAKC,QAAL,CAAc;AAAER,MAAAA,MAAM,EAAE;AAAV,KAAd;AACA,SAAKQ,QAAL,CAAc;AAAEP,MAAAA,IAAI,EAAE;AAAR,KAAd;AACA,SAAKO,QAAL,CAAc;AACVN,MAAAA,KAAK,EAAE,KAAKP,KAAL,CAAWI,SAAX,GAAuBI,KAAK,CAACC,IAAN,CAAW;AAAEC,QAAAA,MAAM,EAAE,KAAKV,KAAL,CAAWW,QAAX,CAAoBD;AAA9B,OAAX,EAAmD,MAAM,IAAzD,CAAvB,GACHF,KAAK,CAACC,IAAN,CAAW;AAAEC,QAAAA,MAAM,EAAE,KAAKV,KAAL,CAAWW,QAAX,CAAoBD;AAA9B,OAAX,EAAmD,MAAM,KAAzD;AAFM,KAAd;AAIH;;AAEDI,EAAAA,YAAY,GAAG;AACX,SAAKD,QAAL,CAAc;AAAEX,MAAAA,KAAK,EAAE;AAAT,KAAd;AACH;;AAEDa,EAAAA,SAAS,GAAG;AACR,SAAKF,QAAL,CAAc;AAAEX,MAAAA,KAAK,EAAE;AAAT,KAAd;AACH;;AAEDc,EAAAA,UAAU,GAAG;AACT,SAAKH,QAAL,CAAc;AAAEV,MAAAA,IAAI,EAAE,CAAC,KAAKF,KAAL,CAAWE;AAApB,KAAd;AACH,GAzCsC,CA2CvC;;;AACAc,EAAAA,wBAAwB,CAACC,CAAD,EAAIP,QAAJ,EAAcQ,KAAd,EAAqB;AAEzC,SAAKlB,KAAL,CAAWI,MAAX,CAAkBM,QAAQ,CAACQ,KAAD,CAA1B,IAAqCD,CAAC,CAACE,MAAF,CAASC,KAA9C;AACA,SAAKR,QAAL,CAAc;AAAER,MAAAA,MAAM,EAAE,KAAKJ,KAAL,CAAWI;AAArB,KAAd,EAHyC,CAKzC;;AACA,QAAIa,CAAC,CAACE,MAAF,CAASC,KAAT,IAAkB,EAAlB,IAAwBH,CAAC,CAACE,MAAF,CAASC,KAAT,KAAmB,IAA/C,EAAqD,KAAKpB,KAAL,CAAWM,KAAX,CAAiBY,KAAjB,IAA0B,IAA1B,CAArD,KAEK;AACD,cAAQ,KAAKnB,KAAL,CAAWsB,OAAX,CAAmBH,KAAnB,CAAR;AAEI,aAAK,QAAL;AACA,aAAK,YAAL;AACI;AACA,cAAI,CAACI,KAAK,CAACL,CAAC,CAACE,MAAF,CAASC,KAAV,CAAN,IAA0BG,UAAU,CAACN,CAAC,CAACE,MAAF,CAASC,KAAV,CAAV,IAA8B,CAA5D,EAA+D,KAAKpB,KAAL,CAAWM,KAAX,CAAiBY,KAAjB,IAA0B,KAA1B,CAA/D,KACK,KAAKlB,KAAL,CAAWM,KAAX,CAAiBY,KAAjB,IAA0B,IAA1B;AACL;;AACJ,aAAK,QAAL;AACI,cAAI,CAACI,KAAK,CAACL,CAAC,CAACE,MAAF,CAASC,KAAV,CAAV,EAA4B,KAAKpB,KAAL,CAAWM,KAAX,CAAiBY,KAAjB,IAA0B,KAA1B,CAA5B,KACK,KAAKlB,KAAL,CAAWM,KAAX,CAAiBY,KAAjB,IAA0B,IAA1B;AACL;;AACJ,aAAK,KAAL;AACI;AACA,eAAKlB,KAAL,CAAWM,KAAX,CAAiBY,KAAjB,IAA0B,KAA1B;AACA;;AACJ,aAAK,QAAL;AACI,eAAKlB,KAAL,CAAWM,KAAX,CAAiBY,KAAjB,IAA0B,KAA1B;AACA;;AACJ;AACI,gBAAO,gCAAP;AApBR;AAuBH;AAED,SAAKN,QAAL,CAAc;AAAEN,MAAAA,KAAK,EAAE,KAAKN,KAAL,CAAWM;AAApB,KAAd;AAEH,GAhFsC,CAkFvC;;;AACAkB,EAAAA,wBAAwB,CAACP,CAAD,EAAIQ,OAAJ,EAAaP,KAAb,EAAoB;AAExC;AACA,QAAID,CAAC,IAAI,cAAT,EAAyB;AACrB,WAAKL,QAAL,CAAc;AAAEP,QAAAA,IAAI,EAAEY;AAAR,OAAd;AACA,WAAKjB,KAAL,CAAWM,KAAX,CAAiBY,KAAjB,IAA0B,IAA1B;AACA,WAAKN,QAAL,CAAc;AAAEN,QAAAA,KAAK,EAAE,KAAKN,KAAL,CAAWM;AAApB,OAAd;AACA;AACH,KALD,CAOA;AAPA,SAQK,IAAIW,CAAC,IAAI,IAAT,EAAe;AAChB,aAAKL,QAAL,CAAc;AAAEP,UAAAA,IAAI,EAAE;AAAR,SAAd;AACA,aAAKL,KAAL,CAAWM,KAAX,CAAiBY,KAAjB,IAA0B,IAA1B;AACA,aAAKN,QAAL,CAAc;AAAEN,UAAAA,KAAK,EAAE,KAAKN,KAAL,CAAWM;AAApB,SAAd;AACA;AACH,OAhBuC,CAkBxC;;;AACA,UAAMoB,SAAS,GAAGT,CAAC,CAACU,WAAF,EAAlB;AACA,UAAMC,IAAI,GAAGF,SAAS,CAACG,SAAV,CAAoB,CAApB,EAAuB,CAAvB,CAAb;AACA,UAAMC,KAAK,GAAGJ,SAAS,CAACG,SAAV,CAAoB,CAApB,EAAuB,CAAvB,CAAd;AACA,UAAME,GAAG,GAAGL,SAAS,CAACG,SAAV,CAAoB,CAApB,EAAuB,EAAvB,CAAZ;AACA,UAAMG,OAAO,GAAGF,KAAK,GAAG,GAAR,GAAcC,GAAd,GAAoB,GAApB,GAA0BH,IAA1C;AAEA,SAAK5B,KAAL,CAAWI,MAAX,CAAkBqB,OAAlB,IAA6BO,OAA7B;AACA,SAAKpB,QAAL,CAAc;AAAEP,MAAAA,IAAI,EAAE2B,OAAR;AAAiB5B,MAAAA,MAAM,EAAE,KAAKJ,KAAL,CAAWI;AAApC,KAAd;AAEA,SAAKJ,KAAL,CAAWM,KAAX,CAAiBY,KAAjB,IAA0B,KAA1B;AACA,SAAKN,QAAL,CAAc;AAAEN,MAAAA,KAAK,EAAE,KAAKN,KAAL,CAAWM;AAApB,KAAd;AAEH,GAlHsC,CAoHvC;;;AACA2B,EAAAA,aAAa,CAACvB,QAAD,EAAWwB,GAAX,EAAgB;AAEzB;AACA,QAAI,KAAKlC,KAAL,CAAWM,KAAX,CAAiB6B,QAAjB,CAA0B,IAA1B,KAAmC,KAAKnC,KAAL,CAAWM,KAAX,CAAiB6B,QAAjB,CAA0B,IAA1B,CAAvC,EAAwE,OAAO,IAAP;AAExE,UAAMC,MAAM,GAAG,EAAf,CALyB,CAOzB;;AACA1B,IAAAA,QAAQ,CAAC2B,GAAT,CAAa,CAACZ,OAAD,EAAUP,KAAV,KAAoB;AAC7B,UAAIO,OAAO,IAAI,KAAKzB,KAAL,CAAWI,MAA1B,EAAkC;AAC9B,YAAI,KAAKL,KAAL,CAAWsB,OAAX,CAAmBH,KAAnB,KAA6B,MAAjC,EAAyCkB,MAAM,CAACX,OAAD,CAAN,GAAkB,KAAKzB,KAAL,CAAWK,IAA7B,CAAzC,KACK+B,MAAM,CAACX,OAAD,CAAN,GAAkB,KAAKzB,KAAL,CAAWI,MAAX,CAAkBqB,OAAlB,CAAlB;AACR,OAHD,MAIKW,MAAM,CAACX,OAAD,CAAN,GAAkBS,GAAG,CAACT,OAAD,CAArB;AACR,KAND;AAQA,WAAOW,MAAP;AAEH,GAvIsC,CAyIvC;;;AACAE,EAAAA,cAAc,CAACC,MAAD,EAASd,OAAT,EAAkBP,KAAlB,EAAyB;AAEnC,YAAQqB,MAAR;AACI,WAAK,MAAL;AACI,4BAAO,QAAC,uBAAD;AAAyB,UAAA,KAAK,EAAEpD,YAAhC;AAAA,iCACH,QAAC,kBAAD,CACI;AADJ;AAEI,YAAA,EAAE,EAAC,oBAFP;AAGI,YAAA,KAAK,EAAEsC,OAHX;AAII,YAAA,OAAO,EAAC,QAJZ;AAKI,YAAA,MAAM,EAAC,YALX;AAMI,YAAA,KAAK,EAAE,KAAKzB,KAAL,CAAWK,IAAX,IAAmB,EAAnB,GAAwB,KAAKN,KAAL,CAAWmC,GAAX,CAAeT,OAAf,CAAxB,GAAkD,KAAKzB,KAAL,CAAWK,IANxE;AAOI,YAAA,QAAQ,EAAGY,CAAD,IAAO,KAAKO,wBAAL,CAA8BP,CAA9B,EAAiCQ,OAAjC,EAA0CP,KAA1C;AAPrB;AAAA;AAAA;AAAA;AAAA;AADG;AAAA;AAAA;AAAA;AAAA,gBAAP;;AAYJ,WAAK,QAAL;AACI,4BAAO,QAAC,WAAD;AAAa,UAAA,OAAO,EAAE;AAAEsB,YAAAA,IAAI,EAAE,KAAKzC,KAAL,CAAW0C,OAAX,CAAmB/C;AAA3B,WAAtB;AAAA,kCACH,QAAC,UAAD;AAAY,YAAA,EAAE,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADG,eAEH,QAAC,MAAD;AACI,YAAA,KAAK,EAAE,KAAKM,KAAL,CAAWM,KAAX,CAAiBY,KAAjB,CADX;AAEI,YAAA,EAAE,EAAC,eAFP;AAGI,YAAA,YAAY,EAAE,KAAKnB,KAAL,CAAWI,SAAX,GAAuB,EAAvB,GAA4B,KAAKJ,KAAL,CAAWmC,GAAX,CAAeT,OAAf,CAH9C;AAII,YAAA,QAAQ,EAAGR,CAAD,IAAO,KAAKD,wBAAL,CAA8BC,CAA9B,EAAiC,KAAKlB,KAAL,CAAWW,QAA5C,EAAsDQ,KAAtD,CAJrB;AAAA,sBAMK,KAAKnB,KAAL,CAAW2C,UAAX,CAAsBL,GAAtB,CAA0BM,QAAQ,iBAC/B,QAAC,QAAD;AACI,cAAA,KAAK,EAAEA,QADX;AAAA,wBAEKA;AAFL;AAAA;AAAA;AAAA;AAAA,oBADH;AANL;AAAA;AAAA;AAAA;AAAA,kBAFG;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;;AAkBJ,WAAK,QAAL;AACI,4BAAO,QAAC,SAAD;AACH,UAAA,KAAK,EAAE,KAAK3C,KAAL,CAAWM,KAAX,CAAiBY,KAAjB,CADJ;AAEH,UAAA,UAAU,EAAE,KAAKlB,KAAL,CAAWM,KAAX,CAAiBY,KAAjB,IAA2B,iBAAgBqB,MAAO,EAAlD,GAAsD,EAF/D;AAGH,UAAA,EAAE,EAAC,gBAHA;AAIH,UAAA,KAAK,EAAE,KAAKxC,KAAL,CAAWW,QAAX,CAAoBQ,KAApB,CAJJ;AAKH,UAAA,YAAY,EAAE,KAAKnB,KAAL,CAAWI,SAAX,GAAuB,EAAvB,GAA4B,KAAKJ,KAAL,CAAWmC,GAAX,CAAeT,OAAf,CALvC;AAMH,UAAA,QAAQ,EAAGR,CAAD,IAAO,KAAKD,wBAAL,CAA8BC,CAA9B,EAAiC,KAAKlB,KAAL,CAAWW,QAA5C,EAAsDQ,KAAtD,CANd,CAOP;AAPO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;;AAUJ;AACI,4BAAO,QAAC,SAAD;AACH,UAAA,KAAK,EAAE,KAAKlB,KAAL,CAAWM,KAAX,CAAiBY,KAAjB,CADJ;AAEH,UAAA,UAAU,EAAE,KAAKlB,KAAL,CAAWM,KAAX,CAAiBY,KAAjB,IAA2B,iBAAgBqB,MAAO,EAAlD,GAAsD,EAF/D;AAGH,UAAA,EAAE,EAAC,gBAHA;AAIH,UAAA,KAAK,EAAE,KAAKxC,KAAL,CAAWW,QAAX,CAAoBQ,KAApB,CAJJ;AAKH,UAAA,YAAY,EAAE,KAAKnB,KAAL,CAAWI,SAAX,GAAuB,EAAvB,GAA4B,KAAKJ,KAAL,CAAWmC,GAAX,CAAeT,OAAf,CALvC;AAMH,UAAA,QAAQ,EAAGR,CAAD,IAAO,KAAKD,wBAAL,CAA8BC,CAA9B,EAAiC,KAAKlB,KAAL,CAAWW,QAA5C,EAAsDQ,KAAtD,CANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AA7CR;AAwDH;;AAED0B,EAAAA,eAAe,CAACL,MAAD,EAASnB,KAAT,EAAgB;AAC3B,YAAQmB,MAAR;AACI,WAAK,YAAL;AACI,eAAOnB,KAAK,GAAG,GAAf;;AACJ,WAAK,QAAL;AACI,YAAIA,KAAK,GAAG,CAAZ,EAAe,OAAO,MAAMA,KAAb,CAAf,KACK;AACD;AACA,cAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B,OAAO,MAAM,GAAN,GAAYA,KAAK,CAACyB,KAAN,CAAY,CAAZ,CAAnB,CAA/B,CACA;AADA,eAEK,OAAO,MAAM,GAAN,GAAYC,IAAI,CAACC,GAAL,CAAS3B,KAAT,CAAnB;AACR;;AACL;AACI,eAAOA,KAAP;AAZR;AAcH;;AAED4B,EAAAA,eAAe,GAAG;AAEd,QAAI,KAAKjD,KAAL,CAAWI,SAAf,EAA0B;AACtB,YAAMiC,MAAM,GAAG,KAAKH,aAAL,CAAmB,KAAKlC,KAAL,CAAWW,QAA9B,EAAwC,KAAKX,KAAL,CAAWmC,GAAnD,CAAf;;AACA,UAAIE,MAAM,KAAK,IAAf,EAAqB;AACjB,aAAKrC,KAAL,CAAWkD,SAAX,CAAqB,UAArB;AACA;AACH;;AACD,WAAKlD,KAAL,CAAWmD,MAAX,CAAkBd,MAAlB;AACA,WAAKrC,KAAL,CAAWkD,SAAX,CAAqB,YAArB;AACA,WAAKlC,UAAL;AACA,WAAKhB,KAAL,CAAWoD,SAAX;AACH,KAVD,MAYK;AACD,YAAMf,MAAM,GAAG,KAAKH,aAAL,CAAmB,KAAKlC,KAAL,CAAWW,QAA9B,EAAwC,KAAKX,KAAL,CAAWmC,GAAnD,CAAf;;AACA,UAAIE,MAAM,KAAK,IAAf,EAAqB;AACjB,aAAKrC,KAAL,CAAWkD,SAAX,CAAqB,WAArB;AACA;AACH;;AACD,WAAKlD,KAAL,CAAWqD,OAAX,CAAmB,KAAKrD,KAAL,CAAWmC,GAA9B,EAAmCE,MAAnC;AACA,WAAKrC,KAAL,CAAWkD,SAAX,CAAqB,aAArB;AACA,WAAKlC,UAAL;AACH;AAEJ;;AAEDsC,EAAAA,MAAM,GAAG;AAEL,UAAM;AAAE3C,MAAAA,QAAF;AAAYwB,MAAAA,GAAZ;AAAiBb,MAAAA,OAAjB;AAA0BqB,MAAAA,UAA1B;AAAsCQ,MAAAA,MAAtC;AAA8CE,MAAAA,OAA9C;AAAuDE,MAAAA,SAAvD;AAAkEnD,MAAAA,SAAlE;AAA6E8C,MAAAA,SAA7E;AAAwFE,MAAAA;AAAxF,QAAsG,KAAKpD,KAAjH;AAEA,wBACI,QAAC,QAAD;AAAU,MAAA,KAAK,MAAf;AACI,MAAA,YAAY,EAAE,MAAM,KAAKc,YAAL,EADxB;AAEI,MAAA,YAAY,EAAE,MAAM,KAAKC,SAAL,EAFxB;AAAA,iBAKKJ,QAAQ,CAAC2B,GAAT,CAAa,CAACZ,OAAD,EAAUP,KAAV,kBAEV,QAAC,SAAD;AAAA,kBAEK,KAAKlB,KAAL,CAAWE,IAAX,gBAEG;AAAA,oBACK,KAAKoC,cAAL,CAAoBjB,OAAO,CAACH,KAAD,CAA3B,EAAoCO,OAApC,EAA6CP,KAA7C;AADL;AAAA;AAAA;AAAA;AAAA,gBAFH,gBAMG;AAAA,oBACK,KAAK0B,eAAL,CAAqBvB,OAAO,CAACH,KAAD,CAA5B,EAAqCgB,GAAG,CAACT,OAAD,CAAxC;AADL;AAAA;AAAA;AAAA;AAAA;AARR;AAAA;AAAA;AAAA;AAAA,cAFH,CALL,eAyBI,QAAC,SAAD;AAAA,kBAEK,KAAKzB,KAAL,CAAWC,KAAX,gBAEG;AAAK,UAAA,SAAS,EAAC,OAAf;AAAA,qBAEK,KAAKD,KAAL,CAAWE,IAAX,gBAEG,QAAC,UAAD;AACI,0BAAW,MADf;AAEI,YAAA,OAAO,EAAE,MAAM,KAAK8C,eAAL,EAFnB;AAAA,mCAII,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,kBAFH,gBASG,QAAC,UAAD;AACI,0BAAW,MADf;AAEI,YAAA,OAAO,EAAE,MAAM,KAAKjC,UAAL,EAFnB;AAAA,mCAII,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,kBAXR,eAoBI,QAAC,UAAD;AACI,0BAAW,QADf;AAEI,YAAA,OAAO,EAAE,MAAM;AACX,kBAAIZ,SAAJ,EAAegD,SAAS,GAAxB,KACK;AACDG,gBAAAA,SAAS,CAACpB,GAAD,CAAT;AACAe,gBAAAA,SAAS,CAAC,eAAD,CAAT;AACA,qBAAKtC,UAAL;AACH;AACD,kBAAI,KAAKX,KAAL,CAAWE,IAAf,EAAqB,KAAKa,UAAL;AACxB,aAVL;AAAA,mCAWI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAXJ;AAAA;AAAA;AAAA;AAAA,kBApBJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFH,GAsCK;AAxCV;AAAA;AAAA;AAAA;AAAA,cAzBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AA2EH;;AAjUsC;;AAqU3C,eAAetC,UAAU,CAACgB,SAAD,CAAV,CAAsBG,YAAtB,CAAf","sourcesContent":["import React from 'react';\nimport { withStyles } from '@material-ui/core'\n\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport TextField from '@material-ui/core/TextField';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport DoneIcon from '@material-ui/icons/Done';\n\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputAdornment from '@material-ui/core/InputAdornment';\n\nconst useStyles = () => ({\n    formControl_root: {\n        minWidth: \"10vw\",\n    }\n})\n\nclass TableRowComp extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            // true -> displays the edit and delete buttons, false -> hides the edit and delete buttons\n            hover: false,\n            // true -> displays done button, false -> displays edit button \n            edit: this.props.rowForAdd,\n            // holds the input values when the row is being edited, key = heading, value = data \n            update: {},\n            // holds the data value that will be updated when dates are selected on the calendar\n            date: \"\",\n            // holds an array (same length as headings) that will show if there is an error or not \n            // if cell is empty (for adding) => null, if error => true, if no error => false \n            error: this.props.rowForAdd ? Array.from({ length: this.props.headings.length }, () => null) :\n                Array.from({ length: this.props.headings.length }, () => false)\n        }\n\n    }\n\n    clearState() {\n        this.setState({ update: {} })\n        this.setState({ date: \"\" })\n        this.setState({\n            error: this.props.rowForAdd ? Array.from({ length: this.props.headings.length }, () => null) :\n                Array.from({ length: this.props.headings.length }, () => false)\n        })\n    }\n\n    displayIcons() {\n        this.setState({ hover: true })\n    }\n\n    hideIcons() {\n        this.setState({ hover: false })\n    }\n\n    toggleEdit() {\n        this.setState({ edit: !this.state.edit })\n    }\n\n    // updates the state as the value in the inputs are being changed \n    textFieldOnChangeHandler(e, headings, index) {\n\n        this.state.update[headings[index]] = e.target.value\n        this.setState({ update: this.state.update })\n\n        // if nothing is in the cell, put null error \n        if (e.target.value == \"\" || e.target.value === null) this.state.error[index] = null\n\n        else {\n            switch (this.props.options[index]) {\n\n                case \"Number\":\n                case \"Percentage\":\n                    // error if input not a number, or less than 0 \n                    if (!isNaN(e.target.value) && parseFloat(e.target.value) >= 0) this.state.error[index] = false\n                    else this.state.error[index] = true\n                    break\n                case \"Dollar\":\n                    if (!isNaN(e.target.value)) this.state.error[index] = false\n                    else this.state.error[index] = true\n                    break\n                case \"Any\":\n                    // I think description can be anything? \n                    this.state.error[index] = false\n                    break\n                case \"Select\":\n                    this.state.error[index] = false\n                    break\n                default:\n                    throw (\"Please specify a valid option.\")\n\n            }\n        }\n\n        this.setState({ error: this.state.error })\n\n    }\n\n    // updates the state for the date as the inputs are being changed \n    dateFieldOnChangeHandler(e, heading, index) {\n\n        // if it's an invalid date, set it to the invalid data so Material UI knows to display \"incorrect date format\"\n        if (e == \"Invalid Date\") {\n            this.setState({ date: e })\n            this.state.error[index] = true\n            this.setState({ error: this.state.error })\n            return\n        }\n\n        // if no dates have been inputted, set error state to null\n        else if (e == null) {\n            this.setState({ date: null })\n            this.state.error[index] = null\n            this.setState({ error: this.state.error })\n            return\n        }\n\n        // converting the string to the appropriate format (MM/dd/yyyy)\n        const isoString = e.toISOString()\n        const year = isoString.substring(0, 4)\n        const month = isoString.substring(5, 7)\n        const day = isoString.substring(8, 10)\n        const newDate = month + '/' + day + '/' + year\n\n        this.state.update[heading] = newDate\n        this.setState({ date: newDate, update: this.state.update })\n\n        this.state.error[index] = false\n        this.setState({ error: this.state.error })\n\n    }\n\n    // put the edited data into newRow \n    getUpdatedRow(headings, row) {\n\n        // if there has been an error in any cell\n        if (this.state.error.includes(null) || this.state.error.includes(true)) return null\n\n        const newRow = {}\n\n        // use the new values if user edited the input, otherwise use previous values\n        headings.map((heading, index) => {\n            if (heading in this.state.update) {\n                if (this.props.options[index] == \"Date\") newRow[heading] = this.state.date\n                else newRow[heading] = this.state.update[heading]\n            }\n            else newRow[heading] = row[heading]\n        })\n\n        return newRow\n\n    }\n\n    // a switch function that displays different kind of cells when editing depending on the options \n    renderEditCell(option, heading, index) {\n\n        switch (option) {\n            case \"Date\":\n                return <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                    <KeyboardDatePicker\n                        // disableToolbar\n                        id=\"date-picker-inline\"\n                        label={heading}\n                        variant=\"inline\"\n                        format=\"MM/dd/yyyy\"\n                        value={this.state.date == \"\" ? this.props.row[heading] : this.state.date}\n                        onChange={(e) => this.dateFieldOnChangeHandler(e, heading, index)}\n                    />\n                </MuiPickersUtilsProvider>\n\n            case \"Select\":\n                return <FormControl classes={{ root: this.props.classes.formControl_root }}>\n                    <InputLabel id=\"simple-select-label\">Category</InputLabel>\n                    <Select\n                        error={this.state.error[index]}\n                        id=\"simple-select\"\n                        defaultValue={this.props.rowForAdd ? \"\" : this.props.row[heading]}\n                        onChange={(e) => this.textFieldOnChangeHandler(e, this.props.headings, index)}\n                    >\n                        {this.props.categories.map(category =>\n                            <MenuItem\n                                value={category}>\n                                {category}\n                            </MenuItem>\n                        )}\n\n                    </Select>\n                </FormControl>\n\n            case \"Number\":\n                return <TextField\n                    error={this.state.error[index]}\n                    helperText={this.state.error[index] ? `Please enter: ${option}` : \"\"}\n                    id=\"standard-basic\"\n                    label={this.props.headings[index]}\n                    defaultValue={this.props.rowForAdd ? \"\" : this.props.row[heading]}\n                    onChange={(e) => this.textFieldOnChangeHandler(e, this.props.headings, index)}\n                // InputProps={{ startAdornment: <InputAdornment position=\"start\">$</InputAdornment> }}\n                > </TextField>\n\n            default:\n                return <TextField\n                    error={this.state.error[index]}\n                    helperText={this.state.error[index] ? `Please enter: ${option}` : \"\"}\n                    id=\"standard-basic\"\n                    label={this.props.headings[index]}\n                    defaultValue={this.props.rowForAdd ? \"\" : this.props.row[heading]}\n                    onChange={(e) => this.textFieldOnChangeHandler(e, this.props.headings, index)}\n                > </TextField>\n\n        }\n\n    }\n\n    renderCellValue(option, value) {\n        switch (option) {\n            case \"Percentage\":\n                return value + '%'\n            case \"Dollar\":\n                if (value > 0) return '$' + value\n                else {\n                    // if value is a string (used by spendings)\n                    if (typeof value === \"string\") return '-' + '$' + value.slice(1)\n                    // if value is a float (used by investments)\n                    else return '-' + '$' + Math.abs(value)\n                }\n            default:\n                return value\n        }\n    }\n\n    doneIconOnClick() {\n\n        if (this.props.rowForAdd) {\n            const newRow = this.getUpdatedRow(this.props.headings, this.props.row)\n            if (newRow === null) {\n                this.props.addSnacks(\"addError\")\n                return\n            }\n            this.props.addRow(newRow)\n            this.props.addSnacks(\"addSuccess\")\n            this.toggleEdit()\n            this.props.toggleAdd()\n        }\n\n        else {\n            const newRow = this.getUpdatedRow(this.props.headings, this.props.row)\n            if (newRow === null) {\n                this.props.addSnacks(\"editError\")\n                return\n            }\n            this.props.editRow(this.props.row, newRow)\n            this.props.addSnacks(\"editSuccess\")\n            this.toggleEdit()\n        }\n\n    }\n\n    render() {\n\n        const { headings, row, options, categories, addRow, editRow, removeRow, rowForAdd, addSnacks, toggleAdd } = this.props;\n\n        return (\n            <TableRow hover\n                onMouseEnter={() => this.displayIcons()}\n                onMouseLeave={() => this.hideIcons()}\n            >\n\n                {headings.map((heading, index) =>\n\n                    <TableCell>\n\n                        {this.state.edit ?\n\n                            <div>\n                                {this.renderEditCell(options[index], heading, index)}\n                            </div>\n                            :\n                            <div>\n                                {this.renderCellValue(options[index], row[heading])}\n                            </div>\n\n                        }\n\n                    </TableCell>\n\n                )}\n\n                <TableCell>\n\n                    {this.state.hover ?\n\n                        <div className=\"icons\">\n\n                            {this.state.edit ?\n\n                                <IconButton\n                                    aria-label=\"done\"\n                                    onClick={() => this.doneIconOnClick()}\n                                >\n                                    <DoneIcon />\n                                </IconButton>\n                                :\n                                <IconButton\n                                    aria-label=\"edit\"\n                                    onClick={() => this.toggleEdit()}\n                                >\n                                    <EditIcon />\n                                </IconButton>\n\n                            }\n\n                            <IconButton\n                                aria-label=\"delete\"\n                                onClick={() => {\n                                    if (rowForAdd) toggleAdd()\n                                    else {\n                                        removeRow(row)\n                                        addSnacks(\"deleteSuccess\")\n                                        this.clearState()\n                                    }\n                                    if (this.state.edit) this.toggleEdit()\n                                }} >\n                                <DeleteIcon />\n                            </IconButton>\n\n                        </div>\n\n                        : null\n                    }\n\n                </TableCell>\n\n            </TableRow >\n\n        )\n\n    }\n\n}\n\nexport default withStyles(useStyles)(TableRowComp);"]},"metadata":{},"sourceType":"module"}