{"ast":null,"code":"var _jsxFileName = \"/Users/emilyhuang/Documents/CSC309/groupProject/team06/src/components/Investments/PieChart.js\";\n//Tutorials followed:\n//https://stackoverflow.com/questions/33924150/how-to-access-canvas-context-in-react\n//https://stackoverflow.com/questions/27736288/how-to-fill-the-whole-canvas-with-specific-color\n//https://medium.com/@pdx.lucasm/canvas-with-react-js-32e133c05258\n//https://gist.github.com/prof3ssorSt3v3/7f16fe9397c013d364f2d4484cad3ca8\n//https://stackoverflow.com/questions/30790010/html-canvas-hover-text\n//https://stackoverflow.com/questions/6270785/how-to-determine-whether-a-point-x-y-is-contained-within-an-arc-section-of-a-c\n//https://stackoverflow.com/questions/2142535/how-to-clear-the-canvas-for-redrawing\n//https://stackoverflow.com/questions/25630035/javascript-getboundingclientrect-changes-while-scrolling\n//https://stackoverflow.com/questions/43193341/how-to-generate-random-pastel-or-brighter-color-in-javascript\nimport React, { useRef, useEffect, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PieChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      canvasWidth: 600,\n      canvasHeight: 600,\n      slices: [],\n      radius: 125\n    };\n\n    this.randomPastelColourCode = () => {\n      return \"hsl(\" + 360 * Math.random() + ',' + (25 + 70 * Math.random()) + '%,' + (80 + 10 * Math.random()) + '%)';\n    };\n\n    this.drawSlices = () => {\n      //!!!Ian: bookCost is the total amount spend on that stock/in that category\n      const {\n        listToDisplay\n      } = this.props;\n      let startAngle = 0;\n      let radius = this.state.radius;\n      let cx = this.state.canvasWidth / 2;\n      let cy = this.state.canvasHeight / 2;\n      let total = listToDisplay.reduce((ttl, stock) => {\n        // return ttl + (stock.bookCost)\n        return ttl + stock[\"Book Cost\"];\n      }, 0); //console.log(total)\n\n      listToDisplay.forEach(element => {\n        //here the slices are draw backwards...(clockwise) so makesure to push into the list properly\n        this.context.lineWidth = 3;\n        this.context.strokeStyle = '#fafafa';\n        this.context.fillStyle = this.randomPastelColourCode();\n        let sliceColour = this.context.fillStyle;\n        this.context.beginPath(); // draw the pie wedges\n        //let endAngle = ((element.bookCost / total) * Math.PI * 2) + startAngle;\n\n        let endAngle = element[\"Book Cost\"] / total * Math.PI * 2 + startAngle;\n        this.context.moveTo(cx, cy);\n        this.context.arc(cx, cy, radius, startAngle, endAngle);\n        this.context.lineTo(cx, cy);\n        this.context.fill();\n        this.context.stroke();\n        this.context.closePath(); // add the labels\n\n        this.context.beginPath();\n        this.context.font = '20px Helvetica, Calibri';\n        this.context.textAlign = 'center';\n        this.context.fillStyle = 'rebeccapurple'; // 1.5 * radius is the length of the Hypotenuse\n\n        let theta = (startAngle + endAngle) / 2.0;\n        let deltaY = Math.sin(theta) * 1.5 * radius;\n        let deltaX = Math.cos(theta) * 1.5 * radius; //point to label\n\n        this.context.strokeStyle = 'rebeccapurple';\n        this.context.moveTo(cx + deltaX / 1.65, cy + deltaY / 1.65);\n        this.context.lineTo(4 * deltaX / 5 + cx, 4 * deltaY / 5 + cy);\n        this.context.stroke(); //!!!Ian: name is the name of the stock category\n        // let percentage = Math.round(+((element.bookCost*100)/total));\n\n        let percentage = Math.round(+(element[\"Book Cost\"] * 100 / total));\n        this.context.fillText(element.name + \" (\" + percentage + \"%)\", deltaX + cx, deltaY + cy); //this.context.fillText(percentage + \"%\", (deltaX*1.3)+cx, (deltaY*1.4)+cy);\n\n        this.context.closePath(); //store the slice information\n\n        this.state.slices.push({\n          \"name\": element.name,\n          \"colour\": sliceColour,\n          \"startAngle\": 2.0 * Math.PI - endAngle,\n          //since arc draws the slice backwards in clockwise fasion\n          \"endAngle\": 2.0 * Math.PI - startAngle,\n          \"drawStartAngle\": startAngle,\n          \"drawEndAngle\": endAngle,\n          //\"bookCost\": element.bookCost\n          \"bookCost\": element[\"Book Cost\"]\n        });\n        startAngle = endAngle;\n      }); //console.log(this.state.slices)\n    };\n\n    this.drawAccentedSlice = (slice, accented) => {\n      let radius = parseFloat(this.state.radius);\n      let cx = parseFloat(this.state.canvasWidth / 2);\n      let cy = parseFloat(this.state.canvasHeight / 2);\n      this.context.strokeStyle = '#fafafa';\n      this.context.fillStyle = slice.colour;\n      this.context.beginPath(); // draw the pie wedges\n\n      this.context.moveTo(cx, cy);\n      this.context.arc(cx, cy, radius, slice.drawStartAngle, slice.drawEndAngle);\n      this.context.lineTo(cx, cy);\n      this.context.fill();\n      this.context.stroke();\n      this.context.closePath();\n      this.context.beginPath();\n      this.context.font = '20px Helvetica, Calibri';\n      this.context.textAlign = 'center';\n      this.context.fillStyle = 'rebeccapurple';\n      this.context.strokeStyle = 'rebeccapurple';\n      let theta = (slice.drawStartAngle + slice.drawEndAngle) / 2.0;\n      let deltaY = parseFloat(Math.sin(theta) * 1.5 * radius);\n      let deltaX = parseFloat(Math.cos(theta) * 1.5 * radius); // add the labels\n\n      if (accented == 1) {\n        // this.context.moveTo(cx+deltaX/1.65, cy+deltaY/1.65);\n        // this.context.lineTo((4.0*deltaX/5)+cx, (4.0*deltaY/5)+cy);\n        // this.context.stroke();\n        //!!!Ian: name is the name of the stock category\n        // this.context.fillText(\"$\" + slice.bookCost, deltaX/2+cx, deltaY/2+cy);\n        this.context.fillText(\"$\" + slice[\"Book Cost\"], deltaX / 2 + cx, deltaY / 2 + cy);\n        this.context.closePath();\n      } else {\n        this.context.translate(0.05, 0.05);\n        this.context.moveTo(parseFloat(cx + deltaX / 1.65), parseFloat(cy + deltaY / 1.65));\n        this.context.lineTo(parseFloat(4.0 * deltaX / 5 + cx), parseFloat(4.0 * deltaY / 5 + cy));\n        this.context.lineWidth = 3;\n        this.context.stroke();\n        this.context.closePath();\n        this.context.translate(-0.05, -0.05);\n      }\n    };\n\n    const {\n      pieChartSize,\n      pieChartRadius\n    } = this.props;\n    this.state.canvasHeight = pieChartSize;\n    this.state.canvasWidth = pieChartSize;\n    this.state.radius = pieChartRadius;\n    this.pieChartRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    console.log(\"Did mount!\");\n    this.context = this.pieChartRef.current.getContext('2d');\n    let elem = document.getElementById('pieChartCanvas');\n    const {\n      listToDisplay\n    } = this.props;\n    console.log(listToDisplay);\n    this.drawSlices(); //NOTE!!!!!! get bounding client rect gets the positions according to the window not the document!!!\n\n    let rect = elem.getBoundingClientRect(); //add event listeners...I had to add it to a component so I used this one\n\n    document.addEventListener('mousewheel', e => {\n      rect = elem.getBoundingClientRect();\n    });\n    document.addEventListener('mousemove', e => {\n      let mouseX = parseInt(e.clientX);\n      let mouseY = parseInt(e.clientY);\n      let cx = this.state.canvasWidth / 2;\n      let cy = this.state.canvasHeight / 2; //mouse is relative to the window, rect is relative to the window\n      //cx and cy are fixed\n      //relativeX and relative Y are the distances from the center of the \"pie\"(no +ve or -ve signs)\n\n      let relativeX;\n      let relativeY;\n      let angle; // quadrant I & II:\n\n      if (mouseY > rect.y && mouseY < rect.y + cy) {\n        relativeY = cy + rect.y - mouseY; //quadrant I:\n\n        if (mouseX > rect.x + cx && mouseX < rect.x + 2 * cx) {\n          // console.log(mouseX);\n          // console.log(rect.x + cx);\n          relativeX = mouseX - (cx + rect.x);\n          angle = Math.atan(relativeY / relativeX); // console.log(relativeX)\n          // console.log(relativeY)\n          // console.log(\"quad I\")\n          // console.log(angle)\n          //quadrant II:\n        } else if (mouseX > rect.x && mouseX < rect.x + cx) {\n          relativeX = cx + rect.x - mouseX;\n          angle = Math.PI - Math.atan(relativeY / relativeX); // console.log(relativeX)\n          // console.log(relativeY)\n          // console.log(\"quad II\")\n          // console.log(angle)\n        } //quadrant III & IV:\n\n      } else if (mouseY > cy + rect.y && mouseY < rect.y + 2 * cy) {\n        relativeY = mouseY - (cy + rect.y); //quadrant IV:\n\n        if (mouseX > rect.x + cx && mouseX < rect.x + 2 * cx) {\n          relativeX = mouseX - (cx + rect.x);\n          angle = 2 * Math.PI - Math.atan(relativeY / relativeX); // console.log(relativeX)\n          // console.log(relativeY)\n          // console.log(\"quad IV\")\n          // console.log(angle)\n          //quadrant III:\n        } else if (mouseX > rect.x && mouseX < rect.x + cx) {\n          relativeX = cx + rect.x - mouseX;\n          angle = Math.PI + Math.atan(relativeY / relativeX); // console.log(relativeX)\n          // console.log(relativeY)\n          // console.log(\"quad III\")\n          // console.log(angle)\n        }\n      } //console.log(angle)\n\n\n      let distanceOk = false;\n      let distance = Math.sqrt(relativeX * relativeX + relativeY * relativeY);\n\n      if (distance < this.state.radius) {\n        distanceOk = true; // console.log(distance)\n        // console.log(\"Distance ok\")\n      }\n\n      for (let i = 0; i < this.state.slices.length; i++) {\n        let s = this.state.slices[i]; //check if the mouse angle matches with this slice\n\n        if (s.startAngle < angle && angle < s.endAngle) {\n          if (distanceOk) {\n            this.drawAccentedSlice(s, 1);\n            setTimeout(this.drawAccentedSlice, 1000, s, 0);\n            distanceOk = false;\n          }\n        } else continue;\n      }\n    });\n  }\n\n  componentDidUpdate() {\n    this.context = this.pieChartRef.current.getContext('2d');\n    let elem = document.getElementById('pieChartCanvas');\n    let rect = elem.getBoundingClientRect();\n    const context = this.context; //clear canvas\n\n    context.clearRect(0, 0, rect.width, rect.height);\n    context.beginPath(); //clear slices\n\n    this.state.slices = [];\n    this.drawSlices(); //redraw\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"pieChartCanvas\",\n      ref: this.pieChartRef,\n      width: this.state.canvasWidth,\n      height: this.state.canvasHeight\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default PieChart;","map":{"version":3,"sources":["/Users/emilyhuang/Documents/CSC309/groupProject/team06/src/components/Investments/PieChart.js"],"names":["React","useRef","useEffect","useReducer","PieChart","Component","constructor","props","state","canvasWidth","canvasHeight","slices","radius","randomPastelColourCode","Math","random","drawSlices","listToDisplay","startAngle","cx","cy","total","reduce","ttl","stock","forEach","element","context","lineWidth","strokeStyle","fillStyle","sliceColour","beginPath","endAngle","PI","moveTo","arc","lineTo","fill","stroke","closePath","font","textAlign","theta","deltaY","sin","deltaX","cos","percentage","round","fillText","name","push","drawAccentedSlice","slice","accented","parseFloat","colour","drawStartAngle","drawEndAngle","translate","pieChartSize","pieChartRadius","pieChartRef","createRef","componentDidMount","console","log","current","getContext","elem","document","getElementById","rect","getBoundingClientRect","addEventListener","e","mouseX","parseInt","clientX","mouseY","clientY","relativeX","relativeY","angle","y","x","atan","distanceOk","distance","sqrt","i","length","s","setTimeout","componentDidUpdate","clearRect","width","height","render"],"mappings":"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","sourcesContent":["//Tutorials followed:\n//https://stackoverflow.com/questions/33924150/how-to-access-canvas-context-in-react\n//https://stackoverflow.com/questions/27736288/how-to-fill-the-whole-canvas-with-specific-color\n//https://medium.com/@pdx.lucasm/canvas-with-react-js-32e133c05258\n//https://gist.github.com/prof3ssorSt3v3/7f16fe9397c013d364f2d4484cad3ca8\n//https://stackoverflow.com/questions/30790010/html-canvas-hover-text\n//https://stackoverflow.com/questions/6270785/how-to-determine-whether-a-point-x-y-is-contained-within-an-arc-section-of-a-c\n//https://stackoverflow.com/questions/2142535/how-to-clear-the-canvas-for-redrawing\n//https://stackoverflow.com/questions/25630035/javascript-getboundingclientrect-changes-while-scrolling\n//https://stackoverflow.com/questions/43193341/how-to-generate-random-pastel-or-brighter-color-in-javascript\n\n\nimport React, { useRef, useEffect, useReducer } from 'react'\n\nclass PieChart extends React.Component {\n    state = {\n        canvasWidth: 600,\n        canvasHeight: 600,\n        slices: [],\n        radius: 125,\n    }\n\n    constructor(props) {\n        super(props);\n        const {pieChartSize, pieChartRadius} = this.props;\n        this.state.canvasHeight = pieChartSize;\n        this.state.canvasWidth = pieChartSize;\n        this.state.radius = pieChartRadius\n        this.pieChartRef = React.createRef();\n    }\n\n    randomPastelColourCode = () => {\n        return \"hsl(\" + 360 * Math.random() + ',' +\n             (25 + 70 * Math.random()) + '%,' + \n             (80 + 10 * Math.random()) + '%)'\n    }\n\n    drawSlices = () => {\n        //!!!Ian: bookCost is the total amount spend on that stock/in that category\n        const {listToDisplay} = this.props\n        let startAngle = 0; \n        let radius = this.state.radius;\n        let cx = this.state.canvasWidth/2;\n        let cy = this.state.canvasHeight/2;\n        let total = listToDisplay.reduce( (ttl, stock) => {\n            // return ttl + (stock.bookCost)\n            return ttl + (stock[\"Book Cost\"])\n        }, 0);\n        \n        //console.log(total)\n\n        listToDisplay.forEach(element => {\n            //here the slices are draw backwards...(clockwise) so makesure to push into the list properly\n           \n            this.context.lineWidth = 3;\n            this.context.strokeStyle = '#fafafa';\n            this.context.fillStyle = this.randomPastelColourCode();\n            let sliceColour = this.context.fillStyle;\n            this.context.beginPath();\n            \n            // draw the pie wedges\n            //let endAngle = ((element.bookCost / total) * Math.PI * 2) + startAngle;\n            let endAngle = ((element[\"Book Cost\"] / total) * Math.PI * 2) + startAngle;\n            this.context.moveTo(cx, cy);\n            this.context.arc(cx, cy, radius, startAngle, endAngle);\n            this.context.lineTo(cx, cy);\n            this.context.fill();\n            this.context.stroke();\n            this.context.closePath();\n            \n            // add the labels\n            this.context.beginPath();\n            this.context.font = '20px Helvetica, Calibri';\n            this.context.textAlign = 'center';\n            this.context.fillStyle = 'rebeccapurple';\n            // 1.5 * radius is the length of the Hypotenuse\n            let theta = (startAngle + endAngle) / 2.0;\n            let deltaY = Math.sin(theta) * 1.5 * radius;\n            let deltaX = Math.cos(theta) * 1.5 * radius;\n\n            //point to label\n            this.context.strokeStyle = 'rebeccapurple';\n            this.context.moveTo(cx+deltaX/1.65, cy+deltaY/1.65);\n            this.context.lineTo((4*deltaX/5)+cx, (4*deltaY/5)+cy);\n            this.context.stroke();\n\n            //!!!Ian: name is the name of the stock category\n            // let percentage = Math.round(+((element.bookCost*100)/total));\n            let percentage = Math.round(+((element[\"Book Cost\"]*100)/total));\n\n            this.context.fillText(element.name + \" (\" + percentage + \"%)\", deltaX+cx, deltaY+cy);\n            \n            //this.context.fillText(percentage + \"%\", (deltaX*1.3)+cx, (deltaY*1.4)+cy);\n            this.context.closePath();\n            \n\n            //store the slice information\n            this.state.slices.push({ \n                    \"name\" : element.name,\n                    \"colour\" : sliceColour,\n                    \"startAngle\" : (2.0*Math.PI) - endAngle,    //since arc draws the slice backwards in clockwise fasion\n                    \"endAngle\": (2.0*Math.PI) - startAngle,\n                    \"drawStartAngle\": startAngle,\n                    \"drawEndAngle\": endAngle,\n                    //\"bookCost\": element.bookCost\n                    \"bookCost\": element[\"Book Cost\"]\n            });\n            startAngle = endAngle;\n        });\n        //console.log(this.state.slices)\n    }\n\n    drawAccentedSlice = (slice, accented) => {\n        let radius = parseFloat(this.state.radius);\n        let cx = parseFloat(this.state.canvasWidth/2);\n        let cy = parseFloat(this.state.canvasHeight/2);\n        this.context.strokeStyle = '#fafafa';\n        this.context.fillStyle = slice.colour;\n        \n        this.context.beginPath();\n        \n        // draw the pie wedges\n        this.context.moveTo(cx, cy);\n        this.context.arc(cx, cy, radius, slice.drawStartAngle, slice.drawEndAngle);\n        this.context.lineTo(cx, cy);\n        this.context.fill();\n        this.context.stroke();\n        this.context.closePath();\n\n        this.context.beginPath();  \n        this.context.font = '20px Helvetica, Calibri';\n        this.context.textAlign = 'center';\n        this.context.fillStyle = 'rebeccapurple';\n        this.context.strokeStyle = 'rebeccapurple';\n\n        let theta = (slice.drawStartAngle + slice.drawEndAngle) / 2.0;\n        let deltaY = parseFloat(Math.sin(theta) * 1.5 * radius);\n        let deltaX = parseFloat(Math.cos(theta) * 1.5 * radius);\n        \n\n        \n        // add the labels\n        if(accented == 1){\n            // this.context.moveTo(cx+deltaX/1.65, cy+deltaY/1.65);\n            // this.context.lineTo((4.0*deltaX/5)+cx, (4.0*deltaY/5)+cy);\n            // this.context.stroke();\n\n            //!!!Ian: name is the name of the stock category\n            // this.context.fillText(\"$\" + slice.bookCost, deltaX/2+cx, deltaY/2+cy);\n            this.context.fillText(\"$\" + slice[\"Book Cost\"], deltaX/2+cx, deltaY/2+cy);\n\n            this.context.closePath();\n        }else{\n            this.context.translate(0.05, 0.05);\n            this.context.moveTo(parseFloat(cx+deltaX/1.65), parseFloat(cy+deltaY/1.65));\n            this.context.lineTo(parseFloat((4.0*deltaX/5)+cx), parseFloat((4.0*deltaY/5)+cy));\n            this.context.lineWidth = 3;\n            this.context.stroke();\n            this.context.closePath();\n            this.context.translate(-0.05, -0.05);\n        }\n        \n    }\n\n    componentDidMount() {\n\n        console.log(\"Did mount!\")\n        this.context = this.pieChartRef.current.getContext('2d');\n        let elem = document.getElementById('pieChartCanvas');\n\n        const {listToDisplay} = this.props\n        console.log(listToDisplay)\n        this.drawSlices();\n\n        //NOTE!!!!!! get bounding client rect gets the positions according to the window not the document!!!\n        let rect = elem.getBoundingClientRect();\n        \n        //add event listeners...I had to add it to a component so I used this one\n        document.addEventListener('mousewheel', (e) => {\n            rect = elem.getBoundingClientRect();\n        })\n\n        document.addEventListener('mousemove', (e) => {\n    \n            let mouseX=parseInt(e.clientX);\n            let mouseY=parseInt(e.clientY);\n            let cx = this.state.canvasWidth/2;\n            let cy = this.state.canvasHeight/2;\n            //mouse is relative to the window, rect is relative to the window\n            //cx and cy are fixed\n            //relativeX and relative Y are the distances from the center of the \"pie\"(no +ve or -ve signs)\n            let relativeX;\n            let relativeY;\n            let angle;\n      \n            // quadrant I & II:\n            if(mouseY > rect.y && mouseY < (rect.y + cy)){\n                relativeY = (cy + rect.y ) - mouseY;\n                //quadrant I:\n                if(mouseX > (rect.x + cx) && mouseX < rect.x + (2*cx)){\n                    // console.log(mouseX);\n                    // console.log(rect.x + cx);\n                    relativeX = mouseX - (cx + rect.x);\n                    angle = Math.atan(relativeY/relativeX);\n\n                    // console.log(relativeX)\n                    // console.log(relativeY)\n                    // console.log(\"quad I\")\n                    // console.log(angle)\n                //quadrant II:\n                }else if(mouseX > rect.x && mouseX < (rect.x + cx)){\n                    relativeX = (cx + rect.x) - mouseX;\n                    angle = Math.PI - Math.atan(relativeY/relativeX);\n                    // console.log(relativeX)\n                    // console.log(relativeY)\n                    // console.log(\"quad II\")\n                    // console.log(angle)\n                }\n            //quadrant III & IV:\n            }else if (mouseY > cy + rect.y && mouseY < rect.y + (2*cy)){\n                relativeY = mouseY - (cy + rect.y);\n                //quadrant IV:\n                if(mouseX > (rect.x + cx) && mouseX < rect.x + (2*cx)){\n                    relativeX = mouseX - (cx + rect.x);\n                    angle = (2*Math.PI) - Math.atan(relativeY/relativeX);\n                    // console.log(relativeX)\n                    // console.log(relativeY)\n                    // console.log(\"quad IV\")\n                    // console.log(angle)\n                //quadrant III:\n                }else if(mouseX > rect.x && mouseX < (rect.x + cx)){\n                    relativeX = (cx + rect.x) - mouseX;\n                    angle = Math.PI + Math.atan(relativeY/relativeX);\n                    // console.log(relativeX)\n                    // console.log(relativeY)\n                    // console.log(\"quad III\")\n                    // console.log(angle)\n                }\n            }\n\n            //console.log(angle)\n            let distanceOk = false;\n        \n            let distance = Math.sqrt( (relativeX * relativeX ) +  ( relativeY * relativeY));\n            if(distance < this.state.radius){\n                distanceOk = true;\n                // console.log(distance)\n                // console.log(\"Distance ok\")\n            }\n\n            for(let i=0;i<this.state.slices.length;i++){\n                let s=this.state.slices[i];\n                //check if the mouse angle matches with this slice\n                if(s.startAngle < angle && angle < s.endAngle){\n                    \n                    if(distanceOk){\n                        this.drawAccentedSlice(s, 1);\n                        setTimeout(this.drawAccentedSlice, 1000, s, 0);\n                        distanceOk = false;\n                    }\n                }else continue;\n            }\n        }); \n    }\n\n    componentDidUpdate() {        \n        this.context = this.pieChartRef.current.getContext('2d');\n        let elem = document.getElementById('pieChartCanvas');\n        let rect = elem.getBoundingClientRect();\n        \n        const context = this.context;\n\n        //clear canvas\n        context.clearRect(0, 0, rect.width, rect.height);\n        context.beginPath();\n\n        //clear slices\n        this.state.slices = [];\n        \n        this.drawSlices();//redraw\n    }\n    \n    render() {\n        return (\n          <canvas id = \"pieChartCanvas\" ref={this.pieChartRef} width = {this.state.canvasWidth} height = {this.state.canvasHeight} />\n        )\n    }\n}\n\nexport default PieChart"]},"metadata":{},"sourceType":"module"}