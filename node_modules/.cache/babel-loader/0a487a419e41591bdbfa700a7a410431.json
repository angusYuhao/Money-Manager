{"ast":null,"code":"var _jsxFileName = \"/Users/emilyhuang/Documents/CSC309/groupProject/team06/src/components/TableRow/index.js\";\nimport React from 'react';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport DoneIcon from '@material-ui/icons/Done';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TableRowComp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // true -> displays the edit and delete buttons, false -> hides the edit and delete buttons\n      hover: false,\n      // true -> displays done button, false -> displays edit button \n      edit: this.props.rowForAdd,\n      // holds the input values when the row is being edited, key = heading, value = data \n      update: {}\n    };\n  }\n\n  displayIcons() {\n    this.setState({\n      hover: true\n    });\n  }\n\n  hideIcons() {\n    this.setState({\n      hover: false\n    });\n  }\n\n  toggleEdit() {\n    this.setState({\n      edit: !this.state.edit\n    });\n  } // updates the state as the value in the inputs are being changed \n\n\n  textFieldOnChangeHandler(e, headings, index) {\n    this.state.update[headings[index]] = e.target.value;\n    this.setState({\n      update: this.state.update\n    });\n  } // put the edited data into newRow \n\n\n  getUpdatedRow(headings, row) {\n    const newRow = []; // use the new values if user edited the input, otherwise use previous values\n\n    headings.map((heading, index) => {\n      if (heading in this.state.update) newRow.push(this.state.update[heading]);else newRow.push(row[index]);\n    });\n    return newRow;\n  }\n\n  render() {\n    const {\n      headings,\n      row,\n      addRow,\n      editRow,\n      removeRow,\n      rowForAdd,\n      toggleAdd\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(TableRow, {\n      hover: true,\n      onMouseEnter: () => this.displayIcons(),\n      onMouseLeave: () => this.hideIcons(),\n      children: [row.map((value, index) => /*#__PURE__*/_jsxDEV(TableCell, {\n        children: this.state.edit ? /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"standard-basic\",\n          label: headings[index],\n          defaultValue: value,\n          onChange: e => this.textFieldOnChangeHandler(e, headings, index),\n          children: \" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 29\n        }, this) : value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(TableCell, {\n        children: this.state.hover ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"icons\",\n          children: [this.state.edit ? /*#__PURE__*/_jsxDEV(IconButton, {\n            \"aria-label\": \"done\",\n            children: rowForAdd ? /*#__PURE__*/_jsxDEV(DoneIcon, {\n              onClick: () => {\n                const newRow = this.getUpdatedRow(headings, row);\n                addRow(newRow);\n                this.toggleEdit();\n                toggleAdd();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 41\n            }, this) : /*#__PURE__*/_jsxDEV(DoneIcon, {\n              onClick: () => {\n                const newRow = this.getUpdatedRow(headings, row);\n                editRow(row, newRow);\n                this.toggleEdit();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(IconButton, {\n            \"aria-label\": \"edit\",\n            children: /*#__PURE__*/_jsxDEV(EditIcon, {\n              onClick: () => this.toggleEdit()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            \"aria-label\": \"delete\",\n            children: /*#__PURE__*/_jsxDEV(DeleteIcon, {\n              onClick: () => {\n                if (rowForAdd) toggleAdd();else removeRow(row);\n                if (this.state.edit) this.toggleEdit();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 25\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default TableRowComp;","map":{"version":3,"sources":["/Users/emilyhuang/Documents/CSC309/groupProject/team06/src/components/TableRow/index.js"],"names":["React","TableCell","TableRow","TextField","IconButton","EditIcon","DeleteIcon","DoneIcon","TableRowComp","Component","constructor","props","state","hover","edit","rowForAdd","update","displayIcons","setState","hideIcons","toggleEdit","textFieldOnChangeHandler","e","headings","index","target","value","getUpdatedRow","row","newRow","map","heading","push","render","addRow","editRow","removeRow","toggleAdd"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport TextField from '@material-ui/core/TextField';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport DoneIcon from '@material-ui/icons/Done';\n\nclass TableRowComp extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            // true -> displays the edit and delete buttons, false -> hides the edit and delete buttons\n            hover: false,\n            // true -> displays done button, false -> displays edit button \n            edit: this.props.rowForAdd,\n            // holds the input values when the row is being edited, key = heading, value = data \n            update: {}\n        }\n\n    }\n\n    displayIcons() {\n        this.setState({ hover: true })\n    }\n\n    hideIcons() {\n        this.setState({ hover: false })\n    }\n\n    toggleEdit() {\n        this.setState({ edit: !this.state.edit })\n    }\n\n    // updates the state as the value in the inputs are being changed \n    textFieldOnChangeHandler(e, headings, index) {\n        this.state.update[headings[index]] = e.target.value\n        this.setState({ update: this.state.update })\n    }\n\n    // put the edited data into newRow \n    getUpdatedRow(headings, row) {\n\n        const newRow = []\n\n        // use the new values if user edited the input, otherwise use previous values\n        headings.map((heading, index) => {\n            if (heading in this.state.update) newRow.push(this.state.update[heading])\n            else newRow.push(row[index])\n        })\n\n        return newRow\n\n    }\n\n    render() {\n\n        const { headings, row, addRow, editRow, removeRow, rowForAdd, toggleAdd } = this.props;\n\n        return (\n\n            <TableRow hover\n                onMouseEnter={() => this.displayIcons()}\n                onMouseLeave={() => this.hideIcons()}\n            >\n\n                {row.map((value, index) =>\n\n                    <TableCell>\n\n                        {this.state.edit ?\n\n                            <TextField\n                                id=\"standard-basic\"\n                                label={headings[index]}\n                                defaultValue={value}\n                                onChange={(e) => this.textFieldOnChangeHandler(e, headings, index)}\n                            > </TextField>\n\n                            : value\n                        }\n\n                    </TableCell>\n\n                )}\n\n                <TableCell>\n\n                    {this.state.hover ?\n\n                        <div className=\"icons\">\n\n                            {this.state.edit ?\n\n                                <IconButton aria-label=\"done\">\n\n                                    {rowForAdd ?\n\n                                        <DoneIcon onClick={() => {\n                                            const newRow = this.getUpdatedRow(headings, row)\n                                            addRow(newRow)\n                                            this.toggleEdit()\n                                            toggleAdd()\n                                        }} />\n                                        :\n                                        <DoneIcon onClick={() => {\n                                            const newRow = this.getUpdatedRow(headings, row)\n                                            editRow(row, newRow)\n                                            this.toggleEdit()\n                                        }} />\n\n                                    }\n\n                                </IconButton>\n                                :\n                                <IconButton aria-label=\"edit\">\n\n                                    <EditIcon onClick={() => this.toggleEdit()} />\n\n                                </IconButton>\n\n                            }\n\n                            <IconButton aria-label=\"delete\">\n                                <DeleteIcon onClick={() => {\n                                    if (rowForAdd) toggleAdd()\n                                    else removeRow(row)\n                                    if (this.state.edit) this.toggleEdit()\n                                }} />\n                            </IconButton>\n\n                        </div> \n                        \n                        : null\n                    }\n\n                </TableCell>\n\n            </TableRow>\n\n        )\n\n    }\n\n}\n\nexport default TableRowComp;"]},"metadata":{},"sourceType":"module"}