{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nexport function draw(ctx, total, slice, cx, cy, startAngle, radius) {\n  //set the styles before beginPath\n  ctx.fillStyle = randomHexColorCode();\n  ctx.lineWidth = 1;\n  ctx.strokeStyle = '#ffffff';\n  ctx.beginPath(); // draw the pie slices\n\n  let endAngle = slice.amount / total * Math.PI * 2 + startAngle;\n  ctx.moveTo(cx, cy);\n  ctx.arc(cx, cy, radius, startAngle, endAngle, false);\n  ctx.lineTo(cx, cy);\n  ctx.fill();\n  ctx.stroke();\n  ctx.closePath(); // add the labels\n\n  ctx.beginPath();\n  ctx.font = '20px Helvetica, Calibri';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rebeccapurple'; // midpoint between the two angles\n  // 1.5 * radius is the length of the Hypotenuse\n\n  let theta = (startAngle + endAngle) / 2;\n  let deltaY = Math.sin(theta) * 1.5 * radius;\n  let deltaX = Math.cos(theta) * 1.5 * radius;\n  ctx.fillText(slice.name, deltaX + cx, deltaY + cy);\n  let percentage = Math.round(+(slice.amount * 100 / total));\n  ctx.fillText(percentage + \"%\", deltaX * 1.3 + cx, deltaY * 1.4 + cy);\n  ctx.closePath();\n  startAngle = endAngle;\n}\nexport function randomHexColorCode() {\n  return \"#\" + Math.random().toString(16).slice(2, 8);\n}\n;\nexport function useCanvas() {\n  _s();\n\n  const canvasRef = useRef(null);\n  const [data] = useState([]);\n  useEffect(() => {\n    const canvasObj = canvasRef.current;\n    const ctx = canvasObj.getContext('2d');\n    canvasObj.width = 500;\n    canvasObj.height = 500;\n    width = // clear the canvas area before rendering the coordinates held in state\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n    let total = data.reduce((ttl, slice) => {\n      return ttl + slice.amount;\n    }, 0);\n    let cx = canvasObj.width / 2;\n    let cy = canvasObj.height / 2;\n    let startAngle = 0;\n    let radius = 100; // draw all coordinates held in state\n\n    data.forEach(slice => {\n      draw(ctx, total, slice, cx, cy, startAngle, radius);\n    });\n  });\n}\n\n_s(useCanvas, \"os7dWQ/Hi4mfS1fwcd7klmPstOQ=\");","map":{"version":3,"sources":["/Users/emilyhuang/Documents/CSC309/groupProject/team06/src/components/Investments/drawChart.js"],"names":["React","useState","useEffect","useRef","draw","ctx","total","slice","cx","cy","startAngle","radius","fillStyle","randomHexColorCode","lineWidth","strokeStyle","beginPath","endAngle","amount","Math","PI","moveTo","arc","lineTo","fill","stroke","closePath","font","textAlign","theta","deltaY","sin","deltaX","cos","fillText","name","percentage","round","random","toString","useCanvas","canvasRef","data","canvasObj","current","getContext","width","height","clearRect","canvasWidth","canvasHeight","reduce","ttl","forEach"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nexport function draw(ctx, total, slice, cx, cy, startAngle, radius){\n    //set the styles before beginPath\n    ctx.fillStyle = randomHexColorCode();\n    ctx.lineWidth = 1;\n    ctx.strokeStyle = '#ffffff';\n    ctx.beginPath();\n    \n    // draw the pie slices\n    let endAngle = ((slice.amount / total) * Math.PI * 2) + startAngle;\n    ctx.moveTo(cx, cy);\n    ctx.arc(cx, cy, radius, startAngle, endAngle, false);\n    ctx.lineTo(cx, cy);\n    ctx.fill();\n    ctx.stroke();\n    ctx.closePath();\n    \n    // add the labels\n    ctx.beginPath();\n    ctx.font = '20px Helvetica, Calibri';\n    ctx.textAlign = 'center';\n    ctx.fillStyle = 'rebeccapurple';\n    // midpoint between the two angles\n    // 1.5 * radius is the length of the Hypotenuse\n    let theta = (startAngle + endAngle) / 2;\n    let deltaY = Math.sin(theta) * 1.5 * radius;\n    let deltaX = Math.cos(theta) * 1.5 * radius;\n    ctx.fillText(slice.name, deltaX+cx, deltaY+cy);\n    let percentage = Math.round(+(slice.amount*100/total));\n    ctx.fillText(percentage + \"%\", (deltaX*1.3)+cx, (deltaY*1.4)+cy);\n    ctx.closePath();\n    startAngle = endAngle;\n}\n\n\nexport function randomHexColorCode(){\n    return \"#\" + Math.random().toString(16).slice(2, 8)\n};\n\nexport function useCanvas(){\n    const canvasRef = useRef(null);\n    const [data] = useState([]);\n    useEffect(() =>{\n        const canvasObj = canvasRef.current;\n        const ctx = canvasObj.getContext('2d');\n        canvasObj.width = 500;\n        canvasObj.height = 500;\n        width = \n        // clear the canvas area before rendering the coordinates held in state\n        ctx.clearRect( 0,0, canvasWidth, canvasHeight );\n\n        let total = data.reduce( (ttl, slice) => {\n            return ttl + slice.amount\n        }, 0);\n\n        let cx = canvasObj.width/2;\n        let cy = canvasObj.height/2;\n        let startAngle = 0;\n        let radius = 100;\n\n        // draw all coordinates held in state\n        data.forEach((slice)=>{draw(ctx, total, slice, cx, cy, startAngle, radius)});\n    });\n}"]},"metadata":{},"sourceType":"module"}