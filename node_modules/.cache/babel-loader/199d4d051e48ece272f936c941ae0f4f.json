{"ast":null,"code":"var _jsxFileName = \"/Users/emilyhuang/Documents/CSC309/groupProject/team06/src/components/Investments/BarChart.js\";\n//Tutorials followed:\nimport React, { useRef, useEffect, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BarChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      canvasWidth: 1200,\n      canvasHeight: 600,\n      bars: [],\n      graphWidth: 1000,\n      //style this in css to add padding on left and right\n      graphHeight: 500\n    };\n\n    this.randomPastelColourCode = () => {\n      return \"hsl(\" + 360 * Math.random() + ',' + (25 + 70 * Math.random()) + '%,' + (80 + 10 * Math.random()) + '%)';\n    };\n\n    this.drawBars = () => {\n      //!!!Ian: bookCost is the total amount spend on that stock/in that category\n      const {\n        listToDisplay,\n        col\n      } = this.props;\n      let total = listToDisplay.reduce((ttl, stock) => {\n        return ttl + parseFloat(stock[\"Book Cost\"]);\n      }, 0); //get the max and min gain loss stocks\n\n      const maxAmount = listToDisplay.reduce(function (prev, current) {\n        return prev[col] > current[col] ? prev : current;\n      });\n      console.log(maxAmount);\n      const minAmount = listToDisplay.reduce(function (prev, current) {\n        return prev[col] < current[col] ? prev : current;\n      });\n      console.log(minAmount); //based on the max and min values, calculate the corresponding ratios for the bar graph\n\n      let amountVertical = 0;\n      let axisPosition = 0;\n      let elem = document.getElementById('barChartCanvas');\n      let rect = elem.getBoundingClientRect();\n\n      if (minAmount.gainLoss < 0) {\n        console.log(\"DRAWING\");\n        amountVertical = maxAmount.gainLoss - minAmount.gainLoss;\n        axisPosition = maxAmount / amountVertical * this.graphHeight; // axisPosition = 1110;\n\n        this.context.lineWidth = 3;\n        this.context.strokeStyle = 'rebeccapurple';\n        this.context.fillStyle = 'rebeccapurple';\n        this.context.beginPath();\n        this.context.moveTo(100, 1200);\n        this.context.lineTo(1100, 1200);\n        this.context.stroke();\n        this.context.closePath();\n      } else {\n        amountVertical = maxAmount.gainLoss;\n      }\n    };\n\n    this.barChartRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    console.log(\"Did mount!\");\n    this.context = this.barChartRef.current.getContext('2d');\n    let elem = document.getElementById('barChartCanvas');\n    let rect = elem.getBoundingClientRect();\n    console.log(rect);\n    this.drawBars();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"barChartCanvas\",\n      ref: this.barChartRef,\n      width: this.state.canvasWidth,\n      height: this.state.canvasHeight\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default BarChart;","map":{"version":3,"sources":["/Users/emilyhuang/Documents/CSC309/groupProject/team06/src/components/Investments/BarChart.js"],"names":["React","useRef","useEffect","useReducer","BarChart","Component","constructor","props","state","canvasWidth","canvasHeight","bars","graphWidth","graphHeight","randomPastelColourCode","Math","random","drawBars","listToDisplay","col","total","reduce","ttl","stock","parseFloat","maxAmount","prev","current","console","log","minAmount","amountVertical","axisPosition","elem","document","getElementById","rect","getBoundingClientRect","gainLoss","context","lineWidth","strokeStyle","fillStyle","beginPath","moveTo","lineTo","stroke","closePath","barChartRef","createRef","componentDidMount","getContext","render"],"mappings":"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","sourcesContent":["//Tutorials followed:\n\nimport React, { useRef, useEffect, useReducer } from 'react'\n\nclass BarChart extends React.Component {\n    state = {\n        canvasWidth: 1200,\n        canvasHeight: 600,\n        bars: [],\n        graphWidth: 1000,//style this in css to add padding on left and right\n        graphHeight: 500,\n    }\n\n    constructor(props) {\n        super(props);\n        this.barChartRef = React.createRef();\n    }\n\n    randomPastelColourCode = () => {\n        return \"hsl(\" + 360 * Math.random() + ',' +\n             (25 + 70 * Math.random()) + '%,' + \n             (80 + 10 * Math.random()) + '%)'\n    }\n\n    drawBars = () => {\n        //!!!Ian: bookCost is the total amount spend on that stock/in that category\n        const {listToDisplay, col} = this.props\n        \n        \n        let total = listToDisplay.reduce( (ttl, stock) => {\n            return ttl + (parseFloat(stock[\"Book Cost\"]))\n        }, 0);\n\n        //get the max and min gain loss stocks\n        const maxAmount = listToDisplay.reduce(function(prev, current) {\n            return (prev[col] > current[col]) ? prev : current\n        })\n        console.log(maxAmount)\n\n        const minAmount = listToDisplay.reduce(function(prev, current) {\n            return (prev[col] < current[col]) ? prev : current\n        })\n        console.log(minAmount)\n        \n\n        //based on the max and min values, calculate the corresponding ratios for the bar graph\n        let amountVertical = 0;\n        let axisPosition = 0;\n        let elem = document.getElementById('barChartCanvas');\n        let rect = elem.getBoundingClientRect();\n        if(minAmount.gainLoss < 0){\n            console.log(\"DRAWING\")\n            amountVertical = maxAmount.gainLoss - minAmount.gainLoss;\n            axisPosition = (maxAmount/amountVertical) * this.graphHeight;\n            // axisPosition = 1110;\n            this.context.lineWidth = 3;\n            this.context.strokeStyle = 'rebeccapurple';\n            this.context.fillStyle = 'rebeccapurple';\n            this.context.beginPath();\n            this.context.moveTo(100, 1200);\n            this.context.lineTo(1100, 1200);\n            this.context.stroke();\n            this.context.closePath();\n        }else{\n            amountVertical = maxAmount.gainLoss; \n        }\n        \n\n    }\n\n  \n\n    componentDidMount() {\n        console.log(\"Did mount!\")\n        this.context = this.barChartRef.current.getContext('2d');\n        let elem = document.getElementById('barChartCanvas');\n        let rect = elem.getBoundingClientRect();\n        console.log(rect);\n        this.drawBars();\n        \n   \n    }\n\n    \n    render() {\n        return (\n          <canvas id = \"barChartCanvas\" ref={this.barChartRef} width = {this.state.canvasWidth} height = {this.state.canvasHeight}/>\n        )\n    }\n}\n\nexport default BarChart"]},"metadata":{},"sourceType":"module"}