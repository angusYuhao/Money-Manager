{"ast":null,"code":"var _jsxFileName = \"/Users/emilyhuang/Documents/CSC309/groupProject/team06/src/components/Investments/index.js\";\nimport React from 'react'; // import Input from './Input'\n// import StockList from './StockList'\n// import Canvas from './canvasExample'\n\nimport PieChart from './PieChart';\nimport BarChart from './BarChart';\nimport TableComp from '../Table';\nimport './investments.css';\nimport SortButton from './SortButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Investments extends React.Component {\n  // componentDidUpdate(undefined, prevState) {\n  //   // only update the account balance if any transaction has been modified\n  //   if (prevState.transactions_data != this.state.transactions_data) this.sumAccountBalance()\n  // }\n  constructor(props) {\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  changeSort(sortBy) {\n    console.log(\"Sorting!\");\n    this.state.sortBy = sortBy;\n    this.setState({\n      sortBy: this.state.sortBy\n    });\n    this.state.sortDes[sortBy] = !this.state.sortDes[sortBy];\n    this.setState({\n      sortDes: this.state.sortDes\n    });\n    this.sortStocks();\n  }\n\n  //   //student is the object to reference\n  // deleteStock = (stock) => {\n  //   //make var because not mutating this \n  //   console.log(\"Delete\")\n  //   const filteredStock = this.state.stockList.filter((s) => {\n  //     return s !== stock  //the one's we don't want to remove\n  //   })\n  //   this.setState({\n  //     stockList: filteredStock\n  //   })\n  // }\n  // editStock = (stock, valueToEdit) => {\n  //   console.log(\"Editing stock\")\n  //   console.log(stock)\n  //   console.log(\"Value\")\n  //   console.log(valueToEdit)\n  // }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"InvestmentContent\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"PieChart\",\n        children: /*#__PURE__*/_jsxDEV(PieChart, {\n          listToDisplay: this.state.stocklist_data,\n          pieChartSize: this.state.pieChartSize,\n          pieChartRadius: this.state.pieChartRadius\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"100vw\",\n          display: \"block\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Stocklist Table\",\n          width: \"100vw\",\n          children: /*#__PURE__*/_jsxDEV(TableComp // use the TableContainer class to style the table itself \n          , {\n            classes: {\n              TableContainer: 'TableContainer'\n            },\n            headings: this.state.stockList_headings,\n            data: this.state.stocklist_data,\n            options: this.state.stockList_options,\n            categories: this.state.stockList_categories,\n            addRow: this.addStock,\n            editRow: this.editStock,\n            removeRow: this.deleteStock\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"SortButtons\",\n        children: /*#__PURE__*/_jsxDEV(SortButton, {\n          categoryName: \"Name\",\n          callBackFunction: this.changeSort,\n          sortDes: this.state.sortDes,\n          sortBy: this.state.sortBy\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"BarChart\",\n        children: /*#__PURE__*/_jsxDEV(BarChart, {\n          listToDisplay: this.state.stockList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Investments;\n/*  */","map":{"version":3,"sources":["/Users/emilyhuang/Documents/CSC309/groupProject/team06/src/components/Investments/index.js"],"names":["React","PieChart","BarChart","TableComp","SortButton","Investments","Component","constructor","props","handleClick","bind","changeSort","sortBy","console","log","state","setState","sortDes","sortStocks","render","stocklist_data","pieChartSize","pieChartRadius","width","display","TableContainer","stockList_headings","stockList_options","stockList_categories","addStock","editStock","deleteStock","stockList"],"mappings":"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","sourcesContent":["import React from 'react';\n// import Input from './Input'\n// import StockList from './StockList'\n// import Canvas from './canvasExample'\nimport PieChart from './PieChart'\nimport BarChart from './BarChart'\nimport TableComp from '../Table'\nimport './investments.css'\nimport SortButton from './SortButton';\n\n\n\nclass Investments extends React.Component {\n\n  state = {\n    //new values for tables\n    stockList_headings: [\"Name\", \"Quantity\", \"Price\", \"Average Cost\", \"Market Value\", \"Book Cost\", \"Gain/Loss\", \"Percentage of portfolio\"],\n    stockList_options: [\"Any\", \"Number\", \"Number\", \"Number\", \"Number\", \"Number\", \"Number\", \"Number\"],\n    stockList_categories: [],\n    \n    stocklist_data: [{\"Name\": \"FB\", \"Quantity\": 20, \"Price\": 1.0, \"Average Cost\": 32.5,  \"Market Value\": 1, \"Book Cost\": 100, \"Gain/Loss\":100, \"Percentage of portfolio\":100 },\n    {\"Name\": \"GOOGL\", \"Quantity\": 3, \"Price\": 1.0, \"Average Cost\": 1523,  \"Market Value\": 1, \"Book Cost\": 37, \"Gain/Loss\":200, \"Percentage of portfolio\":100 },\n    {\"Name\": \"PDD\", \"Quantity\": 8, \"Price\": 1.0, \"Average Cost\": 170,  \"Market Value\": 1, \"Book Cost\": 45, \"Gain/Loss\":20, \"Percentage of portfolio\":100 },\n    {\"Name\": \"GME\", \"Quantity\": 4, \"Price\": 1.0, \"Average Cost\": 340,  \"Market Value\": 1, \"Book Cost\": 78, \"Gain/Loss\":-89, \"Percentage of portfolio\":100 },\n    {\"Name\": \"MSFT\", \"Quantity\": 4, \"Price\": 1.0, \"Average Cost\": 230,  \"Market Value\": 1, \"Book Cost\": 45, \"Gain/Loss\":-201, \"Percentage of portfolio\":100 },\n    {\"Name\": \"BABA\", \"Quantity\": 20, \"Price\": 1.0, \"Average Cost\": 220,  \"Market Value\": 1, \"Book Cost\": 46, \"Gain/Loss\":30, \"Percentage of portfolio\":100 },\n    {\"Name\": \"V\", \"Quantity\": 20, \"Price\": 1.0, \"Average Cost\": 220,  \"Market Value\": 1, \"Book Cost\": 50, \"Gain/Loss\":67, \"Percentage of portfolio\":100 },\n    {\"Name\": \"SHOP\", \"Quantity\": 20, \"Price\": 1.0, \"Average Cost\": 220,  \"Market Value\": 1, \"Book Cost\": 87, \"Gain/Loss\":3, \"Percentage of portfolio\":100 }],\n    \n    \n    //old values for tables\n    pieChartSize: 600,\n    pieChartRadius: 150,\n    totalAmountInvested: 100,\n    ticker: 0,\n    quantity: 0,\n    price: 0,\n    avgCost: 0,\n    mktValue: 0,\n    bookCost: 0,\n    gainLoss: 0,\n    percentageOfPortfolio:0,\n    stockList: [{name: \"FB\", quantity: 20, price: 1.0, avgCost: 32.5, mktValue: 1, bookCost: 100, gainLoss:100, percentageOfPortfolio:100 },\n    {name: \"GOOGL\", quantity: 3, price: 1.0, avgCost: 1523, mktValue: 1, bookCost: 37, gainLoss:200, percentageOfPortfolio:100 },\n    {name: \"PDD\", quantity: 8, price: 1.0, avgCost: 170, mktValue: 1, bookCost: 34, gainLoss:20, percentageOfPortfolio:100 },\n    {name: \"GME\", quantity: 4, price: 1.0, avgCost: 340, mktValue: 1, bookCost: 78, gainLoss:-89, percentageOfPortfolio:100 },\n    {name: \"MSFT\", quantity: 4, price: 1.0, avgCost: 230, mktValue: 1, bookCost: 45, gainLoss:-201, percentageOfPortfolio:100 },\n    {name: \"BABA\", quantity: 20, price: 1.0, avgCost: 220, mktValue: 1, bookCost: 46, gainLoss:30, percentageOfPortfolio:100 },\n    {name: \"V\", quantity: 20, price: 1.0, avgCost: 220, mktValue: 1, bookCost: 50, gainLoss:67, percentageOfPortfolio:100 },\n    {name: \"SHOP\", quantity: 20, price: 1.0, avgCost: 220, mktValue: 1, bookCost: 87, gainLoss:3, percentageOfPortfolio:100 }],\n    sortBy: \"Market Value\",\n    sortDes: {\n      \"Name\": false,\n      \"Quantity\": false,\n      \"Market Value\": false,\n      \"Gain/Loss\": false,\n      \"Percentage of portfolio\": false,\n    },\n    openDrawer: false\n  }\n\n  // componentDidUpdate(undefined, prevState) {\n  //   // only update the account balance if any transaction has been modified\n  //   if (prevState.transactions_data != this.state.transactions_data) this.sumAccountBalance()\n  // }\n  constructor(props) {\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  sortObj = (a, b) => {\n\n    switch (this.state.sortBy) {\n\n      case \"Name\":\n        if (!this.state.sortDes[\"Name\"]) {\n          if (a[\"Name\"] < b[\"Name\"]) return -1\n          else return 1\n        }\n        else {\n          if (a[\"Name\"] > b[\"Name\"]) return -1\n          else return 1\n        }\n\n      case \"Quantity\":\n        if (!this.state.sortDes[\"Quantity\"]) {\n          if (parseFloat(a[\"Quantity\"]) < parseFloat(b[\"Quantity\"])) return -1\n          else return 1\n        }\n        else {\n          if (parseFloat(a[\"Quantity\"]) > parseFloat(b[\"Quantity\"])) return -1\n          else return 1\n        }\n\n      case \"Market Value\":\n        if (!this.state.sortDes[\"Market Value\"]) {\n          if (parseFloat(a[\"Market Value\"]) < parseFloat(b[\"Market Value\"])) return -1\n          else return 1\n        }\n        else {\n          if (parseFloat(a[\"Market Value\"]) > parseFloat(b[\"Market Value\"])) return -1\n          else return 1\n        }\n      case \"Gain/Loss\":\n        if (!this.state.sortDes[\"Gain/Loss\"]) {\n          if (parseFloat(a[\"Gain/Loss\"]) < parseFloat(b[\"Gain/Loss\"])) return -1\n          else return 1\n        }\n        else {\n          if (parseFloat(a[\"Gain/Loss\"]) > parseFloat(b[\"Gain/Loss\"])) return -1\n          else return 1\n        }\n    \n      case \"Percentage of portfolio\":\n        if (!this.state.sortDes[\"Percentage of portfolio\"]) {\n          if (parseFloat(a[\"Percentage of portfolio\"]) < parseFloat(b[\"Percentage of portfolio\"])) return -1\n          else return 1\n        }\n        else {\n          if (parseFloat(a[\"Percentage of portfolio\"]) > parseFloat(b[\"Percentage of portfolio\"])) return -1\n          else return 1\n        }\n      \n\n      case \"Default\":\n        return\n\n    }\n\n  }\n\n\n\n  // sorting the transactions based on the currently selected element \n  sortStocks = () => {\n    this.state.stocklist_data.sort(this.sortObj)\n    this.setState({ stocklist_data: this.state.stocklist_data })\n  }\n\n  // add newTransaction to the beginning of the transactions_data array \n  addStock = (newStock) => {\n    this.state.stocklist_data.unshift(newStock)\n    this.setState({ stocklist_data: this.state.stocklist_data })\n  }\n\n  // finds the index of the oldTransaction data and replace it with the newTransaction data\n  editStock = (oldStock, newStock) => {\n    console.log(\"Edit\")\n    const index = this.state.stocklist_data.findIndex(t => t === oldStock)\n    this.state.stocklist_data[index] = newStock\n    this.setState({ stocklist_data: this.state.stocklist_data })\n  }\n\n  // deletes transaction from transactions_data array \n  deleteStock = (transaction) => {\n    const keepTransactions = this.state.stocklist_data.filter(t => t !== transaction)\n    this.setState({ stocklist_data: keepTransactions })\n  }\n\n  changeSort(sortBy) {\n    console.log(\"Sorting!\")\n    this.state.sortBy = sortBy\n    this.setState({ sortBy: this.state.sortBy })\n    this.state.sortDes[sortBy] = !this.state.sortDes[sortBy]\n    this.setState({ sortDes: this.state.sortDes })\n    this.sortStocks()\n  }\n\n  handleInputStock = () => {\n    console.log(\"Handling input stock\");\n    console.log(this.state.bookCost)\n    console.log(this.state.totalAmountInvested)\n    let a = Number(this.state.quantity)* Number(this.state.price)\n    console.log(Number(this.totalAmountInvested)+Number(a))\n    const stock = {\n      name:this.state.name,//no query selector..\n      quantity: this.state.quantity,\n      price: this.state.price,\n      avgCost: this.state.avgCost,\n      mktValue: this.state.mktValue,\n      bookCost: Number(this.state.quantity)* Number(this.state.price),\n      gainLoss: this.state.gainLoss,\n      percentageOfPortfolio:(Number(this.state.bookCost)/(Number(this.state.bookCost)+Number(this.state.totalAmountInvested)))*100,\n      totalAmountInvested: Number(this.totalAmountInvested)+Number(this.bookCost)\n    }\n    const currList = this.state.stockList\n    console.log(currList)\n    currList.push(stock)\n    this.setState({\n      stockList:currList\n    })\n\n    console.log(Number(stock.totalAmountInvested))\n\n\n    console.log(currList)\n    for(let i = 0; i < this.state.stockList.length; i++){\n      let allStocks = [...this.state.stockList];\n      // 2. Make a shallow copy of the item you want to mutate\n      let currentStock = {...allStocks[i]};\n      // 3. Replace the property you're intested in\n      console.log(Number(currentStock.bookCost))\n      console.log(Number(currentStock.totalAmountInvested))\n      currentStock.percentageOfPortfolio = Number(currentStock.bookCost)/Number(currentStock.totalAmountInvested);\n      // 4. Put it back into our array. N.B. we *are* mutating the array here, but that's why we made a copy first\n      allStocks[i] = currentStock;\n      // 5. Set the state to our new copy\n      this.setState({allStocks});\n\n\n      // console.log(this.state.stockList[i].percentageOfPortfolio)\n      // this.state.stockList[i].percentageOfPortfolio = Number(this.state.stockList[i].bookCost)/Number(this.state.stockList[i].totalAmountInvested)\n      // console.log(this.state.stockList[i].percentageOfPortfolio)\n    }\n\n  }\n\n  handleInputChange = (event) =>{\n    //this in this function refers to the app\n    console.log(\"Handle input change\")\n    const target = event.target\n    const value = target.value\n    const name = target.name\n    this.setState({\n      //this is bound to App class \n      [name]: value //now the name of the input\n      \n      //entire state is updated\n    })\n\n  }\n\n\n  //   //student is the object to reference\n  // deleteStock = (stock) => {\n  //   //make var because not mutating this \n  //   console.log(\"Delete\")\n  //   const filteredStock = this.state.stockList.filter((s) => {\n  //     return s !== stock  //the one's we don't want to remove\n  //   })\n\n  //   this.setState({\n  //     stockList: filteredStock\n  //   })\n  // }\n\n  // editStock = (stock, valueToEdit) => {\n\n  //   console.log(\"Editing stock\")\n  //   console.log(stock)\n  //   console.log(\"Value\")\n  //   console.log(valueToEdit)\n    \n  // }\n\n  render() {\n    return (\n\n      <div className = \"InvestmentContent\">\n        <div className = \"PieChart\">\n          {/* <Input stockList={this.state.stockList} \n          handleInputStock = {this.handleInputStock} \n          handleInputChange = {this.handleInputChange}\n          />\n          <StockList stockList={this.state.stockList} deleteStock = {this.deleteStock} editStock = {this.editStock}/> */}\n          \n      \n          <PieChart listToDisplay = {this.state.stocklist_data} pieChartSize = {this.state.pieChartSize} pieChartRadius = {this.state.pieChartRadius}/>\n        {/* <BarChart listToDisplay = {this.state.stockList}/> */}\n        \n        </div>\n\n        <div style={{ width: \"100vw\", display: \"block\" }} >\n          <div className=\"Stocklist Table\" width = \"100vw\">\n\n            <TableComp \n              \n              // use the TableContainer class to style the table itself \n              classes={{ TableContainer: 'TableContainer' }}\n              headings={this.state.stockList_headings}\n              data={this.state.stocklist_data}\n              options={this.state.stockList_options}\n              categories={this.state.stockList_categories}\n              addRow={this.addStock}\n              editRow={this.editStock}\n              removeRow={this.deleteStock}\n            />\n          </div>\n        </div>\n\n        <div className=\"SortButtons\">\n          <SortButton categoryName = \"Name\" callBackFunction = {this.changeSort} \n          sortDes = {this.state.sortDes} sortBy = {this.state.sortBy}/>\n                {/* <Grid container spacing={3}>\n\n                  <Grid item xs={4}>\n                    <Paper>\n                      <Button\n                        className=\"SortButton\"\n                        variant={this.state.sortBy == \"Date\" ? \"contained\" : \"outlined\"}\n                        onClick={() => this.changeSort(\"Date\")}>\n                        Sort By Date\n                          {this.state.sortDes[\"Date\"] ? <ArrowDownwardIcon /> : <ArrowUpwardIcon />}\n                      </Button>\n                    </Paper>\n                  </Grid>\n\n                  <Grid item xs={4}>\n                    <Paper>\n                      <Button\n                        className=\"SortButton\"\n                        variant={this.state.sortBy == \"Amount\" ? \"contained\" : \"outlined\"}\n                        onClick={() => this.changeSort(\"Amount\")}>\n                        Sort By Amount\n                          {this.state.sortDes[\"Amount\"] ? <ArrowDownwardIcon /> : <ArrowUpwardIcon />}\n                      </ Button>\n                    </Paper>\n                  </Grid>\n\n                  <Grid item xs={4}>\n                    <Paper>\n                      <Button\n                        className=\"SortButton\"\n                        variant={this.state.sortBy == \"Category\" ? \"contained\" : \"outlined\"}\n                        onClick={() => this.changeSort(\"Category\")}>\n                        Sort By Category\n                          {this.state.sortDes[\"Category\"] ? <ArrowDownwardIcon /> : <ArrowUpwardIcon />}\n                      </Button>\n                    </Paper>\n                  </Grid>\n\n                </Grid>\n\n              </div> */}\n\n        </div>\n        <div className = \"BarChart\">\n          {/* <Input stockList={this.state.stockList} \n          handleInputStock = {this.handleInputStock} \n          handleInputChange = {this.handleInputChange}\n          />\n          <StockList stockList={this.state.stockList} deleteStock = {this.deleteStock} editStock = {this.editStock}/> */}\n          \n      \n          {/* <PieChart listToDisplay = {this.state.stocklist_data} pieChartSize = {this.state.pieChartSize} pieChartRadius = {this.state.pieChartRadius}/> */}\n          <BarChart listToDisplay = {this.state.stockList}/>\n        \n        </div>\n\n\n\n\n\n      </div>\n\n\n      \n      \n\n    )\n\n  }\n\n}\n\nexport default Investments;\n\n/*  */"]},"metadata":{},"sourceType":"module"}