{"ast":null,"code":"var _jsxFileName = \"/Users/emilyhuang/Documents/CSC309/groupProject/team06/src/components/Investments/Piechart.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PieChart extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [{\n        name: 'Targaryen',\n        amount: 90200\n      }, {\n        name: 'Tully',\n        amount: 15000\n      }, {\n        name: 'Stark',\n        amount: 50500\n      }, {\n        name: 'Lannister',\n        amount: 1250800\n      }, {\n        name: 'Mormont',\n        amount: 16000\n      }]\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener('DOMContentLoaded', () => {\n      let canvas = document.getElementById('c');\n      let ctx = canvas.getContext('2d');\n      canvas.width = 800;\n      canvas.height = 600;\n      let total = this.state.data.reduce((ttl, house) => {\n        return ttl + house.troops;\n      }, 0);\n      let startAngle = 0;\n      let radius = 100;\n      let cx = canvas.width / 2;\n      let cy = canvas.height / 2;\n      this.state.data.forEach(house => {\n        //set the styles before beginPath\n        ctx.fillStyle = randomHexColorCode();\n        ctx.lineWidth = 1;\n        ctx.strokeStyle = '#333';\n        ctx.beginPath(); //console.log(total, house.troops, house.troops/total);\n        // draw the pie wedges\n\n        let endAngle = house.troops / total * Math.PI * 2 + startAngle;\n        ctx.moveTo(cx, cy);\n        ctx.arc(cx, cy, radius, startAngle, endAngle, false);\n        ctx.lineTo(cx, cy);\n        ctx.fill();\n        ctx.stroke();\n        ctx.closePath(); // add the labels\n\n        ctx.beginPath();\n        ctx.font = '20px Helvetica, Calibri';\n        ctx.textAlign = 'center';\n        ctx.fillStyle = 'rebeccapurple'; // midpoint between the two angles\n        // 1.5 * radius is the length of the Hypotenuse\n\n        let theta = (startAngle + endAngle) / 2;\n        let deltaY = Math.sin(theta) * 1.5 * radius;\n        let deltaX = Math.cos(theta) * 1.5 * radius;\n        /***\n        SOH  - sin(angle) = opposite / hypotenuse\n                          = opposite / 1px\n        CAH  - cos(angle) = adjacent / hypotenuse\n                          = adjacent / 1px\n        TOA\n        \n        ***/\n\n        ctx.fillText(house.name, deltaX + cx, deltaY + cy);\n        ctx.closePath();\n        startAngle = endAngle;\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"title\", {\n      children: \"Canvas Pie Charts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default PieChart;","map":{"version":3,"sources":["/Users/emilyhuang/Documents/CSC309/groupProject/team06/src/components/Investments/Piechart.js"],"names":["React","PieChart","Component","state","data","name","amount","componentDidMount","document","addEventListener","canvas","getElementById","ctx","getContext","width","height","total","reduce","ttl","house","troops","startAngle","radius","cx","cy","forEach","fillStyle","randomHexColorCode","lineWidth","strokeStyle","beginPath","endAngle","Math","PI","moveTo","arc","lineTo","fill","stroke","closePath","font","textAlign","theta","deltaY","sin","deltaX","cos","fillText","render"],"mappings":"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","sourcesContent":["import React from 'react';\n\nclass PieChart extends React.Component{\n    state = {\n        data: [\n            {name:'Targaryen', amount:90200},\n            {name:'Tully', amount:15000},\n            {name:'Stark', amount:50500},\n            {name:'Lannister', amount:1250800},\n            {name:'Mormont', amount:16000}\n        ],\n    }\n    componentDidMount(){\n        document.addEventListener('DOMContentLoaded', ()=>{\n            let canvas = document.getElementById('c');\n            let ctx = canvas.getContext('2d');\n            canvas.width = 800;\n            canvas.height = 600;\n            let total = this.state.data.reduce( (ttl, house) => {\n                return ttl + house.troops\n            }, 0);\n            let startAngle = 0; \n            let radius = 100;\n            let cx = canvas.width/2;\n            let cy = canvas.height/2;\n            \n            this.state.data.forEach( house => {\n                //set the styles before beginPath\n                ctx.fillStyle = randomHexColorCode();\n                ctx.lineWidth = 1;\n                ctx.strokeStyle = '#333';\n                ctx.beginPath();\n                //console.log(total, house.troops, house.troops/total);\n                // draw the pie wedges\n                let endAngle = ((house.troops / total) * Math.PI * 2) + startAngle;\n                ctx.moveTo(cx, cy);\n                ctx.arc(cx, cy, radius, startAngle, endAngle, false);\n                ctx.lineTo(cx, cy);\n                ctx.fill();\n                ctx.stroke();\n                ctx.closePath();\n                \n                // add the labels\n                ctx.beginPath();\n                ctx.font = '20px Helvetica, Calibri';\n                ctx.textAlign = 'center';\n                ctx.fillStyle = 'rebeccapurple';\n                // midpoint between the two angles\n                // 1.5 * radius is the length of the Hypotenuse\n                let theta = (startAngle + endAngle) / 2;\n                let deltaY = Math.sin(theta) * 1.5 * radius;\n                let deltaX = Math.cos(theta) * 1.5 * radius;\n                /***\n                SOH  - sin(angle) = opposite / hypotenuse\n                                  = opposite / 1px\n                CAH  - cos(angle) = adjacent / hypotenuse\n                                  = adjacent / 1px\n                TOA\n                \n                ***/\n                ctx.fillText(house.name, deltaX+cx, deltaY+cy);\n                ctx.closePath();\n                \n                startAngle = endAngle;\n            })\n        });\n    }\n    \n\n    render() {\n        return (\n    \n            <title>Canvas Pie Charts</title>\n            \n        )\n    \n      }\n\n}\nexport default PieChart;\n\n"]},"metadata":{},"sourceType":"module"}