{"ast":null,"code":"var _jsxFileName = \"/Users/emilyhuang/Documents/CSC309/groupProject/team06/src/components/Investments/PieChart.js\";\n//Tutorials followed:\n//https://stackoverflow.com/questions/33924150/how-to-access-canvas-context-in-react\n//https://stackoverflow.com/questions/27736288/how-to-fill-the-whole-canvas-with-specific-color\n//https://medium.com/@pdx.lucasm/canvas-with-react-js-32e133c05258\n//https://gist.github.com/prof3ssorSt3v3/7f16fe9397c013d364f2d4484cad3ca8\n//https://stackoverflow.com/questions/30790010/html-canvas-hover-text\n//https://stackoverflow.com/questions/6270785/how-to-determine-whether-a-point-x-y-is-contained-within-an-arc-section-of-a-c\n//https://stackoverflow.com/questions/2142535/how-to-clear-the-canvas-for-redrawing\nimport React, { useRef, useEffect, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PieChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      canvasWidth: 600,\n      canvasHeight: 600\n    };\n\n    this.randomHexColorCode = () => {\n      return \"#\" + Math.random().toString(16).slice(2, 8);\n    };\n\n    this.drawSlices = () => {};\n\n    this.width = 0;\n    this.height = 0;\n    this.pieChartRef = /*#__PURE__*/React.createRef();\n  } // let elem = document.querySelector('canvas');\n  // let rect = elem.getBoundingClientRect();\n  // console.log(rect);\n\n\n  componentDidMount() {\n    console.log(\"Did mount!\");\n    this.context = this.pieChartRef.current.getContext('2d'); // let elem = document.querySelector('canvas');\n    // let rect = elem.getBoundingClientRect();\n    // console.log(rect);\n\n    let slices = [];\n    const {\n      stockList\n    } = this.props;\n    console.log(stockList);\n    let total = stockList.reduce((ttl, stock) => {\n      return ttl + stock.avgCost * stock.quantity;\n    }, 0);\n    let startAngle = 0;\n    let radius = 120;\n    let cx = this.state.canvasWidth / 2;\n    let cy = this.state.canvasHeight / 2;\n    stockList.forEach(element => {\n      console.log(\"Drawing slice\");\n      this.context.lineWidth = 1;\n      this.context.strokeStyle = '#fafafa';\n      this.context.fillStyle = this.randomHexColorCode();\n      this.context.beginPath(); // draw the pie wedges\n\n      let endAngle = element.avgCost * element.quantity / total * Math.PI * 2 + startAngle;\n      this.context.moveTo(cx, cy);\n      this.context.arc(cx, cy, radius, startAngle, endAngle);\n      this.context.lineTo(cx, cy);\n      this.context.fill();\n      this.context.stroke();\n      this.context.closePath(); // add the labels\n\n      this.context.beginPath();\n      this.context.font = '20px Helvetica, Calibri';\n      this.context.textAlign = 'center';\n      this.context.fillStyle = 'rebeccapurple'; // 1.5 * radius is the length of the Hypotenuse\n\n      let theta = (startAngle + endAngle) / 2;\n      let deltaY = Math.sin(theta) * 1.5 * radius;\n      let deltaX = Math.cos(theta) * 1.5 * radius;\n      this.context.fillText(element.name, deltaX + cx, deltaY + cy);\n      let percentage = Math.round(+(element.avgCost * element.quantity * 100 / total));\n      this.context.fillText(percentage + \"%\", deltaX * 1.3 + cx, deltaY * 1.4 + cy);\n      this.context.closePath(); //store the slice information\n\n      slices.push({\n        \"name\": element.name,\n        \"cx\": cx,\n        \"cy\": cy,\n        \"colour\": this.context.fillStyle,\n        \"radius\": radius,\n        \"startAngle\": startAngle,\n        \"endAngle\": endAngle\n      });\n      startAngle = endAngle;\n    });\n    document.addEventListener('mousemove', e => {\n      let mouseX = parseInt(e.clientX);\n      let mouseY = parseInt(e.clientY); // console.log(e.pageX)\n      // console.log(e.pageY)\n      // console.log(e.clientX)\n      // console.log(e.clientY)\n\n      for (let i = 0; i < slices.length; i++) {\n        let s = slices[i]; // define the shape path we want to test against the mouse position\n        // defineShape(s.points);\n        //check the angle\n\n        let angleOk = false;\n        let angle = Math.atan(mouseY - cy, mouseX - cx); // let mouseAngle = Math.atan(e.pageY - cy,e.pageX - cx);\n\n        if (s.startAngle < s.endAngle && s.startAngle < angle && angle < s.endAngle) {\n          //console.log(\"Angle ok\")\n          angleOk = true;\n        } else if (s.startAngle > s.endAngle) {\n          if (angle > s.startAngle || angle < s.endAngle) {\n            //console.log(\"Angle ok\")\n            angleOk = true;\n          }\n        } //check the radius\n\n\n        let distanceOk = false; //this distance is wrong:\n\n        let distance = Math.sqrt((mouseX - cx) * (mouseX - cx) + (mouseY - cy) * (mouseY - cy));\n        console.log(mouseX);\n        console.log(mouseY); // console.log(cx)\n        // console.log(cy)\n\n        if (distance < s.radius) {\n          distanceOk = true; // console.log(distance)\n          // console.log(\"Distance ok\")\n        } //all the slices \n\n\n        if (angleOk && distanceOk) {\n          // if yes, fill the shape in red\n          console.log(\"hovering over slice\"); //   s.drawcolor='red';\n        } else {// if no, fill the shape with blue\n            //   s.drawcolor=s.colour;\n          }\n      }\n    });\n  }\n\n  componentDidUpdate() {\n    console.log(\"Did update!\");\n    let elem = document.querySelector('canvas');\n    let rect = elem.getBoundingClientRect();\n    console.log(rect);\n    console.log(rect.x);\n    console.log(rect.y);\n    console.log(rect.width);\n    console.log(rect.height);\n    this.context = this.pieChartRef.current.getContext('2d');\n    const context = this.context;\n    context.clearRect(rect.x, rect.y, rect.width, rect.height);\n    context.beginPath(); //context.save();\n    //context.setTransform(1, 0, 0, 1, 0, 0);\n    //context.beginPath();\n    //context.restore();\n\n    let slices = [];\n    const {\n      stockList\n    } = this.props;\n    console.log(stockList);\n    let total = stockList.reduce((ttl, stock) => {\n      return ttl + stock.avgCost * stock.quantity;\n    }, 0);\n    console.log(\"total\");\n    console.log(total);\n    let startAngle = 0;\n    let radius = 120;\n    let cx = this.state.canvasWidth / 2;\n    let cy = this.state.canvasHeight / 2;\n    stockList.forEach(element => {\n      console.log(\"Drawing slice\");\n      this.context.lineWidth = 1;\n      this.context.strokeStyle = '#fafafa';\n      this.context.fillStyle = this.randomHexColorCode();\n      this.context.beginPath(); // draw the pie wedges\n\n      let endAngle = element.avgCost * element.quantity / total * Math.PI * 2 + startAngle;\n      this.context.moveTo(cx, cy);\n      this.context.arc(cx, cy, radius, startAngle, endAngle);\n      this.context.lineTo(cx, cy);\n      this.context.fill();\n      this.context.stroke();\n      this.context.closePath(); // add the labels\n\n      this.context.beginPath();\n      this.context.font = '20px Helvetica, Calibri';\n      this.context.textAlign = 'center';\n      this.context.fillStyle = 'rebeccapurple'; // 1.5 * radius is the length of the Hypotenuse\n\n      let theta = (startAngle + endAngle) / 2;\n      let deltaY = Math.sin(theta) * 1.5 * radius;\n      let deltaX = Math.cos(theta) * 1.5 * radius;\n      this.context.fillText(element.name, deltaX + cx, deltaY + cy);\n      let percentage = Math.round(+(element.avgCost * element.quantity * 100 / total));\n      this.context.fillText(percentage + \"%\", deltaX * 1.3 + cx, deltaY * 1.4 + cy);\n      this.context.closePath(); //store the slice information\n\n      slices.push({\n        \"name\": element.name,\n        \"cx\": cx,\n        \"cy\": cy,\n        \"colour\": this.context.fillStyle,\n        \"radius\": radius,\n        \"startAngle\": startAngle,\n        \"endAngle\": endAngle\n      });\n      startAngle = endAngle;\n    });\n    document.addEventListener('mousemove', e => {\n      let mouseX = parseInt(e.clientX);\n      let mouseY = parseInt(e.clientY); // console.log(e.pageX)\n      // console.log(e.pageY)\n      // console.log(e.clientX)\n      // console.log(e.clientY)\n\n      for (let i = 0; i < slices.length; i++) {\n        let s = slices[i]; // define the shape path we want to test against the mouse position\n        // defineShape(s.points);\n        //check the angle\n\n        let angleOk = false;\n        let angle = Math.atan(mouseY - cy, mouseX - cx); // let mouseAngle = Math.atan(e.pageY - cy,e.pageX - cx);\n\n        if (s.startAngle < s.endAngle && s.startAngle < angle && angle < s.endAngle) {\n          //console.log(\"Angle ok\")\n          angleOk = true;\n        } else if (s.startAngle > s.endAngle) {\n          if (angle > s.startAngle || angle < s.endAngle) {\n            //console.log(\"Angle ok\")\n            angleOk = true;\n          }\n        } //check the radius\n\n\n        let distanceOk = false; //this distance is wrong:\n\n        let distance = Math.sqrt((mouseX - (cx + rect.x)) * (mouseX - (cx + rect.x)) + (mouseY - (cy + rect.y)) * (mouseY - (cy + rect.y)));\n        console.log(mouseX);\n        console.log(mouseY); // console.log(cx)\n        // console.log(cy)\n\n        if (distance < s.radius) {\n          distanceOk = true; // console.log(distance)\n\n          console.log(\"Distance ok\");\n        } //all the slices \n\n\n        if (angleOk && distanceOk) {\n          // if yes, fill the shape in red\n          console.log(\"hovering over slice\"); //   s.drawcolor='red';\n        } else {// if no, fill the shape with blue\n            //   s.drawcolor=s.colour;\n          }\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: this.pieChartRef,\n      width: this.state.canvasWidth,\n      height: this.state.canvasHeight\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default PieChart;","map":{"version":3,"sources":["/Users/emilyhuang/Documents/CSC309/groupProject/team06/src/components/Investments/PieChart.js"],"names":["React","useRef","useEffect","useReducer","PieChart","Component","constructor","props","state","canvasWidth","canvasHeight","randomHexColorCode","Math","random","toString","slice","drawSlices","width","height","pieChartRef","createRef","componentDidMount","console","log","context","current","getContext","slices","stockList","total","reduce","ttl","stock","avgCost","quantity","startAngle","radius","cx","cy","forEach","element","lineWidth","strokeStyle","fillStyle","beginPath","endAngle","PI","moveTo","arc","lineTo","fill","stroke","closePath","font","textAlign","theta","deltaY","sin","deltaX","cos","fillText","name","percentage","round","push","document","addEventListener","e","mouseX","parseInt","clientX","mouseY","clientY","i","length","s","angleOk","angle","atan","distanceOk","distance","sqrt","componentDidUpdate","elem","querySelector","rect","getBoundingClientRect","x","y","clearRect","render"],"mappings":"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","sourcesContent":["//Tutorials followed:\n//https://stackoverflow.com/questions/33924150/how-to-access-canvas-context-in-react\n//https://stackoverflow.com/questions/27736288/how-to-fill-the-whole-canvas-with-specific-color\n//https://medium.com/@pdx.lucasm/canvas-with-react-js-32e133c05258\n//https://gist.github.com/prof3ssorSt3v3/7f16fe9397c013d364f2d4484cad3ca8\n//https://stackoverflow.com/questions/30790010/html-canvas-hover-text\n//https://stackoverflow.com/questions/6270785/how-to-determine-whether-a-point-x-y-is-contained-within-an-arc-section-of-a-c\n//https://stackoverflow.com/questions/2142535/how-to-clear-the-canvas-for-redrawing\n\n\n\nimport React, { useRef, useEffect, useReducer } from 'react'\n\nclass PieChart extends React.Component {\n    state = {\n        canvasWidth: 600,\n        canvasHeight: 600,\n    }\n    constructor(props) {\n        super(props);\n        this.width = 0;\n        this.height = 0;\n        this.pieChartRef = React.createRef();\n    }\n    \n    // let elem = document.querySelector('canvas');\n    // let rect = elem.getBoundingClientRect();\n    // console.log(rect);\n\n    randomHexColorCode = () => {\n        return \"#\" + Math.random().toString(16).slice(2, 8)\n    }\n\n    drawSlices = () => {\n        \n    }\n\n    componentDidMount() {\n        console.log(\"Did mount!\")\n        this.context = this.pieChartRef.current.getContext('2d');\n        // let elem = document.querySelector('canvas');\n        // let rect = elem.getBoundingClientRect();\n        // console.log(rect);\n        let slices = [];\n        const {stockList} = this.props\n        console.log(stockList)\n        \n        let total = stockList.reduce( (ttl, stock) => {\n            return ttl + (stock.avgCost * stock.quantity)\n        }, 0);\n        \n        let startAngle = 0; \n        let radius = 120;\n        let cx = this.state.canvasWidth/2;\n        let cy = this.state.canvasHeight/2;\n        \n\n        stockList.forEach(element => {\n            console.log(\"Drawing slice\")\n            this.context.lineWidth = 1;\n            this.context.strokeStyle = '#fafafa';\n            this.context.fillStyle = this.randomHexColorCode();\n            this.context.beginPath();\n            \n            // draw the pie wedges\n            let endAngle = (((element.avgCost * element.quantity) / total) * Math.PI * 2) + startAngle;\n            this.context.moveTo(cx, cy);\n            this.context.arc(cx, cy, radius, startAngle, endAngle);\n            this.context.lineTo(cx, cy);\n            this.context.fill();\n            this.context.stroke();\n            this.context.closePath();\n            \n            // add the labels\n            this.context.beginPath();\n            this.context.font = '20px Helvetica, Calibri';\n            this.context.textAlign = 'center';\n            this.context.fillStyle = 'rebeccapurple';\n            // 1.5 * radius is the length of the Hypotenuse\n            let theta = (startAngle + endAngle) / 2;\n            let deltaY = Math.sin(theta) * 1.5 * radius;\n            let deltaX = Math.cos(theta) * 1.5 * radius;\n            this.context.fillText(element.name, deltaX+cx, deltaY+cy);\n            let percentage = Math.round(+((element.avgCost*element.quantity*100)/total));\n            this.context.fillText(percentage + \"%\", (deltaX*1.3)+cx, (deltaY*1.4)+cy);\n            this.context.closePath();\n            \n\n            //store the slice information\n            slices.push({ \n                    \"name\" : element.name,\n                    \"cx\" : cx,\n                    \"cy\" : cy,\n                    \"colour\" : this.context.fillStyle,\n                    \"radius\" : radius,\n                    \"startAngle\" : startAngle,\n                    \"endAngle\": endAngle,\n            });\n            startAngle = endAngle;\n        });\n\n        document.addEventListener('mousemove', (e) => {\n            let mouseX=parseInt(e.clientX);\n            let mouseY=parseInt(e.clientY);\n            // console.log(e.pageX)\n            // console.log(e.pageY)\n            // console.log(e.clientX)\n            // console.log(e.clientY)\n\n                    \n            for(let i=0;i<slices.length;i++){\n                let s=slices[i];\n            \n                // define the shape path we want to test against the mouse position\n                // defineShape(s.points);\n                \n                //check the angle\n                let angleOk = false;\n                let angle = Math.atan(mouseY - cy,mouseX - cx);\n                // let mouseAngle = Math.atan(e.pageY - cy,e.pageX - cx);\n         \n                if(s.startAngle < s.endAngle && s.startAngle < angle && angle < s.endAngle){\n                    //console.log(\"Angle ok\")\n                    angleOk = true;\n\n\n                }else if(s.startAngle > s.endAngle){\n                    if(angle > s.startAngle || angle < s.endAngle){\n                        //console.log(\"Angle ok\")\n                        angleOk = true;\n\n\n\n                    }\n                }\n                \n                //check the radius\n                let distanceOk = false;\n                //this distance is wrong:\n                let distance = Math.sqrt( ((mouseX - cx) * (mouseX - cx)) +  ((mouseY - cy) * (mouseY - cy)) );\n                \n                \n                \n                console.log(mouseX)\n                console.log(mouseY)\n                // console.log(cx)\n                // console.log(cy)\n\n\n                if(distance < s.radius){\n                    distanceOk = true;\n                    // console.log(distance)\n                    // console.log(\"Distance ok\")\n                }\n\n                //all the slices \n                if(angleOk && distanceOk){\n                  // if yes, fill the shape in red\n                  console.log(\"hovering over slice\")\n\n                //   s.drawcolor='red';\n                  \n                }else{\n                  // if no, fill the shape with blue\n                //   s.drawcolor=s.colour;\n                }\n                \n              }\n        }); \n    }\n\n    componentDidUpdate() {\n        console.log(\"Did update!\")\n        let elem  = document.querySelector('canvas');\n        let rect = elem.getBoundingClientRect();\n        console.log(rect);\n        console.log(rect.x)\n        console.log(rect.y)\n        console.log(rect.width)\n        console.log(rect.height)\n        this.context = this.pieChartRef.current.getContext('2d');\n        const context = this.context;\n        context.clearRect(rect.x, rect.y, rect.width, rect.height);\n        context.beginPath();\n        \n\n        \n        //context.save();\n        //context.setTransform(1, 0, 0, 1, 0, 0);\n        //context.beginPath();\n       \n\n        \n        //context.restore();\n        \n        \n        let slices = [];\n        const {stockList} = this.props\n        console.log(stockList)\n        \n        let total = stockList.reduce( (ttl, stock) => {\n            return ttl + (stock.avgCost * stock.quantity)\n        }, 0);\n        console.log(\"total\")\n        console.log(total)\n        let startAngle = 0; \n        let radius = 120;\n        let cx = this.state.canvasWidth/2;\n        let cy = this.state.canvasHeight/2;\n        \n\n        \n\n        stockList.forEach(element => {\n            console.log(\"Drawing slice\")\n            this.context.lineWidth = 1;\n            this.context.strokeStyle = '#fafafa';\n            this.context.fillStyle = this.randomHexColorCode();\n            this.context.beginPath();\n            \n            // draw the pie wedges\n            let endAngle = (((element.avgCost * element.quantity) / total) * Math.PI * 2) + startAngle;\n            this.context.moveTo(cx, cy);\n            this.context.arc(cx, cy, radius, startAngle, endAngle);\n            this.context.lineTo(cx, cy);\n            this.context.fill();\n            this.context.stroke();\n            this.context.closePath();\n            \n            // add the labels\n            this.context.beginPath();\n            this.context.font = '20px Helvetica, Calibri';\n            this.context.textAlign = 'center';\n            this.context.fillStyle = 'rebeccapurple';\n            // 1.5 * radius is the length of the Hypotenuse\n            let theta = (startAngle + endAngle) / 2;\n            let deltaY = Math.sin(theta) * 1.5 * radius;\n            let deltaX = Math.cos(theta) * 1.5 * radius;\n            this.context.fillText(element.name, deltaX+cx, deltaY+cy);\n            let percentage = Math.round(+((element.avgCost*element.quantity*100)/total));\n            this.context.fillText(percentage + \"%\", (deltaX*1.3)+cx, (deltaY*1.4)+cy);\n            this.context.closePath();\n            \n\n            //store the slice information\n            slices.push({ \n                    \"name\" : element.name,\n                    \"cx\" : cx,\n                    \"cy\" : cy,\n                    \"colour\" : this.context.fillStyle,\n                    \"radius\" : radius,\n                    \"startAngle\" : startAngle,\n                    \"endAngle\": endAngle,\n            });\n            startAngle = endAngle;\n        });\n\n        document.addEventListener('mousemove', (e) => {\n            let mouseX=parseInt(e.clientX);\n            let mouseY=parseInt(e.clientY);\n            // console.log(e.pageX)\n            // console.log(e.pageY)\n            // console.log(e.clientX)\n            // console.log(e.clientY)\n\n                    \n            for(let i=0;i<slices.length;i++){\n                let s=slices[i];\n            \n                // define the shape path we want to test against the mouse position\n                // defineShape(s.points);\n                \n                //check the angle\n                let angleOk = false;\n                let angle = Math.atan(mouseY - cy,mouseX - cx);\n                // let mouseAngle = Math.atan(e.pageY - cy,e.pageX - cx);\n         \n                if(s.startAngle < s.endAngle && s.startAngle < angle && angle < s.endAngle){\n                    //console.log(\"Angle ok\")\n                    angleOk = true;\n\n\n                }else if(s.startAngle > s.endAngle){\n                    if(angle > s.startAngle || angle < s.endAngle){\n                        //console.log(\"Angle ok\")\n                        angleOk = true;\n\n\n\n                    }\n                }\n                \n                //check the radius\n                let distanceOk = false;\n                //this distance is wrong:\n                let distance = Math.sqrt( ((mouseX - (cx+rect.x)) * (mouseX - (cx+rect.x))) +  ((mouseY - (cy+rect.y)) * (mouseY - (cy+rect.y))) );\n                \n                \n                \n                console.log(mouseX)\n                console.log(mouseY)\n                // console.log(cx)\n                // console.log(cy)\n\n\n                if(distance < s.radius){\n                    distanceOk = true;\n                    // console.log(distance)\n                    console.log(\"Distance ok\")\n                }\n\n                //all the slices \n                if(angleOk && distanceOk){\n                  // if yes, fill the shape in red\n                  console.log(\"hovering over slice\")\n\n                //   s.drawcolor='red';\n                  \n                }else{\n                  // if no, fill the shape with blue\n                //   s.drawcolor=s.colour;\n                }\n                \n              }\n        }); \n    }\n    \n    render() {\n        return (\n          <canvas ref={this.pieChartRef} width = {this.state.canvasWidth} height = {this.state.canvasHeight} />\n       )\n    }\n}\n\nexport default PieChart"]},"metadata":{},"sourceType":"module"}