{"ast":null,"code":"var _jsxFileName = \"/Users/emilyhuang/Documents/CSC309/groupProject/team06/src/components/Spendings/index.js\";\nimport React from 'react';\nimport { Redirect } from 'react-router';\nimport { withStyles } from '@material-ui/core';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { deepPurple } from '@material-ui/core/colors'; // imports for sorting buttons \n\nimport Button from '@material-ui/core/Button';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper'; // imports for drawer\n\nimport IconButton from '@material-ui/core/IconButton';\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from \"@material-ui/core/Divider\";\nimport AddIcon from '@material-ui/icons/Add';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Typography from '@material-ui/core/Typography';\nimport './spendings.css';\nimport { data } from './data';\nimport TableComp from '../Table';\nimport PieChart from '../Investments/PieChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst useStyles = () => ({\n  drawer_paper: {\n    position: \"relative\",\n    height: \"100%\"\n  },\n  menu_list: {\n    width: \"15vw\",\n    marginTop: \"5%\",\n    marginLeft: \"1vw\",\n    marginRight: \"1vw\"\n  },\n  menu_item: {\n    width: \"15vw\",\n    marginTop: \"5%\"\n  },\n  formControl_root: {\n    outline: \"none\",\n    minWidth: \"15vw\"\n  },\n  listItem_buttonSelected: {\n    backgroundColor: deepPurple[100],\n    '&:hover': {\n      backgroundColor: deepPurple[100]\n    }\n  },\n  listItem_button: {\n    backgroundColor: \"\"\n  },\n  accountBalance: {\n    backgroundColor: deepPurple[100]\n  },\n  accountBalanceDiv: {\n    marginTop: \"5%\",\n    right: \"10%\",\n    textAlign: \"center\",\n    position: \"absolute\",\n    top: \"75%\",\n    minWidth: \"30vw\",\n    display: \"inline-block\",\n    borderRadius: \"25px\",\n    padding: \"20px\",\n    backgroundColor: deepPurple[100],\n    zIndex: \"-1\"\n  }\n});\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: deepPurple[800]\n    },\n    secondary: {\n      main: deepPurple[100]\n    }\n  },\n  typography: {\n    fontFamily: ['Poppins', 'sans-serif'].join(',')\n  }\n});\n\nclass Spendings extends React.Component {\n  constructor(props) {\n    super(props);\n    this.numbersToMonth = {\n      \"1\": \"Jan\",\n      \"2\": \"Feb\",\n      \"3\": \"Mar\",\n      \"4\": \"Apr\",\n      \"5\": \"May\",\n      \"6\": \"Jun\",\n      \"7\": \"Jul\",\n      \"8\": \"Aug\",\n      \"9\": \"Sep\",\n      \"10\": \"Oct\",\n      \"11\": \"Nov\",\n      \"12\": \"Dec\",\n      \"Jan\": \"1\",\n      \"Feb\": \"2\",\n      \"Mar\": \"3\",\n      \"Apr\": \"4\",\n      \"May\": \"5\",\n      \"Jun\": \"6\",\n      \"Jul\": \"7\",\n      \"Aug\": \"8\",\n      \"Sep\": \"9\",\n      \"Oct\": \"10\",\n      \"Nov\": \"11\",\n      \"Dec\": \"12\"\n    };\n\n    this.sumAccountBalance = () => {\n      this.state.accountBalance = this.state.transactions_data.reduce((total, current) => {\n        let sum = parseFloat(total) + parseFloat(current[\"Amount\"]);\n        sum = sum.toFixed(2);\n        return sum;\n      }, 0);\n      this.setState({\n        accountBalance: this.state.accountBalance\n      });\n    };\n\n    this.sumCategoriesAmount = () => {\n      this.state.sumForCategories = [];\n      this.state.transactions_data.map(transaction => {\n        const category = transaction[\"Category\"];\n        let index = this.state.sumForCategories.findIndex(x => x.Name == category);\n\n        if (index == -1) {\n          this.state.sumForCategories.push({\n            \"Name\": category,\n            \"Book Cost\": 0\n          });\n          index = this.state.sumForCategories.length - 1;\n        }\n\n        this.state.sumForCategories[index][\"Book Cost\"] += parseFloat(transaction[\"Amount\"]);\n      });\n      this.setState({\n        sumForCategories: this.state.sumForCategories\n      });\n    };\n\n    this.sortObj = (a, b) => {\n      switch (this.state.sortBy) {\n        case \"Date\":\n          if (!this.state.sortDes[\"Date\"]) {\n            if (a[\"Date\"] < b[\"Date\"]) return -1;else return 1;\n          } else {\n            if (a[\"Date\"] > b[\"Date\"]) return -1;else return 1;\n          }\n\n        case \"Amount\":\n          if (!this.state.sortDes[\"Amount\"]) {\n            if (parseFloat(a[\"Amount\"]) < parseFloat(b[\"Amount\"])) return -1;else return 1;\n          } else {\n            if (parseFloat(a[\"Amount\"]) > parseFloat(b[\"Amount\"])) return -1;else return 1;\n          }\n\n        case \"Category\":\n          if (!this.state.sortDes[\"Category\"]) {\n            if (a[\"Category\"] < b[\"Category\"]) return -1;else return 1;\n          } else {\n            if (a[\"Category\"] > b[\"Category\"]) return -1;else return 1;\n          }\n\n        case \"Default\":\n          return;\n      }\n    };\n\n    this.sortTransactions = () => {\n      this.state.transactions_data.sort(this.sortObj);\n      this.setState({\n        transactions_data: this.state.transactions_data\n      });\n    };\n\n    this.addTransaction = newTransaction => {\n      this.state.transactions_data.unshift(newTransaction);\n      this.setState({\n        transactions_data: this.state.transactions_data\n      });\n      /********************************************************************************\n      for phase 2, you would be making a server call to add this transaction to the data\n      *********************************************************************************/\n\n      this.sumAccountBalance();\n      this.sumCategoriesAmount();\n    };\n\n    this.editTransaction = (oldTransaction, newTransaction) => {\n      const index = this.state.transactions_data.findIndex(t => t === oldTransaction);\n      this.state.transactions_data[index] = newTransaction;\n      this.setState({\n        transactions_data: this.state.transactions_data\n      });\n      /********************************************************************************\n      for phase 2, you would be making a server call to edit this transaction to the data\n      *********************************************************************************/\n\n      this.sumAccountBalance();\n      this.sumCategoriesAmount();\n    };\n\n    this.deleteTransaction = transaction => {\n      const keepTransactions = this.state.transactions_data.filter(t => t !== transaction);\n      this.setState({\n        transactions_data: keepTransactions\n      });\n      /********************************************************************************\n      for phase 2, you would be making a server call to delete this transaction to the data\n      *********************************************************************************/\n    };\n\n    this.addCategory = newCategory => {\n      if (!this.state.transactions_categories.includes(newCategory)) this.state.transactions_categories.push(newCategory);\n      this.setState({\n        transactions_categories: this.state.transactions_categories\n      });\n      /********************************************************************************\n      for phase 2, you would be making a server call to add a customized category to the data\n      *********************************************************************************/\n    };\n\n    this.deleteCategory = category => {\n      const keepCategories = this.state.transactions_categories.filter(c => c !== category);\n      this.setState({\n        transactions_categories: keepCategories\n      });\n      /********************************************************************************\n      for phase 2, you would be making a server call to delete a customized category to the data\n      *********************************************************************************/\n    };\n\n    this.toggleDrawer = () => {\n      this.state.openDrawer = !this.state.openDrawer;\n      this.setState({\n        openDrawer: this.state.openDrawer\n      });\n    };\n\n    this.hideAddNewMonth = () => {\n      this.setState({\n        menuPosition: null\n      });\n    };\n\n    this.displayAddNewMonth = e => {\n      this.setState({\n        menuPosition: e.currentTarget\n      });\n    };\n\n    this.selectFieldOnChangeHandler = e => {\n      this.state.newSpendings.month = e.target.value;\n      this.setState({\n        newSpendings: this.state.newSpendings\n      });\n    };\n\n    this.updateSpendingsYear = e => {\n      if (isNaN(e.target.value)) return;\n      this.state.newSpendings.year = e.target.value;\n      this.setState({\n        newSpendings: this.state.newSpendings\n      });\n    };\n\n    this.updateSpendingsProjected = e => {\n      if (isNaN(e.target.value)) return;\n      this.state.newSpendings.projectedSpendings = e.target.value;\n      this.setState({\n        newSpendings: this.state.newSpendings\n      });\n    };\n\n    this.state = {\n      // the headings to appear in the header bar \n      transactions_headings: [\"Date\", \"Amount\", \"Description\", \"Category\"],\n      // the options for each transaction for the table to know which kind of cell to display\n      transactions_options: [\"Date\", \"Dollar\", \"Any\", \"Select\"],\n      // a list of the categories that the transaction falls under \n      transactions_categories: [\"Food\", \"Personal\", \"Transportation\", \"Home\"],\n      // the data to appear in each rows of the table, the transactions for a specific year and month\n      transactions_data: [],\n      // the entire data for all years and all months\n      entire_data: data,\n      // the net balance on the account \n      accountBalance: 0,\n      // current sorting by string, default is sort by date\n      sortBy: \"Date\",\n      // sorting in an ascending/descending order\n      sortDes: {\n        \"Date\": false,\n        \"Amount\": false,\n        \"Category\": false\n      },\n      // true for displaying the drawer (sidebar for months), false to hide\n      openDrawer: false,\n      // the array used for displaying the pie chart, will contain array of objects, key is the category, value is the total spending of that category\n      sumForCategories: [],\n      // the position for the menu used to create a new spendings page\n      menuPosition: null,\n      // the month selected for the menu\n      newSpendings: {\n        month: \"\",\n        year: \"\",\n        projectedSpendings: \"\"\n      },\n      // the projected balance on the selected year and month \n      projectedSpendings: 0,\n      // used for changing the colours of the items in the drawer \n      currentlySelectedMonth: {\n        monthIndex: \"\",\n        yearIndex: \"\"\n      }\n    };\n    /***************************************************************************************************************************\n    for phase 2, you would be populating \"entire_data\" in the state and get all the transaction history from the server\n    currently, it's just importing from another js file, but we would need to make a server call here to populate that dynamically \n    you would also need to get the transactions_categories from the server since the user can have their own customized categories \n    which would need to be stored in a database \n    ****************************************************************************************************************************/\n    // initialize transactions_data\n\n    this.sortEntireData();\n    const year = this.getYearFromIndex(\"0\");\n    const month = this.getMonthFromIndex(\"0\", \"0\", year);\n    this.state.transactions_data = this.state.entire_data[\"0\"][year][\"0\"][month][\"Transactions\"];\n    this.state.projectedSpendings = this.state.entire_data[\"0\"][year][\"0\"][month][\"Projected Spendings\"];\n    this.state.currentlySelectedMonth[\"monthIndex\"] = \"0\";\n    this.state.currentlySelectedMonth[\"yearIndex\"] = \"0\";\n    this.setState({\n      transactions_data: this.state.transactions_data,\n      projectedSpendings: this.state.projectedSpendings,\n      currentlySelectedMonth: this.state.currentlySelectedMonth\n    });\n    this.sumCategoriesAmount();\n    this.sumAccountBalance();\n  } // conversion from numbers representation to letter representation of months \n\n\n  componentDidUpdate(undefined, prevState) {\n    // only update the account balance if any transaction has been modified\n    if (prevState.transactions_data != this.state.transactions_data) {\n      this.sumAccountBalance();\n      this.sumCategoriesAmount();\n    }\n  }\n\n  changeSort(sortBy) {\n    this.state.sortBy = sortBy;\n    this.setState({\n      sortBy: this.state.sortBy\n    });\n    this.state.sortDes[sortBy] = !this.state.sortDes[sortBy];\n    this.setState({\n      sortDes: this.state.sortDes\n    });\n    this.sortTransactions();\n  }\n\n  createNewSpendings() {\n    if (this.state.newSpendings.year == \"\" || this.state.newSpendings.month == \"\" || this.state.newSpendings.projectedSpendings == \"\") return;\n    const year = this.state.newSpendings.year;\n    const month = this.numbersToMonth[this.state.newSpendings.month.substr(0, 3)];\n    const projectedSpendings = parseFloat(this.state.newSpendings.projectedSpendings).toFixed(2);\n    let yearIndex = this.getIndexFromYear(year); // create new object for the year if the year doesn't exist\n\n    if (!this.checkIfInArray(year, this.state.entire_data)) {\n      let newObj = new Object();\n      newObj[year] = [];\n      this.state.entire_data.push(newObj);\n    }\n\n    yearIndex = this.getIndexFromYear(year); // if attempting to create an exisiting month/year combination, return \n\n    if (this.checkIfInArray(month, this.state.entire_data[yearIndex][year])) {\n      console.log(\"repeated\");\n      return;\n    } // create new object for the month \n    else {\n        let newObj = new Object();\n        newObj[month] = new Object();\n        this.state.entire_data[yearIndex][year].push(newObj);\n      }\n\n    const monthIndex = this.getIndexFromMonth(month, this.state.entire_data[yearIndex][year]);\n    this.state.entire_data[yearIndex][year][monthIndex][month][\"Transactions\"] = [];\n    this.state.entire_data[yearIndex][year][monthIndex][month][\"Projected Spendings\"] = projectedSpendings; // sorting data again so it's in order \n\n    this.sortEntireData();\n    this.setState({\n      entire_data: this.state.entire_data\n    }); // resetting form and closing menu \n\n    Object.keys(this.state.newSpendings).map(heading => {\n      this.state.newSpendings[heading] = \"\";\n    });\n    this.state.menuPosition = null;\n    this.setState({\n      newSpendings: this.state.newSpendings,\n      menuPosition: this.state.menuPosition\n    });\n    /********************************************************************************\n    for phase 2, you would be making a server call to add a new spendings page for a new month and year \n    *********************************************************************************/\n  } // sorting the entire dataset for transactions of all months and years \n\n\n  sortEntireData() {\n    this.state.entire_data.map((yearObj, index) => {\n      const year = Object.keys(yearObj)[0];\n      this.state.entire_data[index][year].sort(this.sortDataByKey);\n    });\n    this.state.entire_data.sort(this.sortDataByKey);\n  }\n\n  sortDataByKey(a, b) {\n    // keys can be either month or year, want the latest to be on top \n    const keyA = parseInt(Object.keys(a)[0]);\n    const keyB = parseInt(Object.keys(b)[0]);\n    if (keyA > keyB) return -1;else return 1;\n  } // when clicking the months on the drawer, need to update the transactions_data in state for the table \n\n\n  monthsOnClickHandler(e, yearIndex, monthIndex, year, month) {\n    this.state.transactions_data = this.state.entire_data[yearIndex][year][monthIndex][this.numbersToMonth[month]][\"Transactions\"];\n    this.state.currentlySelectedMonth[\"yearIndex\"] = yearIndex;\n    this.state.currentlySelectedMonth[\"monthIndex\"] = monthIndex;\n    this.setState({\n      transactions_data: this.state.transactions_data,\n      projectedSpendings: this.state.entire_data[yearIndex][year][monthIndex][this.numbersToMonth[month]][\"Projected Spendings\"],\n      currentlySelectedMonth: this.state.currentlySelectedMonth\n    });\n    this.sumAccountBalance();\n    this.sumCategoriesAmount();\n  } // renders the months for a specific year in the drawer\n\n\n  renderMonths(yearObj, index) {\n    let months = [];\n    Object.keys(yearObj).map(yearArr => {\n      this.state.entire_data[index][yearArr].map(monthObj => {\n        Object.keys(monthObj).map(month => {\n          months.push(this.numbersToMonth[month]);\n        });\n      });\n    });\n    return months;\n  } // get the year from the year index \n\n\n  getYearFromIndex(yearIndex) {\n    // there will always be only one key, which is the year\n    const objKeys = Object.keys(this.state.entire_data[yearIndex]);\n    return objKeys[0];\n  } // get the year index from the year \n\n\n  getIndexFromYear(year) {\n    let index = undefined;\n    this.state.entire_data.map((yearObj, i) => {\n      const objKeys = Object.keys(yearObj);\n      if (objKeys[0] == year) index = i;\n    });\n    return index;\n  } // get the month from the month index \n\n\n  getMonthFromIndex(monthIndex, yearIndex, year) {\n    // there will always be only one key, which is the month\n    const objKeys = Object.keys(this.state.entire_data[yearIndex][year][monthIndex]);\n    return objKeys[0];\n  } // get the month index from the month\n\n\n  getIndexFromMonth(month, arr) {\n    let index = undefined;\n    arr.map((yearObj, i) => {\n      const objKeys = Object.keys(yearObj);\n      if (objKeys[0] == month) index = i;\n    });\n    return index;\n  } // check if a key exists in any objects in an array of objects \n\n\n  checkIfInArray(key, arr) {\n    let exists = false;\n    arr.map(obj => {\n      const keys = Object.keys(obj);\n      if (keys.includes(key)) exists = true;\n    });\n    return exists;\n  }\n\n  render() {\n    const {\n      loggedIn,\n      classes\n    } = this.props;\n    return loggedIn ? /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: theme,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"DrawerDiv\",\n          children: /*#__PURE__*/_jsxDEV(Drawer, {\n            classes: {\n              paper: classes.drawer_paper,\n              paperAnchorDocked: classes.drawer_paper\n            },\n            variant: \"permanent\",\n            children: [/*#__PURE__*/_jsxDEV(Menu, {\n              id: \"long-menu\",\n              anchorEl: this.state.menuPosition,\n              open: Boolean(this.state.menuPosition),\n              onClose: () => this.hideAddNewMonth(),\n              classes: {\n                list: classes.menu_list\n              },\n              children: [/*#__PURE__*/_jsxDEV(FormControl, {\n                classes: {\n                  root: classes.formControl_root\n                },\n                children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                  id: \"simple-select-label\",\n                  children: \"Month\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 530,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Select, {\n                  id: \"simple-select\",\n                  defaultValue: this.state.newSpendings.month,\n                  onChange: e => this.selectFieldOnChangeHandler(e),\n                  children: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"].map(month => /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: month,\n                    children: month\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 538,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 531,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 526,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                onKeyDown: e => e.stopPropagation(),\n                id: \"standard-basic\",\n                label: \"Year\",\n                classes: {\n                  root: classes.menu_item\n                },\n                value: this.state.newSpendings.year,\n                onChange: e => this.updateSpendingsYear(e)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 548,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                onKeyDown: e => e.stopPropagation(),\n                id: \"standard-basic\",\n                label: \"Projected Spendings\",\n                classes: {\n                  root: classes.menu_item\n                },\n                value: this.state.newSpendings.projectedSpendings,\n                onChange: e => this.updateSpendingsProjected(e)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 556,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                color: \"primary\",\n                classes: {\n                  root: classes.menu_item\n                },\n                size: \"small\",\n                onClick: () => this.createNewSpendings(),\n                children: \"Add New Spendings Page\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 564,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 518,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n              \"aria-label\": \"add\",\n              onClick: e => this.displayAddNewMonth(e),\n              children: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 579,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 576,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 581,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: this.state.entire_data.map((yearObj, yearIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  color: \"textSecondary\",\n                  display: \"block\",\n                  variant: \"caption\",\n                  align: \"center\",\n                  children: Object.keys(yearObj).map(year => /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: year\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 593,\n                    columnNumber: 59\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 587,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(List, {\n                  children: this.renderMonths(yearObj, yearIndex).map((month, monthIndex) => /*#__PURE__*/_jsxDEV(ListItem, {\n                    className: this.state.currentlySelectedMonth[\"yearIndex\"] == yearIndex && this.state.currentlySelectedMonth[\"monthIndex\"] == monthIndex ? classes.listItem_buttonSelected : classes.listItem_button,\n                    button: true,\n                    onClick: e => this.monthsOnClickHandler(e, yearIndex, monthIndex, this.getYearFromIndex(yearIndex), month),\n                    children: /*#__PURE__*/_jsxDEV(ListItemText, {\n                      primary: month\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 603,\n                      columnNumber: 29\n                    }, this)\n                  }, month, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 598,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 596,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 585,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 583,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 513,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"Chart\",\n            children: [/*#__PURE__*/_jsxDEV(PieChart, {\n              listToDisplay: this.state.sumForCategories,\n              pieChartSize: 600,\n              pieChartRadius: 150\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 620,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.accountBalanceDiv,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h5\",\n                className: classes.accountBalance,\n                children: [\"Total Amount: $\", this.state.accountBalance, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 631,\n                  columnNumber: 21\n                }, this), \"Projected Spendings: $\", this.state.projectedSpendings]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 629,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 628,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 618,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"Table\",\n            children: [/*#__PURE__*/_jsxDEV(TableComp // use the TableContainer class to style the table itself \n            , {\n              classes: {\n                TableContainer: 'TableContainer'\n              },\n              headings: this.state.transactions_headings,\n              data: this.state.transactions_data,\n              options: this.state.transactions_options,\n              categories: this.state.transactions_categories,\n              addRow: this.addTransaction,\n              editRow: this.editTransaction,\n              removeRow: this.deleteTransaction,\n              addCategory: this.addCategory,\n              removeCategory: this.deleteCategory\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 640,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"SortButtons\",\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                spacing: 3,\n                children: [/*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 4,\n                  children: /*#__PURE__*/_jsxDEV(Paper, {\n                    children: /*#__PURE__*/_jsxDEV(Button, {\n                      className: \"SortButton\",\n                      variant: this.state.sortBy == \"Date\" ? \"contained\" : \"outlined\",\n                      color: \"primary\",\n                      onClick: () => this.changeSort(\"Date\"),\n                      children: [\"Sort By Date\", this.state.sortDes[\"Date\"] ? /*#__PURE__*/_jsxDEV(ArrowDownwardIcon, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 666,\n                        columnNumber: 57\n                      }, this) : /*#__PURE__*/_jsxDEV(ArrowUpwardIcon, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 666,\n                        columnNumber: 81\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 660,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 659,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 658,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 4,\n                  children: /*#__PURE__*/_jsxDEV(Paper, {\n                    children: /*#__PURE__*/_jsxDEV(Button, {\n                      className: \"SortButton\",\n                      variant: this.state.sortBy == \"Amount\" ? \"contained\" : \"outlined\",\n                      color: \"primary\",\n                      onClick: () => this.changeSort(\"Amount\"),\n                      children: [\"Sort By Amount\", this.state.sortDes[\"Amount\"] ? /*#__PURE__*/_jsxDEV(ArrowDownwardIcon, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 679,\n                        columnNumber: 59\n                      }, this) : /*#__PURE__*/_jsxDEV(ArrowUpwardIcon, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 679,\n                        columnNumber: 83\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 673,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 672,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 671,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 4,\n                  children: /*#__PURE__*/_jsxDEV(Paper, {\n                    children: /*#__PURE__*/_jsxDEV(Button, {\n                      className: \"SortButton\",\n                      variant: this.state.sortBy == \"Category\" ? \"contained\" : \"outlined\",\n                      color: \"primary\",\n                      onClick: () => this.changeSort(\"Category\"),\n                      children: [\"Sort By Category\", this.state.sortDes[\"Category\"] ? /*#__PURE__*/_jsxDEV(ArrowDownwardIcon, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 692,\n                        columnNumber: 61\n                      }, this) : /*#__PURE__*/_jsxDEV(ArrowUpwardIcon, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 692,\n                        columnNumber: 85\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 686,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 685,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 684,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 656,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 654,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 638,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 616,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 709,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default withStyles(useStyles)(Spendings);","map":{"version":3,"sources":["/Users/emilyhuang/Documents/CSC309/groupProject/team06/src/components/Spendings/index.js"],"names":["React","Redirect","withStyles","createMuiTheme","ThemeProvider","deepPurple","Button","ArrowUpwardIcon","ArrowDownwardIcon","Grid","Paper","IconButton","Drawer","List","ListItem","ListItemText","Divider","AddIcon","Menu","MenuItem","Select","TextField","InputLabel","FormControl","Typography","data","TableComp","PieChart","useStyles","drawer_paper","position","height","menu_list","width","marginTop","marginLeft","marginRight","menu_item","formControl_root","outline","minWidth","listItem_buttonSelected","backgroundColor","listItem_button","accountBalance","accountBalanceDiv","right","textAlign","top","display","borderRadius","padding","zIndex","theme","palette","primary","main","secondary","typography","fontFamily","join","Spendings","Component","constructor","props","numbersToMonth","sumAccountBalance","state","transactions_data","reduce","total","current","sum","parseFloat","toFixed","setState","sumCategoriesAmount","sumForCategories","map","transaction","category","index","findIndex","x","Name","push","length","sortObj","a","b","sortBy","sortDes","sortTransactions","sort","addTransaction","newTransaction","unshift","editTransaction","oldTransaction","t","deleteTransaction","keepTransactions","filter","addCategory","newCategory","transactions_categories","includes","deleteCategory","keepCategories","c","toggleDrawer","openDrawer","hideAddNewMonth","menuPosition","displayAddNewMonth","e","currentTarget","selectFieldOnChangeHandler","newSpendings","month","target","value","updateSpendingsYear","isNaN","year","updateSpendingsProjected","projectedSpendings","transactions_headings","transactions_options","entire_data","currentlySelectedMonth","monthIndex","yearIndex","sortEntireData","getYearFromIndex","getMonthFromIndex","componentDidUpdate","undefined","prevState","changeSort","createNewSpendings","substr","getIndexFromYear","checkIfInArray","newObj","Object","console","log","getIndexFromMonth","keys","heading","yearObj","sortDataByKey","keyA","parseInt","keyB","monthsOnClickHandler","renderMonths","months","yearArr","monthObj","objKeys","i","arr","key","exists","obj","render","loggedIn","classes","paper","paperAnchorDocked","Boolean","list","root","stopPropagation","TableContainer"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Redirect } from 'react-router';\nimport { withStyles } from '@material-ui/core'\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { deepPurple } from '@material-ui/core/colors';\n\n// imports for sorting buttons \nimport Button from '@material-ui/core/Button';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\n\n// imports for drawer\nimport IconButton from '@material-ui/core/IconButton';\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from \"@material-ui/core/Divider\";\nimport AddIcon from '@material-ui/icons/Add';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Typography from '@material-ui/core/Typography';\n\nimport './spendings.css'\nimport { data } from './data'\n\nimport TableComp from '../Table'\nimport PieChart from '../Investments/PieChart'\n\nconst useStyles = () => ({\n  drawer_paper: {\n    position: \"relative\",\n    height: \"100%\"\n  },\n  menu_list: {\n    width: \"15vw\",\n    marginTop: \"5%\",\n    marginLeft: \"1vw\",\n    marginRight: \"1vw\"\n  },\n  menu_item: {\n    width: \"15vw\",\n    marginTop: \"5%\",\n  },\n  formControl_root: {\n    outline: \"none\",\n    minWidth: \"15vw\"\n  },\n  listItem_buttonSelected: {\n    backgroundColor: deepPurple[100],\n    '&:hover': {\n      backgroundColor: deepPurple[100]\n    }\n  },\n  listItem_button: {\n    backgroundColor: \"\"\n  },\n  accountBalance: {\n    backgroundColor: deepPurple[100],\n  },\n  accountBalanceDiv: {\n    marginTop: \"5%\",\n    right: \"10%\",\n    textAlign: \"center\",\n    position: \"absolute\",\n    top: \"75%\",\n    minWidth: \"30vw\",\n    display: \"inline-block\",\n    borderRadius: \"25px\",\n    padding: \"20px\",\n    backgroundColor: deepPurple[100],\n    zIndex: \"-1\",\n  }\n})\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: deepPurple[800],\n    },\n    secondary: {\n      main: deepPurple[100],\n    }\n  },\n  typography: {\n    fontFamily: [\n      'Poppins',\n      'sans-serif',\n    ].join(','),\n  },\n});\n\nclass Spendings extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // the headings to appear in the header bar \n      transactions_headings: [\"Date\", \"Amount\", \"Description\", \"Category\"],\n      // the options for each transaction for the table to know which kind of cell to display\n      transactions_options: [\"Date\", \"Dollar\", \"Any\", \"Select\"],\n      // a list of the categories that the transaction falls under \n      transactions_categories: [\"Food\", \"Personal\", \"Transportation\", \"Home\"],\n      // the data to appear in each rows of the table, the transactions for a specific year and month\n      transactions_data: [],\n      // the entire data for all years and all months\n      entire_data: data,\n      // the net balance on the account \n      accountBalance: 0,\n      // current sorting by string, default is sort by date\n      sortBy: \"Date\",\n      // sorting in an ascending/descending order\n      sortDes: {\n        \"Date\": false,\n        \"Amount\": false,\n        \"Category\": false\n      },\n      // true for displaying the drawer (sidebar for months), false to hide\n      openDrawer: false,\n      // the array used for displaying the pie chart, will contain array of objects, key is the category, value is the total spending of that category\n      sumForCategories: [],\n      // the position for the menu used to create a new spendings page\n      menuPosition: null,\n      // the month selected for the menu\n      newSpendings: { month: \"\", year: \"\", projectedSpendings: \"\" },\n      // the projected balance on the selected year and month \n      projectedSpendings: 0,\n      // used for changing the colours of the items in the drawer \n      currentlySelectedMonth: { monthIndex: \"\", yearIndex: \"\" }\n    }\n\n    /***************************************************************************************************************************\n    for phase 2, you would be populating \"entire_data\" in the state and get all the transaction history from the server\n    currently, it's just importing from another js file, but we would need to make a server call here to populate that dynamically \n    you would also need to get the transactions_categories from the server since the user can have their own customized categories \n    which would need to be stored in a database \n    ****************************************************************************************************************************/\n\n    // initialize transactions_data\n    this.sortEntireData()\n    const year = this.getYearFromIndex(\"0\")\n    const month = this.getMonthFromIndex(\"0\", \"0\", year)\n\n    this.state.transactions_data = this.state.entire_data[\"0\"][year][\"0\"][month][\"Transactions\"]\n    this.state.projectedSpendings = this.state.entire_data[\"0\"][year][\"0\"][month][\"Projected Spendings\"]\n    this.state.currentlySelectedMonth[\"monthIndex\"] = \"0\"\n    this.state.currentlySelectedMonth[\"yearIndex\"] = \"0\"\n\n    this.setState({\n      transactions_data: this.state.transactions_data,\n      projectedSpendings: this.state.projectedSpendings,\n      currentlySelectedMonth: this.state.currentlySelectedMonth\n    })\n\n    this.sumCategoriesAmount()\n    this.sumAccountBalance()\n\n  }\n\n  // conversion from numbers representation to letter representation of months \n  numbersToMonth = {\n    \"1\": \"Jan\", \"2\": \"Feb\", \"3\": \"Mar\", \"4\": \"Apr\", \"5\": \"May\", \"6\": \"Jun\",\n    \"7\": \"Jul\", \"8\": \"Aug\", \"9\": \"Sep\", \"10\": \"Oct\", \"11\": \"Nov\", \"12\": \"Dec\",\n    \"Jan\": \"1\", \"Feb\": \"2\", \"Mar\": \"3\", \"Apr\": \"4\", \"May\": \"5\", \"Jun\": \"6\",\n    \"Jul\": \"7\", \"Aug\": \"8\", \"Sep\": \"9\", \"Oct\": \"10\", \"Nov\": \"11\", \"Dec\": \"12\"\n  }\n\n  componentDidUpdate(undefined, prevState) {\n    // only update the account balance if any transaction has been modified\n    if (prevState.transactions_data != this.state.transactions_data) {\n      this.sumAccountBalance()\n      this.sumCategoriesAmount()\n    }\n  }\n\n  sumAccountBalance = () => {\n    this.state.accountBalance = this.state.transactions_data.reduce((total, current) => {\n      let sum = parseFloat(total) + parseFloat(current[\"Amount\"])\n      sum = sum.toFixed(2)\n      return sum\n    }, 0)\n    this.setState({ accountBalance: this.state.accountBalance })\n  }\n\n  sumCategoriesAmount = () => {\n\n    this.state.sumForCategories = []\n\n    this.state.transactions_data.map(transaction => {\n      const category = transaction[\"Category\"]\n      let index = this.state.sumForCategories.findIndex(x => x.Name == category)\n      if (index == -1) {\n        this.state.sumForCategories.push({ \"Name\": category, \"Book Cost\": 0 })\n        index = this.state.sumForCategories.length - 1\n      }\n      this.state.sumForCategories[index][\"Book Cost\"] += parseFloat(transaction[\"Amount\"])\n    })\n\n    this.setState({ sumForCategories: this.state.sumForCategories })\n\n  }\n\n  sortObj = (a, b) => {\n\n    switch (this.state.sortBy) {\n\n      case \"Date\":\n        if (!this.state.sortDes[\"Date\"]) {\n          if (a[\"Date\"] < b[\"Date\"]) return -1\n          else return 1\n        }\n        else {\n          if (a[\"Date\"] > b[\"Date\"]) return -1\n          else return 1\n        }\n\n      case \"Amount\":\n        if (!this.state.sortDes[\"Amount\"]) {\n          if (parseFloat(a[\"Amount\"]) < parseFloat(b[\"Amount\"])) return -1\n          else return 1\n        }\n        else {\n          if (parseFloat(a[\"Amount\"]) > parseFloat(b[\"Amount\"])) return -1\n          else return 1\n        }\n\n      case \"Category\":\n        if (!this.state.sortDes[\"Category\"]) {\n          if (a[\"Category\"] < b[\"Category\"]) return -1\n          else return 1\n        }\n        else {\n          if (a[\"Category\"] > b[\"Category\"]) return -1\n          else return 1\n        }\n\n      case \"Default\":\n        return\n\n    }\n\n  }\n\n  // sorting the transactions based on the currently selected element \n  sortTransactions = () => {\n    this.state.transactions_data.sort(this.sortObj)\n    this.setState({ transactions_data: this.state.transactions_data })\n  }\n\n  // add newTransaction to the beginning of the transactions_data array \n  addTransaction = (newTransaction) => {\n    this.state.transactions_data.unshift(newTransaction)\n    this.setState({ transactions_data: this.state.transactions_data })\n    /********************************************************************************\n    for phase 2, you would be making a server call to add this transaction to the data\n    *********************************************************************************/\n    this.sumAccountBalance()\n    this.sumCategoriesAmount()\n  }\n\n  // finds the index of the oldTransaction data and replace it with the newTransaction data\n  editTransaction = (oldTransaction, newTransaction) => {\n    const index = this.state.transactions_data.findIndex(t => t === oldTransaction)\n    this.state.transactions_data[index] = newTransaction\n    this.setState({ transactions_data: this.state.transactions_data })\n    /********************************************************************************\n    for phase 2, you would be making a server call to edit this transaction to the data\n    *********************************************************************************/\n    this.sumAccountBalance()\n    this.sumCategoriesAmount()\n  }\n\n  // deletes transaction from transactions_data array \n  deleteTransaction = (transaction) => {\n    const keepTransactions = this.state.transactions_data.filter(t => t !== transaction)\n    this.setState({ transactions_data: keepTransactions })\n    /********************************************************************************\n    for phase 2, you would be making a server call to delete this transaction to the data\n    *********************************************************************************/\n  }\n\n  // adds a user defined category \n  addCategory = (newCategory) => {\n    if (!this.state.transactions_categories.includes(newCategory))\n      this.state.transactions_categories.push(newCategory)\n    this.setState({ transactions_categories: this.state.transactions_categories })\n    /********************************************************************************\n    for phase 2, you would be making a server call to add a customized category to the data\n    *********************************************************************************/\n  }\n\n  // deletes a user defined category (the default cannot be deleted)\n  deleteCategory = (category) => {\n    const keepCategories = this.state.transactions_categories.filter(c => c !== category)\n    this.setState({ transactions_categories: keepCategories })\n    /********************************************************************************\n    for phase 2, you would be making a server call to delete a customized category to the data\n    *********************************************************************************/\n  }\n\n  changeSort(sortBy) {\n    this.state.sortBy = sortBy\n    this.setState({ sortBy: this.state.sortBy })\n    this.state.sortDes[sortBy] = !this.state.sortDes[sortBy]\n    this.setState({ sortDes: this.state.sortDes })\n    this.sortTransactions()\n  }\n\n  toggleDrawer = () => {\n    this.state.openDrawer = !this.state.openDrawer\n    this.setState({ openDrawer: this.state.openDrawer })\n  }\n\n  hideAddNewMonth = () => {\n    this.setState({ menuPosition: null })\n  }\n\n  displayAddNewMonth = (e) => {\n    this.setState({ menuPosition: e.currentTarget })\n  }\n\n  // to update the months on the select for the menu\n  selectFieldOnChangeHandler = (e) => {\n    this.state.newSpendings.month = e.target.value\n    this.setState({ newSpendings: this.state.newSpendings })\n  }\n\n  updateSpendingsYear = (e) => {\n    if (isNaN(e.target.value)) return\n    this.state.newSpendings.year = e.target.value\n    this.setState({ newSpendings: this.state.newSpendings })\n  }\n\n  updateSpendingsProjected = (e) => {\n    if (isNaN(e.target.value)) return\n    this.state.newSpendings.projectedSpendings = e.target.value\n    this.setState({ newSpendings: this.state.newSpendings })\n  }\n\n  createNewSpendings() {\n\n    if (this.state.newSpendings.year == \"\" || this.state.newSpendings.month == \"\" || this.state.newSpendings.projectedSpendings == \"\") return\n\n    const year = this.state.newSpendings.year\n    const month = this.numbersToMonth[this.state.newSpendings.month.substr(0, 3)]\n    const projectedSpendings = parseFloat(this.state.newSpendings.projectedSpendings).toFixed(2)\n    let yearIndex = this.getIndexFromYear(year)\n\n    // create new object for the year if the year doesn't exist\n    if (!this.checkIfInArray(year, this.state.entire_data)) {\n      let newObj = new Object()\n      newObj[year] = []\n      this.state.entire_data.push(newObj)\n    }\n\n    yearIndex = this.getIndexFromYear(year)\n\n    // if attempting to create an exisiting month/year combination, return \n    if (this.checkIfInArray(month, this.state.entire_data[yearIndex][year])) {\n      console.log(\"repeated\")\n      return\n    }\n\n    // create new object for the month \n    else {\n      let newObj = new Object()\n      newObj[month] = new Object()\n      this.state.entire_data[yearIndex][year].push(newObj)\n    }\n\n    const monthIndex = this.getIndexFromMonth(month, this.state.entire_data[yearIndex][year])\n\n    this.state.entire_data[yearIndex][year][monthIndex][month][\"Transactions\"] = []\n    this.state.entire_data[yearIndex][year][monthIndex][month][\"Projected Spendings\"] = projectedSpendings\n\n    // sorting data again so it's in order \n    this.sortEntireData()\n    this.setState({ entire_data: this.state.entire_data })\n\n    // resetting form and closing menu \n    Object.keys(this.state.newSpendings).map(heading => {\n      this.state.newSpendings[heading] = \"\"\n    })\n    this.state.menuPosition = null\n    this.setState({ newSpendings: this.state.newSpendings, menuPosition: this.state.menuPosition })\n    /********************************************************************************\n    for phase 2, you would be making a server call to add a new spendings page for a new month and year \n    *********************************************************************************/\n  }\n\n  // sorting the entire dataset for transactions of all months and years \n  sortEntireData() {\n    this.state.entire_data.map((yearObj, index) => {\n      const year = Object.keys(yearObj)[0]\n      this.state.entire_data[index][year].sort(this.sortDataByKey)\n    })\n    this.state.entire_data.sort(this.sortDataByKey)\n  }\n\n  sortDataByKey(a, b) {\n    // keys can be either month or year, want the latest to be on top \n    const keyA = parseInt(Object.keys(a)[0])\n    const keyB = parseInt(Object.keys(b)[0])\n    if (keyA > keyB) return -1\n    else return 1\n  }\n\n  // when clicking the months on the drawer, need to update the transactions_data in state for the table \n  monthsOnClickHandler(e, yearIndex, monthIndex, year, month) {\n    this.state.transactions_data = this.state.entire_data[yearIndex][year][monthIndex][this.numbersToMonth[month]][\"Transactions\"]\n    this.state.currentlySelectedMonth[\"yearIndex\"] = yearIndex\n    this.state.currentlySelectedMonth[\"monthIndex\"] = monthIndex\n    this.setState({\n      transactions_data: this.state.transactions_data,\n      projectedSpendings: this.state.entire_data[yearIndex][year][monthIndex][this.numbersToMonth[month]][\"Projected Spendings\"],\n      currentlySelectedMonth: this.state.currentlySelectedMonth\n    })\n    this.sumAccountBalance()\n    this.sumCategoriesAmount()\n  }\n\n  // renders the months for a specific year in the drawer\n  renderMonths(yearObj, index) {\n    let months = []\n    Object.keys(yearObj).map(yearArr => {\n      this.state.entire_data[index][yearArr].map(monthObj => {\n        Object.keys(monthObj).map(month => {\n          months.push(this.numbersToMonth[month])\n        })\n      })\n    })\n    return months\n  }\n\n  // get the year from the year index \n  getYearFromIndex(yearIndex) {\n    // there will always be only one key, which is the year\n    const objKeys = Object.keys(this.state.entire_data[yearIndex])\n    return objKeys[0]\n  }\n\n  // get the year index from the year \n  getIndexFromYear(year) {\n    let index = undefined\n    this.state.entire_data.map((yearObj, i) => {\n      const objKeys = Object.keys(yearObj)\n      if (objKeys[0] == year) index = i\n    })\n    return index\n  }\n\n  // get the month from the month index \n  getMonthFromIndex(monthIndex, yearIndex, year) {\n    // there will always be only one key, which is the month\n    const objKeys = Object.keys(this.state.entire_data[yearIndex][year][monthIndex])\n    return objKeys[0]\n  }\n\n  // get the month index from the month\n  getIndexFromMonth(month, arr) {\n    let index = undefined\n    arr.map((yearObj, i) => {\n      const objKeys = Object.keys(yearObj)\n      if (objKeys[0] == month) index = i\n    })\n    return index\n  }\n\n  // check if a key exists in any objects in an array of objects \n  checkIfInArray(key, arr) {\n    let exists = false\n    arr.map(obj => {\n      const keys = Object.keys(obj)\n      if (keys.includes(key)) exists = true\n    })\n    return exists\n  }\n\n  render() {\n\n    const { loggedIn, classes } = this.props\n\n    return (\n\n      loggedIn ?\n\n        <ThemeProvider theme={theme}>\n\n          <div>\n\n            <div className=\"DrawerDiv\">\n\n              {/* <IconButton className=\"OpenDrawerButton\"\n                // color=\"inherit\"\n                aria-label=\"open drawer\"\n                onClick={() => this.toggleDrawer()}\n              // edge=\"start\"\n              // className={clsx(classes.menuButton, {\n              //   [classes.hide]: open,\n              // })}\n              >\n                <MenuIcon />\n              </IconButton> */}\n\n              <Drawer\n                classes={{ paper: classes.drawer_paper, paperAnchorDocked: classes.drawer_paper }}\n                variant=\"permanent\"\n              >\n\n                <Menu\n                  id=\"long-menu\"\n                  anchorEl={this.state.menuPosition}\n                  open={Boolean(this.state.menuPosition)}\n                  onClose={() => this.hideAddNewMonth()}\n                  classes={{ list: classes.menu_list }}\n                >\n\n                  <FormControl\n                    classes={{ root: classes.formControl_root }}\n                  >\n\n                    <InputLabel id=\"simple-select-label\">Month</InputLabel>\n                    <Select\n                      id=\"simple-select\"\n                      defaultValue={this.state.newSpendings.month}\n                      onChange={(e) => this.selectFieldOnChangeHandler(e)}\n                    >\n\n                      {[\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"].map(month =>\n                        <MenuItem\n                          value={month}>\n                          {month}\n                        </MenuItem>\n                      )}\n\n                    </Select>\n\n                  </FormControl>\n\n                  <TextField onKeyDown={e => e.stopPropagation()}\n                    id=\"standard-basic\"\n                    label=\"Year\"\n                    classes={{ root: classes.menu_item }}\n                    value={this.state.newSpendings.year}\n                    onChange={(e) => this.updateSpendingsYear(e)}\n                  />\n\n                  <TextField onKeyDown={e => e.stopPropagation()}\n                    id=\"standard-basic\"\n                    label=\"Projected Spendings\"\n                    classes={{ root: classes.menu_item }}\n                    value={this.state.newSpendings.projectedSpendings}\n                    onChange={(e) => this.updateSpendingsProjected(e)}\n                  />\n\n                  <Button\n                    variant=\"outlined\"\n                    color=\"primary\"\n                    classes={{ root: classes.menu_item }}\n                    size=\"small\"\n                    onClick={() => this.createNewSpendings()}\n                  >\n                    Add New Spendings Page\n                  </Button>\n\n                </Menu>\n\n                <IconButton\n                  aria-label=\"add\"\n                  onClick={(e) => this.displayAddNewMonth(e)}>\n                  <AddIcon />\n                </IconButton>\n                <Divider />\n\n                <div>\n                  {this.state.entire_data.map((yearObj, yearIndex) => (\n                    <div>\n\n                      <Typography\n                        color=\"textSecondary\"\n                        display=\"block\"\n                        variant=\"caption\"\n                        align=\"center\"\n                      >\n                        {Object.keys(yearObj).map(year => <p>{year}</p>)}\n                      </Typography>\n\n                      <List>\n                        {this.renderMonths(yearObj, yearIndex).map((month, monthIndex) => (\n                          <ListItem\n                            className={(this.state.currentlySelectedMonth[\"yearIndex\"] == yearIndex && this.state.currentlySelectedMonth[\"monthIndex\"] == monthIndex) ? classes.listItem_buttonSelected : classes.listItem_button}\n                            button\n                            key={month}\n                            onClick={(e) => this.monthsOnClickHandler(e, yearIndex, monthIndex, this.getYearFromIndex(yearIndex), month)}>\n                            <ListItemText primary={month} />\n                          </ListItem>\n                        ))}\n                      </List>\n\n                    </div>\n                  ))}\n                </div>\n\n              </Drawer>\n\n            </div>\n\n            <div className=\"Content\">\n\n              <div className=\"Chart\">\n\n                <PieChart\n                  listToDisplay={this.state.sumForCategories}\n                  pieChartSize={600}\n                  pieChartRadius={150}\n                >\n\n                </PieChart>\n\n                <div className={classes.accountBalanceDiv}>\n                  <Typography variant=\"h5\" className={classes.accountBalance}>\n                    Total Amount: ${this.state.accountBalance}\n                    <br></br>\n                    Projected Spendings: ${this.state.projectedSpendings}\n                  </Typography>\n                </div>\n\n              </div>\n\n              <div className=\"Table\">\n\n                <TableComp\n                  // use the TableContainer class to style the table itself \n                  classes={{ TableContainer: 'TableContainer' }}\n                  headings={this.state.transactions_headings}\n                  data={this.state.transactions_data}\n                  options={this.state.transactions_options}\n                  categories={this.state.transactions_categories}\n                  addRow={this.addTransaction}\n                  editRow={this.editTransaction}\n                  removeRow={this.deleteTransaction}\n                  addCategory={this.addCategory}\n                  removeCategory={this.deleteCategory}\n                />\n\n                <div className=\"SortButtons\">\n\n                  <Grid container spacing={3}>\n\n                    <Grid item xs={4}>\n                      <Paper>\n                        <Button\n                          className=\"SortButton\"\n                          variant={this.state.sortBy == \"Date\" ? \"contained\" : \"outlined\"}\n                          color=\"primary\"\n                          onClick={() => this.changeSort(\"Date\")}>\n                          Sort By Date\n                          {this.state.sortDes[\"Date\"] ? <ArrowDownwardIcon /> : <ArrowUpwardIcon />}\n                        </Button>\n                      </Paper>\n                    </Grid>\n\n                    <Grid item xs={4}>\n                      <Paper>\n                        <Button\n                          className=\"SortButton\"\n                          variant={this.state.sortBy == \"Amount\" ? \"contained\" : \"outlined\"}\n                          color=\"primary\"\n                          onClick={() => this.changeSort(\"Amount\")}>\n                          Sort By Amount\n                          {this.state.sortDes[\"Amount\"] ? <ArrowDownwardIcon /> : <ArrowUpwardIcon />}\n                        </ Button>\n                      </Paper>\n                    </Grid>\n\n                    <Grid item xs={4}>\n                      <Paper>\n                        <Button\n                          className=\"SortButton\"\n                          variant={this.state.sortBy == \"Category\" ? \"contained\" : \"outlined\"}\n                          color=\"primary\"\n                          onClick={() => this.changeSort(\"Category\")}>\n                          Sort By Category\n                          {this.state.sortDes[\"Category\"] ? <ArrowDownwardIcon /> : <ArrowUpwardIcon />}\n                        </Button>\n                      </Paper>\n                    </Grid>\n\n                  </Grid>\n\n                </div>\n\n              </div>\n\n            </div>\n\n          </div >\n\n        </ThemeProvider >\n\n        : <Redirect to=\"/login\" />\n\n    )\n\n  }\n\n}\n\nexport default withStyles(useStyles)(Spendings);"]},"metadata":{},"sourceType":"module"}