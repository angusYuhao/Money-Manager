{"ast":null,"code":"var _jsxFileName = \"/Users/emilyhuang/Documents/CSC309/groupProject/team06/src/components/Investments/PieChart.js\";\n//Tutorials followed:\n//https://stackoverflow.com/questions/33924150/how-to-access-canvas-context-in-react\n//https://stackoverflow.com/questions/27736288/how-to-fill-the-whole-canvas-with-specific-color\n//https://medium.com/@pdx.lucasm/canvas-with-react-js-32e133c05258\n//https://gist.github.com/prof3ssorSt3v3/7f16fe9397c013d364f2d4484cad3ca8\n//https://stackoverflow.com/questions/30790010/html-canvas-hover-text\n//https://stackoverflow.com/questions/6270785/how-to-determine-whether-a-point-x-y-is-contained-within-an-arc-section-of-a-c\n//https://stackoverflow.com/questions/2142535/how-to-clear-the-canvas-for-redrawing\n//https://stackoverflow.com/questions/25630035/javascript-getboundingclientrect-changes-while-scrolling\n//https://stackoverflow.com/questions/43193341/how-to-generate-random-pastel-or-brighter-color-in-javascript\nimport React, { useRef, useEffect, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PieChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      canvasWidth: 600,\n      canvasHeight: 600,\n      slices: [],\n      radius: 120\n    };\n\n    this.randomPastelColourCode = () => {\n      return \"hsl(\" + 360 * Math.random() + ',' + (25 + 70 * Math.random()) + '%,' + (80 + 10 * Math.random()) + '%)';\n    };\n\n    this.drawSlices = () => {\n      //!!!Ian: bookCost is the total amount spend on that stock/in that category\n      const {\n        listToDisplay\n      } = this.props;\n      let startAngle = 0;\n      let radius = this.state.radius;\n      let cx = this.state.canvasWidth / 2;\n      let cy = this.state.canvasHeight / 2;\n      let total = listToDisplay.reduce((ttl, stock) => {\n        return ttl + stock.bookCost;\n      }, 0);\n      listToDisplay.forEach(element => {\n        //here the slices are draw backwards...(clockwise) so makesure to push into the list properly\n        console.log(\"Drawing slice\");\n        console.log(element.name);\n        this.context.lineWidth = 3;\n        this.context.strokeStyle = '#fafafa';\n        this.context.fillStyle = this.randomPastelColourCode();\n        let sliceColour = this.context.fillStyle;\n        this.context.beginPath(); // draw the pie wedges\n\n        let endAngle = element.bookCost / total * Math.PI * 2 + startAngle;\n        this.context.moveTo(cx, cy);\n        this.context.arc(cx, cy, radius, startAngle, endAngle);\n        this.context.lineTo(cx, cy);\n        this.context.fill();\n        this.context.stroke();\n        this.context.closePath(); // add the labels\n\n        this.context.beginPath();\n        this.context.font = '20px Helvetica, Calibri';\n        this.context.textAlign = 'center';\n        this.context.fillStyle = 'rebeccapurple'; // 1.5 * radius is the length of the Hypotenuse\n\n        let theta = (startAngle + endAngle) / 2;\n        let deltaY = Math.sin(theta) * 1.5 * radius;\n        let deltaX = Math.cos(theta) * 1.5 * radius; //point to label\n\n        this.context.strokeStyle = '#fafafa';\n        this.context.moveTo(cx + deltaX / 2, cy + deltaY / 2);\n        this.context.lineTo(4 * deltaX / 5 + cx, 4 * deltaY / 5 + cy);\n        this.context.stroke(); //!!!Ian: name is the name of the stock category\n\n        this.context.fillText(element.name, deltaX + cx, deltaY + cy);\n        let percentage = Math.round(+(element.bookCost * 100 / total));\n        this.context.fillText(percentage + \"%\", deltaX * 1.3 + cx, deltaY * 1.4 + cy);\n        this.context.closePath(); //store the slice information\n\n        this.state.slices.push({\n          \"name\": element.name,\n          \"colour\": sliceColour,\n          \"startAngle\": 2 * Math.PI - endAngle,\n          //since arc draws the slice backwards in clockwise fasion\n          \"endAngle\": 2 * Math.PI - startAngle,\n          \"drawStartAngle\": startAngle,\n          \"drawEndAngle\": endAngle,\n          \"bookCost\": element.bookCost\n        });\n        startAngle = endAngle;\n      });\n      console.log(this.state.slices);\n    };\n\n    this.drawAccentedSlice = (slice, width) => {\n      const {\n        listToDisplay\n      } = this.props;\n      let radius = this.state.radius;\n      let cx = this.state.canvasWidth / 2;\n      let cy = this.state.canvasHeight / 2;\n      let total = listToDisplay.reduce((ttl, stock) => {\n        return ttl + stock.bookCost;\n      }, 0);\n      console.log(\"Accenting slice\");\n      console.log(slice.name);\n      this.context.lineWidth = width;\n      this.context.strokeStyle = '#fafafa';\n      this.context.fillStyle = slice.colour;\n      this.context.beginPath(); // draw the pie wedges\n\n      this.context.moveTo(cx, cy);\n      this.context.arc(cx, cy, radius, slice.drawStartAngle, slice.drawEndAngle);\n      this.context.lineTo(cx, cy);\n      this.context.fill();\n      this.context.stroke();\n      this.context.closePath(); // add the labels\n\n      if (width > 3) {\n        this.context.beginPath();\n        this.context.font = '18px Helvetica, Calibri';\n        this.context.textAlign = 'center';\n        this.context.fillStyle = 'rebeccapurple'; // 1.5 * radius is the length of the Hypotenuse\n\n        let theta = (slice.drawStartAngle + slice.drawEndAngle) / 2;\n        let deltaY = Math.sin(theta) * 1.5 * radius;\n        let deltaX = Math.cos(theta) * 1.5 * radius; //!!!Ian: name is the name of the stock category\n\n        this.context.fillText(\"$\" + slice.bookCost, deltaX / 2 + cx, deltaY / 2 + cy); // let percentage = Math.round(+((slice.bookCost*100)/total));\n\n        this.context.closePath();\n      }\n    };\n\n    this.pieChartRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    console.log(\"Did mount!\");\n    this.context = this.pieChartRef.current.getContext('2d');\n    let elem = document.getElementById('pieChartCanvas');\n    const {\n      listToDisplay\n    } = this.props;\n    console.log(listToDisplay);\n    this.drawSlices(); //NOTE!!!!!! get bounding client rect gets the positions according to the window not the document!!!\n\n    let rect = elem.getBoundingClientRect(); //add event listeners...I had to add it to a component so I used this one\n\n    document.addEventListener('mousewheel', e => {\n      rect = elem.getBoundingClientRect(); //console.log(rect);\n    });\n    document.addEventListener('mousemove', e => {\n      let mouseX = parseInt(e.clientX);\n      let mouseY = parseInt(e.clientY);\n      let cx = this.state.canvasWidth / 2;\n      let cy = this.state.canvasHeight / 2; //mouse is relative to the window, rect is relative to the window\n      //cx and cy are fixed\n      //relativeX and relative Y are the distances from the center of the \"pie\"(no +ve or -ve signs)\n\n      let relativeX = 0;\n      let relativeY = 0;\n      let angle = 0; // quadrant I & II:\n\n      if (mouseY > rect.y && mouseY < rect.y + cy) {\n        relativeY = cy + rect.y - mouseY; //quadrant I:\n\n        if (mouseX > rect.x + cx && mouseX < rect.x + 2 * cx) {\n          relativeX = mouseX - (cx + rect.x);\n          angle = Math.atan(relativeY / relativeX); // console.log(relativeX)\n          // console.log(relativeY)\n          // console.log(\"quad I\")\n          // console.log(angle)\n          //quadrant II:\n        } else if (mouseX > rect.x && mouseX < rect.x + cx) {\n          relativeX = cx + rect.x - mouseX;\n          angle = Math.PI - Math.atan(relativeY / relativeX); // console.log(relativeX)\n          // console.log(relativeY)\n          // console.log(\"quad II\")\n          // console.log(angle)\n        } //quadrant III & IV:\n\n      } else if (mouseY > cy + rect.y && mouseY < rect.y + 2 * cy) {\n        relativeY = mouseY - (cy + rect.y); //quadrant IV:\n\n        if (mouseX > rect.x + cx && mouseX < rect.x + 2 * cx) {\n          relativeX = mouseX - (cx + rect.x);\n          angle = 2 * Math.PI - Math.atan(relativeY / relativeX); // console.log(relativeX)\n          // console.log(relativeY)\n          // console.log(\"quad IV\")\n          // console.log(angle)\n          //quadrant III:\n        } else if (mouseX > rect.x && mouseX < rect.x + cx) {\n          relativeX = cx + rect.x - mouseX;\n          angle = Math.PI + Math.atan(relativeY / relativeX); // console.log(relativeX)\n          // console.log(relativeY)\n          // console.log(\"quad III\")\n          // console.log(angle)\n        }\n      } //console.log(angle)\n\n\n      let distanceOk = false;\n      let distance = Math.sqrt(relativeX * relativeX + relativeY * relativeY);\n\n      if (distance < this.state.radius) {\n        distanceOk = true; // console.log(distance)\n        //console.log(\"Distance ok\")\n      }\n\n      for (let i = 0; i < this.state.slices.length; i++) {\n        let s = this.state.slices[i]; //check if the mouse angle matches with this slice\n\n        let angleOk = false;\n\n        if (s.startAngle < angle && angle < s.endAngle) {\n          //console.log(\"Angle ok\")\n          //console.log(s.name)\n          angleOk = true;\n        } else continue;\n\n        if (angleOk && distanceOk) {\n          console.log(s.name); //STILL NEED TO DO SOME KIND OF UPDATE HERE\n\n          this.drawAccentedSlice(s, 8);\n          setTimeout(this.drawAccentedSlice, 1000, s, 3);\n        }\n      }\n    });\n  }\n\n  componentDidUpdate() {\n    console.log(\"Updated!\");\n    this.context = this.pieChartRef.current.getContext('2d');\n    let elem = document.getElementById('pieChartCanvas');\n    let rect = elem.getBoundingClientRect();\n    const context = this.context; //clear canvas\n\n    context.clearRect(0, 0, rect.width, rect.height);\n    context.beginPath(); //clear slices\n\n    this.state.slices = [];\n    this.drawSlices(); //redraw\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"pieChartCanvas\",\n      ref: this.pieChartRef,\n      width: this.state.canvasWidth,\n      height: this.state.canvasHeight\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default PieChart;","map":{"version":3,"sources":["/Users/emilyhuang/Documents/CSC309/groupProject/team06/src/components/Investments/PieChart.js"],"names":["React","useRef","useEffect","useReducer","PieChart","Component","constructor","props","state","canvasWidth","canvasHeight","slices","radius","randomPastelColourCode","Math","random","drawSlices","listToDisplay","startAngle","cx","cy","total","reduce","ttl","stock","bookCost","forEach","element","console","log","name","context","lineWidth","strokeStyle","fillStyle","sliceColour","beginPath","endAngle","PI","moveTo","arc","lineTo","fill","stroke","closePath","font","textAlign","theta","deltaY","sin","deltaX","cos","fillText","percentage","round","push","drawAccentedSlice","slice","width","colour","drawStartAngle","drawEndAngle","pieChartRef","createRef","componentDidMount","current","getContext","elem","document","getElementById","rect","getBoundingClientRect","addEventListener","e","mouseX","parseInt","clientX","mouseY","clientY","relativeX","relativeY","angle","y","x","atan","distanceOk","distance","sqrt","i","length","s","angleOk","setTimeout","componentDidUpdate","clearRect","height","render"],"mappings":"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","sourcesContent":["//Tutorials followed:\n//https://stackoverflow.com/questions/33924150/how-to-access-canvas-context-in-react\n//https://stackoverflow.com/questions/27736288/how-to-fill-the-whole-canvas-with-specific-color\n//https://medium.com/@pdx.lucasm/canvas-with-react-js-32e133c05258\n//https://gist.github.com/prof3ssorSt3v3/7f16fe9397c013d364f2d4484cad3ca8\n//https://stackoverflow.com/questions/30790010/html-canvas-hover-text\n//https://stackoverflow.com/questions/6270785/how-to-determine-whether-a-point-x-y-is-contained-within-an-arc-section-of-a-c\n//https://stackoverflow.com/questions/2142535/how-to-clear-the-canvas-for-redrawing\n//https://stackoverflow.com/questions/25630035/javascript-getboundingclientrect-changes-while-scrolling\n//https://stackoverflow.com/questions/43193341/how-to-generate-random-pastel-or-brighter-color-in-javascript\n\n\nimport React, { useRef, useEffect, useReducer } from 'react'\n\nclass PieChart extends React.Component {\n    state = {\n        canvasWidth: 600,\n        canvasHeight: 600,\n        slices: [],\n        radius: 120\n    }\n\n    constructor(props) {\n        super(props);\n      \n        this.pieChartRef = React.createRef();\n    }\n\n    randomPastelColourCode = () => {\n        return \"hsl(\" + 360 * Math.random() + ',' +\n             (25 + 70 * Math.random()) + '%,' + \n             (80 + 10 * Math.random()) + '%)'\n    }\n\n    drawSlices = () => {\n        //!!!Ian: bookCost is the total amount spend on that stock/in that category\n        const {listToDisplay} = this.props\n        let startAngle = 0; \n        let radius = this.state.radius;\n        let cx = this.state.canvasWidth/2;\n        let cy = this.state.canvasHeight/2;\n        let total = listToDisplay.reduce( (ttl, stock) => {\n            return ttl + (stock.bookCost)\n        }, 0);\n\n        listToDisplay.forEach(element => {\n            //here the slices are draw backwards...(clockwise) so makesure to push into the list properly\n            console.log(\"Drawing slice\")\n            console.log(element.name)\n            this.context.lineWidth = 3;\n            this.context.strokeStyle = '#fafafa';\n            this.context.fillStyle = this.randomPastelColourCode();\n            let sliceColour = this.context.fillStyle;\n            this.context.beginPath();\n            \n            // draw the pie wedges\n            let endAngle = ((element.bookCost / total) * Math.PI * 2) + startAngle;\n            this.context.moveTo(cx, cy);\n            this.context.arc(cx, cy, radius, startAngle, endAngle);\n            this.context.lineTo(cx, cy);\n            this.context.fill();\n            this.context.stroke();\n            this.context.closePath();\n            \n            // add the labels\n            this.context.beginPath();\n            this.context.font = '20px Helvetica, Calibri';\n            this.context.textAlign = 'center';\n            this.context.fillStyle = 'rebeccapurple';\n            // 1.5 * radius is the length of the Hypotenuse\n            let theta = (startAngle + endAngle) / 2;\n            let deltaY = Math.sin(theta) * 1.5 * radius;\n            let deltaX = Math.cos(theta) * 1.5 * radius;\n\n            //point to label\n            this.context.strokeStyle = '#fafafa';\n            this.context.moveTo(cx+deltaX/2, cy+deltaY/2);\n            this.context.lineTo((4*deltaX/5)+cx, (4*deltaY/5)+cy);\n            this.context.stroke();\n\n            //!!!Ian: name is the name of the stock category\n            this.context.fillText(element.name, deltaX+cx, deltaY+cy);\n            let percentage = Math.round(+((element.bookCost*100)/total));\n            this.context.fillText(percentage + \"%\", (deltaX*1.3)+cx, (deltaY*1.4)+cy);\n            this.context.closePath();\n            \n\n            //store the slice information\n            this.state.slices.push({ \n                    \"name\" : element.name,\n                    \"colour\" : sliceColour,\n                    \"startAngle\" : (2*Math.PI) - endAngle,    //since arc draws the slice backwards in clockwise fasion\n                    \"endAngle\": (2*Math.PI) - startAngle,\n                    \"drawStartAngle\": startAngle,\n                    \"drawEndAngle\": endAngle,\n                    \"bookCost\": element.bookCost\n            });\n            startAngle = endAngle;\n        });\n        console.log(this.state.slices)\n    }\n\n    drawAccentedSlice = (slice, width) => {\n        const {listToDisplay} = this.props\n        let radius = this.state.radius;\n        let cx = this.state.canvasWidth/2;\n        let cy = this.state.canvasHeight/2;\n        let total = listToDisplay.reduce( (ttl, stock) => {\n            return ttl + (stock.bookCost)\n        }, 0);\n        console.log(\"Accenting slice\")\n        console.log(slice.name)\n        this.context.lineWidth = width;\n        this.context.strokeStyle = '#fafafa';\n        this.context.fillStyle = slice.colour;\n        this.context.beginPath();\n        \n        // draw the pie wedges\n        \n        this.context.moveTo(cx, cy);\n        this.context.arc(cx, cy, radius, slice.drawStartAngle, slice.drawEndAngle);\n        this.context.lineTo(cx, cy);\n        this.context.fill();\n        this.context.stroke();\n        this.context.closePath();\n        \n        // add the labels\n        if(width > 3){\n\n        \n        this.context.beginPath();\n        this.context.font = '18px Helvetica, Calibri';\n        this.context.textAlign = 'center';\n        this.context.fillStyle = 'rebeccapurple';\n        // 1.5 * radius is the length of the Hypotenuse\n        let theta = (slice.drawStartAngle + slice.drawEndAngle) / 2;\n        let deltaY = Math.sin(theta) * 1.5 * radius;\n        let deltaX = Math.cos(theta) * 1.5 * radius;\n\n        //!!!Ian: name is the name of the stock category\n        this.context.fillText(\"$\" + slice.bookCost, deltaX/2+cx, deltaY/2+cy);\n        // let percentage = Math.round(+((slice.bookCost*100)/total));\n        this.context.closePath();\n        }\n    }\n\n    componentDidMount() {\n        console.log(\"Did mount!\")\n        this.context = this.pieChartRef.current.getContext('2d');\n        let elem = document.getElementById('pieChartCanvas');\n\n        const {listToDisplay} = this.props\n        console.log(listToDisplay)\n        this.drawSlices();\n\n        //NOTE!!!!!! get bounding client rect gets the positions according to the window not the document!!!\n        let rect = elem.getBoundingClientRect();\n        \n        //add event listeners...I had to add it to a component so I used this one\n        document.addEventListener('mousewheel', (e) => {\n            rect = elem.getBoundingClientRect();\n            //console.log(rect);\n        })\n\n        document.addEventListener('mousemove', (e) => {\n    \n            let mouseX=parseInt(e.clientX);\n            let mouseY=parseInt(e.clientY);\n            let cx = this.state.canvasWidth/2;\n            let cy = this.state.canvasHeight/2;\n            //mouse is relative to the window, rect is relative to the window\n            //cx and cy are fixed\n            //relativeX and relative Y are the distances from the center of the \"pie\"(no +ve or -ve signs)\n            let relativeX = 0;\n            let relativeY = 0;\n            let angle = 0;\n      \n            // quadrant I & II:\n            if(mouseY > rect.y && mouseY < (rect.y + cy)){\n                relativeY = (cy + rect.y ) - mouseY;\n                //quadrant I:\n                if(mouseX > (rect.x + cx) && mouseX < rect.x + (2*cx)){\n                    relativeX = mouseX - (cx + rect.x);\n                    angle = Math.atan(relativeY/relativeX);\n                    // console.log(relativeX)\n                    // console.log(relativeY)\n                    // console.log(\"quad I\")\n                    // console.log(angle)\n                //quadrant II:\n                }else if(mouseX > rect.x && mouseX < (rect.x + cx)){\n                    relativeX = (cx + rect.x) - mouseX;\n                    angle = Math.PI - Math.atan(relativeY/relativeX);\n                    // console.log(relativeX)\n                    // console.log(relativeY)\n                    // console.log(\"quad II\")\n                    // console.log(angle)\n                }\n            //quadrant III & IV:\n            }else if (mouseY > cy + rect.y && mouseY < rect.y + (2*cy)){\n                relativeY = mouseY - (cy + rect.y);\n                //quadrant IV:\n                if(mouseX > (rect.x + cx) && mouseX < rect.x + (2*cx)){\n                    relativeX = mouseX - (cx + rect.x);\n                    angle = (2*Math.PI) - Math.atan(relativeY/relativeX);\n                    // console.log(relativeX)\n                    // console.log(relativeY)\n                    // console.log(\"quad IV\")\n                    // console.log(angle)\n                //quadrant III:\n                }else if(mouseX > rect.x && mouseX < (rect.x + cx)){\n                    relativeX = (cx + rect.x) - mouseX;\n                    angle = Math.PI + Math.atan(relativeY/relativeX);\n                    // console.log(relativeX)\n                    // console.log(relativeY)\n                    // console.log(\"quad III\")\n                    // console.log(angle)\n                }\n            }\n\n            //console.log(angle)\n            let distanceOk = false;\n            let distance = Math.sqrt( (relativeX * relativeX ) +  ( relativeY * relativeY));\n            if(distance < this.state.radius){\n                distanceOk = true;\n                // console.log(distance)\n                //console.log(\"Distance ok\")\n            }\n\n            for(let i=0;i<this.state.slices.length;i++){\n                let s=this.state.slices[i];\n                //check if the mouse angle matches with this slice\n                let angleOk = false;\n                if(s.startAngle < angle && angle < s.endAngle){\n                    //console.log(\"Angle ok\")\n                    //console.log(s.name)\n                    angleOk = true;\n\n                }else continue;\n             \n                if(angleOk && distanceOk){\n                    console.log(s.name)\n                    //STILL NEED TO DO SOME KIND OF UPDATE HERE\n                    this.drawAccentedSlice(s, 8);\n                    setTimeout(this.drawAccentedSlice, 1000, s, 3);\n                }\n            }\n        }); \n    }\n\n    componentDidUpdate() {\n        console.log(\"Updated!\")\n        \n        this.context = this.pieChartRef.current.getContext('2d');\n        let elem = document.getElementById('pieChartCanvas');\n        let rect = elem.getBoundingClientRect();\n        \n        const context = this.context;\n\n        //clear canvas\n        context.clearRect(0, 0, rect.width, rect.height);\n        context.beginPath();\n\n        //clear slices\n        this.state.slices = [];\n        \n        this.drawSlices();//redraw\n    }\n    \n    render() {\n        return (\n          <canvas id = \"pieChartCanvas\" ref={this.pieChartRef} width = {this.state.canvasWidth} height = {this.state.canvasHeight} />\n        )\n    }\n}\n\nexport default PieChart"]},"metadata":{},"sourceType":"module"}