{"ast":null,"code":"var _jsxFileName = \"/Users/emilyhuang/Documents/CSC309/groupProject/team06/src/components/Investments/canvasExample2.js\";\n//Tutorials followed:\n//https://stackoverflow.com/questions/33924150/how-to-access-canvas-context-in-react\n//https://stackoverflow.com/questions/27736288/how-to-fill-the-whole-canvas-with-specific-color\n//https://medium.com/@pdx.lucasm/canvas-with-react-js-32e133c05258\n//https://gist.github.com/prof3ssorSt3v3/7f16fe9397c013d364f2d4484cad3ca8\nimport React, { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Canvas extends React.Component {\n  constructor(props) {\n    super(props); // this.state = {\n    //     height: 500,\n    //     width: 500\n    // }\n\n    this.width = 0;\n    this.height = 0;\n    this.pieChartRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    console.log(`${this.pieChartRef.width}, ${this.pieChartRef.height}`); // const height = this.divElement.clientHeight;\n    // this.setState({ height });\n    // const width = this.divElement.clientWidth;\n    // this.setState({ width });\n\n    const {\n      stockList\n    } = this.props;\n    console.log(stockList);\n    this.context = this.pieChartRef.current.getContext('2d'); //     test example:\n    //    this.context.fillStyle = '#000000'\n    //    this.context.beginPath()\n    //    this.context.arc(50, 100, 20, 0, 2*Math.PI)\n    //    this.context.fill()\n\n    let total = stockList.reduce((ttl, stock) => {\n      return ttl + stock.avgCost * stock.quantity;\n    }, 0);\n    console.log(\"total\");\n    console.log(total);\n    let startAngle = 0;\n    let radius = 100;\n    let cx = 300;\n    let cy = 200;\n\n    const randomHexColorCode = () => {\n      return \"#\" + Math.random().toString(16).slice(2, 8);\n    };\n\n    stockList.forEach(element => {\n      console.log(\"Drawing slice\"); // this.context.fillStyle = '#000000';\n      // this.context.beginPath();\n      // this.context.arc(50, 100, 20, 0, 2*Math.PI)\n      // this.context.fill();\n\n      this.context.lineWidth = 1;\n      this.context.strokeStyle = '#fafafa';\n      this.context.fillStyle = randomHexColorCode();\n      this.context.beginPath(); // draw the pie wedges\n\n      let endAngle = element.avgCost * element.quantity / total * Math.PI * 2 + startAngle;\n      this.context.moveTo(cx, cy);\n      this.context.arc(cx, cy, radius, startAngle, endAngle);\n      this.context.lineTo(cx, cy);\n      this.context.fill();\n      this.context.stroke();\n      this.context.closePath(); // // add the labels\n\n      this.context.beginPath();\n      this.context.font = '20px Helvetica, Calibri';\n      this.context.textAlign = 'center';\n      this.context.fillStyle = 'rebeccapurple'; // midpoint between the two angles\n      // 1.5 * radius is the length of the Hypotenuse\n\n      let theta = (startAngle + endAngle) / 2;\n      let deltaY = Math.sin(theta) * 1.5 * radius;\n      let deltaX = Math.cos(theta) * 1.5 * radius;\n      this.context.fillText(element.name, deltaX + cx, deltaY + cy);\n      this.context.closePath();\n      startAngle = endAngle;\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: this.pieChartRef,\n      width: 600,\n      height: 600\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default Canvas;","map":{"version":3,"sources":["/Users/emilyhuang/Documents/CSC309/groupProject/team06/src/components/Investments/canvasExample2.js"],"names":["React","useRef","useEffect","Canvas","Component","constructor","props","width","height","pieChartRef","createRef","componentDidMount","console","log","stockList","context","current","getContext","total","reduce","ttl","stock","avgCost","quantity","startAngle","radius","cx","cy","randomHexColorCode","Math","random","toString","slice","forEach","element","lineWidth","strokeStyle","fillStyle","beginPath","endAngle","PI","moveTo","arc","lineTo","fill","stroke","closePath","font","textAlign","theta","deltaY","sin","deltaX","cos","fillText","name","render"],"mappings":"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","sourcesContent":["//Tutorials followed:\n//https://stackoverflow.com/questions/33924150/how-to-access-canvas-context-in-react\n//https://stackoverflow.com/questions/27736288/how-to-fill-the-whole-canvas-with-specific-color\n//https://medium.com/@pdx.lucasm/canvas-with-react-js-32e133c05258\n//https://gist.github.com/prof3ssorSt3v3/7f16fe9397c013d364f2d4484cad3ca8\n\nimport React, { useRef, useEffect } from 'react'\n\nclass Canvas extends React.Component {\n    \n    constructor(props) {\n        super(props);\n        // this.state = {\n        //     height: 500,\n        //     width: 500\n        // }\n        this.width = 0;\n        this.height = 0;\n        this.pieChartRef = React.createRef();\n\n    }\n    \n    componentDidMount() {\n        console.log(`${this.pieChartRef.width}, ${this.pieChartRef.height}`);\n        // const height = this.divElement.clientHeight;\n        // this.setState({ height });\n        // const width = this.divElement.clientWidth;\n        // this.setState({ width });\n\n        const {stockList}= this.props\n        console.log(stockList)\n        this.context = this.pieChartRef.current.getContext('2d');\n    //     test example:\n    //    this.context.fillStyle = '#000000'\n    //    this.context.beginPath()\n    //    this.context.arc(50, 100, 20, 0, 2*Math.PI)\n    //    this.context.fill()\n        let total = stockList.reduce( (ttl, stock) => {\n            return ttl + (stock.avgCost * stock.quantity)\n        }, 0);\n        console.log(\"total\")\n        console.log(total)\n        let startAngle = 0; \n        let radius = 100;\n        let cx = 300;\n        let cy = 200;\n        const randomHexColorCode = () => {\n            return \"#\" + Math.random().toString(16).slice(2, 8)\n        };\n\n        stockList.forEach(element => {\n            console.log(\"Drawing slice\")\n        \n            // this.context.fillStyle = '#000000';\n            // this.context.beginPath();\n            // this.context.arc(50, 100, 20, 0, 2*Math.PI)\n            // this.context.fill();\n\n\n            this.context.lineWidth = 1;\n            this.context.strokeStyle = '#fafafa';\n            this.context.fillStyle = randomHexColorCode();\n            this.context.beginPath();\n            \n            // draw the pie wedges\n            let endAngle = (((element.avgCost * element.quantity) / total) * Math.PI * 2) + startAngle;\n            this.context.moveTo(cx, cy);\n            this.context.arc(cx, cy, radius, startAngle, endAngle);\n            this.context.lineTo(cx, cy);\n            this.context.fill();\n            this.context.stroke();\n            this.context.closePath();\n            \n            // // add the labels\n            this.context.beginPath();\n            this.context.font = '20px Helvetica, Calibri';\n            this.context.textAlign = 'center';\n            this.context.fillStyle = 'rebeccapurple';\n            // midpoint between the two angles\n            // 1.5 * radius is the length of the Hypotenuse\n            let theta = (startAngle + endAngle) / 2;\n            let deltaY = Math.sin(theta) * 1.5 * radius;\n            let deltaX = Math.cos(theta) * 1.5 * radius;\n            this.context.fillText(element.name, deltaX+cx, deltaY+cy);\n            this.context.closePath();\n            startAngle = endAngle;\n        });\n\n        \n    }\n    \n    render() {\n        \n\n        return (\n          <canvas ref={this.pieChartRef} width = {600} height = {600}/>\n       )\n    }\n}\n\nexport default Canvas"]},"metadata":{},"sourceType":"module"}