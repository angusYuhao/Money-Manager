{"ast":null,"code":"var _jsxFileName = \"/Users/emilyhuang/Documents/CSC309/groupProject/team06/src/components/Investments/PieChart.js\";\n//Tutorials followed:\n//https://stackoverflow.com/questions/33924150/how-to-access-canvas-context-in-react\n//https://stackoverflow.com/questions/27736288/how-to-fill-the-whole-canvas-with-specific-color\n//https://medium.com/@pdx.lucasm/canvas-with-react-js-32e133c05258\n//https://gist.github.com/prof3ssorSt3v3/7f16fe9397c013d364f2d4484cad3ca8\n//https://stackoverflow.com/questions/30790010/html-canvas-hover-text\n//https://stackoverflow.com/questions/6270785/how-to-determine-whether-a-point-x-y-is-contained-within-an-arc-section-of-a-c\n//https://stackoverflow.com/questions/2142535/how-to-clear-the-canvas-for-redrawing\n//https://stackoverflow.com/questions/25630035/javascript-getboundingclientrect-changes-while-scrolling\n//https://stackoverflow.com/questions/43193341/how-to-generate-random-pastel-or-brighter-color-in-javascript\nimport React, { useRef, useEffect, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PieChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      canvasWidth: 600,\n      canvasHeight: 600,\n      slices: [],\n      radius: 120\n    };\n\n    this.lightenColour = colour => {\n      let R = parseInt(colour.substring(1, 3), 16);\n      let G = parseInt(colour.substring(3, 5), 16);\n      let B = parseInt(colour.substring(5, 7), 16);\n      R = parseInt(R * (100 + 20) / 100);\n      G = parseInt(G * (100 + 20) / 100);\n      B = parseInt(B * (100 + 20) / 100);\n      R = R < 255 ? R : 255;\n      G = G < 255 ? G : 255;\n      B = B < 255 ? B : 255;\n      let RR = R.toString(16).length == 1 ? \"0\" + R.toString(16) : R.toString(16);\n      let GG = G.toString(16).length == 1 ? \"0\" + G.toString(16) : G.toString(16);\n      let BB = B.toString(16).length == 1 ? \"0\" + B.toString(16) : B.toString(16);\n      return \"#\" + RR + GG + BB;\n    };\n\n    this.randomPastelColourCode = () => {\n      return \"hsl(\" + 360 * Math.random() + ',' + (25 + 70 * Math.random()) + '%,' + (75 + 10 * Math.random()) + '%)';\n    };\n\n    this.drawSlices = () => {\n      //Ian: change stockList to your list of categories\n      const {\n        listToDisplay\n      } = this.props;\n      let startAngle = 0;\n      let radius = this.state.radius;\n      let cx = this.state.canvasWidth / 2;\n      let cy = this.state.canvasHeight / 2;\n      let total = listToDisplay.reduce((ttl, stock) => {\n        return ttl + stock.avgCost * stock.quantity;\n      }, 0);\n      stockList.forEach(element => {\n        //here the slices are draw backwards...(clockwise)!!!!\n        console.log(\"Drawing slice\");\n        console.log(element.name);\n        this.context.lineWidth = 3;\n        this.context.strokeStyle = '#fafafa';\n        this.context.fillStyle = this.randomPastelColourCode();\n        this.context.beginPath(); // draw the pie wedges\n\n        let endAngle = element.avgCost * element.quantity / total * Math.PI * 2 + startAngle;\n        this.context.moveTo(cx, cy);\n        this.context.arc(cx, cy, radius, startAngle, endAngle);\n        this.context.lineTo(cx, cy);\n        this.context.fill();\n        this.context.stroke();\n        this.context.closePath(); // add the labels\n\n        this.context.beginPath();\n        this.context.font = '20px Helvetica, Calibri';\n        this.context.textAlign = 'center';\n        this.context.fillStyle = 'rebeccapurple'; // 1.5 * radius is the length of the Hypotenuse\n\n        let theta = (startAngle + endAngle) / 2;\n        let deltaY = Math.sin(theta) * 1.5 * radius;\n        let deltaX = Math.cos(theta) * 1.5 * radius;\n        this.context.fillText(element.name, deltaX + cx, deltaY + cy);\n        let percentage = Math.round(+(element.avgCost * element.quantity * 100 / total));\n        this.context.fillText(percentage + \"%\", deltaX * 1.3 + cx, deltaY * 1.4 + cy);\n        this.context.closePath(); //store the slice information\n\n        this.state.slices.push({\n          \"name\": element.name,\n          \"colour\": this.context.fillStyle,\n          \"startAngle\": 2 * Math.PI - endAngle,\n          //since arc draws the slice backwards\n          \"endAngle\": 2 * Math.PI - startAngle\n        });\n        startAngle = endAngle;\n      });\n      console.log(this.state.slices);\n    };\n\n    this.pieChartRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    console.log(\"Did mount!\");\n    this.context = this.pieChartRef.current.getContext('2d'); // let elem = document.querySelector('canvas');\n\n    let elem = document.getElementById('pieChartCanvas');\n    const {\n      stockList\n    } = this.props;\n    console.log(stockList);\n    this.drawSlices(); //NOTE!!!!!! get bouding client rect gets the positions according to the window not the document!!!\n\n    let rect = elem.getBoundingClientRect(); //add event listeners...I had to add it to a component so I used this one\n\n    document.addEventListener('mousewheel', e => {\n      rect = elem.getBoundingClientRect();\n      console.log(rect);\n    });\n    document.addEventListener('mousemove', e => {\n      //mouse is relative to the window, rect is relative to the window\n      //cx and cy are fixed\n      let mouseX = parseInt(e.clientX);\n      let mouseY = parseInt(e.clientY); // console.log(e.pageX)\n      // console.log(e.pageY)\n      // console.log(e.clientX)\n      // console.log(e.clientY)\n\n      let cx = this.state.canvasWidth / 2;\n      let cy = this.state.canvasHeight / 2; //relativeX and relative Y are the distances(no +ve or -ve signs)\n\n      let relativeX = 0;\n      let relativeY = 0;\n      let angle = 0; // quadrant I & II:\n\n      if (mouseY > rect.y && mouseY < rect.y + cy) {\n        relativeY = cy + rect.y - mouseY; //quadrant I:\n\n        if (mouseX > rect.x + cx && mouseX < rect.x + 2 * cx) {\n          relativeX = mouseX - (cx + rect.x);\n          angle = Math.atan(relativeY / relativeX); // console.log(relativeX)\n          // console.log(relativeY)\n          // console.log(\"quad I\")\n          // console.log(angle)\n          //quadrant II:\n        } else if (mouseX > rect.x && mouseX < rect.x + cx) {\n          relativeX = cx + rect.x - mouseX;\n          angle = Math.PI - Math.atan(relativeY / relativeX); // console.log(relativeX)\n          // console.log(relativeY)\n          // console.log(\"quad II\")\n          // console.log(angle)\n        } //quadrant III & IV:\n\n      } else if (mouseY > cy + rect.y && mouseY < rect.y + 2 * cy) {\n        relativeY = mouseY - (cy + rect.y); //quadrant IV:\n\n        if (mouseX > rect.x + cx && mouseX < rect.x + 2 * cx) {\n          relativeX = mouseX - (cx + rect.x);\n          angle = 2 * Math.PI - Math.atan(relativeY / relativeX); // console.log(relativeX)\n          // console.log(relativeY)\n          // console.log(\"quad IV\")\n          // console.log(angle)\n          //quadrant III:\n        } else if (mouseX > rect.x && mouseX < rect.x + cx) {\n          relativeX = cx + rect.x - mouseX;\n          angle = Math.PI + Math.atan(relativeY / relativeX); // console.log(relativeX)\n          // console.log(relativeY)\n          // console.log(\"quad III\")\n          // console.log(angle)\n        }\n      } //console.log(angle)\n\n\n      let distanceOk = false;\n      let distance = Math.sqrt(relativeX * relativeX + relativeY * relativeY);\n\n      if (distance < this.state.radius) {\n        distanceOk = true; // console.log(distance)\n        //console.log(\"Distance ok\")\n      }\n\n      for (let i = 0; i < this.state.slices.length; i++) {\n        let s = this.state.slices[i]; //check if the mouse angle matches with this slice\n\n        let angleOk = false;\n\n        if (s.startAngle < angle && angle < s.endAngle) {\n          //console.log(\"Angle ok\")\n          //console.log(s.name)\n          angleOk = true;\n        } else continue; //all the slices \n\n\n        if (angleOk && distanceOk) {\n          // if yes, fill the shape in red\n          //console.log(\"hovering over slice\")\n          console.log(s.name); //   s.drawcolor='red';\n        } else {// if no, fill the shape with blue\n            //   s.drawcolor=s.colour;\n          }\n      }\n    });\n  }\n\n  componentDidUpdate() {\n    console.log(\"Did update!\");\n    let elem = document.querySelector('canvas');\n    let rect = elem.getBoundingClientRect();\n    console.log(rect);\n    console.log(rect.x);\n    console.log(rect.y);\n    console.log(rect.width);\n    console.log(rect.height);\n    this.context = this.pieChartRef.current.getContext('2d');\n    const context = this.context; //clear canvas\n\n    context.clearRect(0, 0, rect.width, rect.height);\n    context.beginPath(); //clear slices\n\n    this.state.slices = [];\n    const {\n      stockList\n    } = this.props;\n    console.log(stockList);\n    this.drawSlices();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"pieChartCanvas\",\n      ref: this.pieChartRef,\n      width: this.state.canvasWidth,\n      height: this.state.canvasHeight\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default PieChart;","map":{"version":3,"sources":["/Users/emilyhuang/Documents/CSC309/groupProject/team06/src/components/Investments/PieChart.js"],"names":["React","useRef","useEffect","useReducer","PieChart","Component","constructor","props","state","canvasWidth","canvasHeight","slices","radius","lightenColour","colour","R","parseInt","substring","G","B","RR","toString","length","GG","BB","randomPastelColourCode","Math","random","drawSlices","listToDisplay","startAngle","cx","cy","total","reduce","ttl","stock","avgCost","quantity","stockList","forEach","element","console","log","name","context","lineWidth","strokeStyle","fillStyle","beginPath","endAngle","PI","moveTo","arc","lineTo","fill","stroke","closePath","font","textAlign","theta","deltaY","sin","deltaX","cos","fillText","percentage","round","push","pieChartRef","createRef","componentDidMount","current","getContext","elem","document","getElementById","rect","getBoundingClientRect","addEventListener","e","mouseX","clientX","mouseY","clientY","relativeX","relativeY","angle","y","x","atan","distanceOk","distance","sqrt","i","s","angleOk","componentDidUpdate","querySelector","width","height","clearRect","render"],"mappings":"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","sourcesContent":["//Tutorials followed:\n//https://stackoverflow.com/questions/33924150/how-to-access-canvas-context-in-react\n//https://stackoverflow.com/questions/27736288/how-to-fill-the-whole-canvas-with-specific-color\n//https://medium.com/@pdx.lucasm/canvas-with-react-js-32e133c05258\n//https://gist.github.com/prof3ssorSt3v3/7f16fe9397c013d364f2d4484cad3ca8\n//https://stackoverflow.com/questions/30790010/html-canvas-hover-text\n//https://stackoverflow.com/questions/6270785/how-to-determine-whether-a-point-x-y-is-contained-within-an-arc-section-of-a-c\n//https://stackoverflow.com/questions/2142535/how-to-clear-the-canvas-for-redrawing\n//https://stackoverflow.com/questions/25630035/javascript-getboundingclientrect-changes-while-scrolling\n//https://stackoverflow.com/questions/43193341/how-to-generate-random-pastel-or-brighter-color-in-javascript\n\n\nimport React, { useRef, useEffect, useReducer } from 'react'\n\nclass PieChart extends React.Component {\n    state = {\n        canvasWidth: 600,\n        canvasHeight: 600,\n        slices: [],\n        radius: 120\n    }\n\n    constructor(props) {\n        super(props);\n      \n        this.pieChartRef = React.createRef();\n    }\n\n    lightenColour = (colour) =>{\n        let R = parseInt(colour.substring(1,3),16);\n        let G = parseInt(colour.substring(3,5),16);\n        let B = parseInt(colour.substring(5,7),16);\n    \n        R = parseInt(R * (100 + 20) / 100);\n        G = parseInt(G * (100 + 20) / 100);\n        B = parseInt(B * (100 + 20) / 100);\n    \n        R = (R<255)?R:255;  \n        G = (G<255)?G:255;  \n        B = (B<255)?B:255;  \n    \n        let RR = ((R.toString(16).length==1)?\"0\"+R.toString(16):R.toString(16));\n        let GG = ((G.toString(16).length==1)?\"0\"+G.toString(16):G.toString(16));\n        let BB = ((B.toString(16).length==1)?\"0\"+B.toString(16):B.toString(16));\n    \n        return \"#\"+RR+GG+BB;\n    }\n\n    randomPastelColourCode = () => {\n        return \"hsl(\" + 360 * Math.random() + ',' +\n             (25 + 70 * Math.random()) + '%,' + \n             (75 + 10 * Math.random()) + '%)'\n    }\n\n    drawSlices = () => {\n        //Ian: change stockList to your list of categories\n        const {listToDisplay} = this.props\n        let startAngle = 0; \n        let radius = this.state.radius;\n        let cx = this.state.canvasWidth/2;\n        let cy = this.state.canvasHeight/2;\n        let total = listToDisplay.reduce( (ttl, stock) => {\n            return ttl + (stock.avgCost * stock.quantity)\n        }, 0);\n\n        stockList.forEach(element => {\n            //here the slices are draw backwards...(clockwise)!!!!\n            console.log(\"Drawing slice\")\n            console.log(element.name)\n            this.context.lineWidth = 3;\n            this.context.strokeStyle = '#fafafa';\n            this.context.fillStyle = this.randomPastelColourCode();\n            this.context.beginPath();\n            \n            // draw the pie wedges\n            let endAngle = (((element.avgCost * element.quantity) / total) * Math.PI * 2) + startAngle;\n            this.context.moveTo(cx, cy);\n            this.context.arc(cx, cy, radius, startAngle, endAngle);\n            this.context.lineTo(cx, cy);\n            this.context.fill();\n            this.context.stroke();\n            this.context.closePath();\n            \n            // add the labels\n            this.context.beginPath();\n            this.context.font = '20px Helvetica, Calibri';\n            this.context.textAlign = 'center';\n            this.context.fillStyle = 'rebeccapurple';\n            // 1.5 * radius is the length of the Hypotenuse\n            let theta = (startAngle + endAngle) / 2;\n            let deltaY = Math.sin(theta) * 1.5 * radius;\n            let deltaX = Math.cos(theta) * 1.5 * radius;\n            this.context.fillText(element.name, deltaX+cx, deltaY+cy);\n            let percentage = Math.round(+((element.avgCost*element.quantity*100)/total));\n            this.context.fillText(percentage + \"%\", (deltaX*1.3)+cx, (deltaY*1.4)+cy);\n            this.context.closePath();\n            \n\n            //store the slice information\n            this.state.slices.push({ \n                    \"name\" : element.name,\n                    \"colour\" : this.context.fillStyle,\n                    \"startAngle\" : (2*Math.PI) - endAngle,    //since arc draws the slice backwards\n                    \"endAngle\": (2*Math.PI) - startAngle,\n            });\n            startAngle = endAngle;\n        });\n    \n        \n        console.log(this.state.slices)\n        \n    }\n\n\n\n    componentDidMount() {\n        console.log(\"Did mount!\")\n        this.context = this.pieChartRef.current.getContext('2d');\n        // let elem = document.querySelector('canvas');\n        let elem = document.getElementById('pieChartCanvas');\n\n        const {stockList} = this.props\n        console.log(stockList)\n        this.drawSlices();\n\n        //NOTE!!!!!! get bouding client rect gets the positions according to the window not the document!!!\n        let rect = elem.getBoundingClientRect();\n        \n        \n        //add event listeners...I had to add it to a component so I used this one\n        document.addEventListener('mousewheel', (e) => {\n            rect = elem.getBoundingClientRect();\n            console.log(rect);\n        })\n\n\n        document.addEventListener('mousemove', (e) => {\n            //mouse is relative to the window, rect is relative to the window\n            //cx and cy are fixed\n\n            let mouseX=parseInt(e.clientX);\n            let mouseY=parseInt(e.clientY);\n            // console.log(e.pageX)\n            // console.log(e.pageY)\n            // console.log(e.clientX)\n            // console.log(e.clientY)\n           \n            let cx = this.state.canvasWidth/2;\n            let cy = this.state.canvasHeight/2;\n\n            //relativeX and relative Y are the distances(no +ve or -ve signs)\n            let relativeX = 0;\n            let relativeY = 0;\n            let angle = 0;\n      \n            // quadrant I & II:\n            if(mouseY > rect.y && mouseY < (rect.y + cy)){\n                relativeY = (cy + rect.y ) - mouseY;\n                //quadrant I:\n                if(mouseX > (rect.x + cx) && mouseX < rect.x + (2*cx)){\n                    relativeX = mouseX - (cx + rect.x);\n                    angle = Math.atan(relativeY/relativeX);\n                    // console.log(relativeX)\n                    // console.log(relativeY)\n                    // console.log(\"quad I\")\n                    // console.log(angle)\n                //quadrant II:\n                }else if(mouseX > rect.x && mouseX < (rect.x + cx)){\n                    relativeX = (cx + rect.x) - mouseX;\n                    angle = Math.PI - Math.atan(relativeY/relativeX);\n                    // console.log(relativeX)\n                    // console.log(relativeY)\n                    // console.log(\"quad II\")\n                    // console.log(angle)\n                }\n            //quadrant III & IV:\n            }else if (mouseY > cy + rect.y && mouseY < rect.y + (2*cy)){\n                relativeY = mouseY - (cy + rect.y);\n                //quadrant IV:\n                if(mouseX > (rect.x + cx) && mouseX < rect.x + (2*cx)){\n                    relativeX = mouseX - (cx + rect.x);\n                    angle = (2*Math.PI) - Math.atan(relativeY/relativeX);\n                    // console.log(relativeX)\n                    // console.log(relativeY)\n                    // console.log(\"quad IV\")\n                    // console.log(angle)\n                //quadrant III:\n                }else if(mouseX > rect.x && mouseX < (rect.x + cx)){\n                    relativeX = (cx + rect.x) - mouseX;\n                    angle = Math.PI + Math.atan(relativeY/relativeX);\n                    // console.log(relativeX)\n                    // console.log(relativeY)\n                    // console.log(\"quad III\")\n                    // console.log(angle)\n                }\n            }\n\n            //console.log(angle)\n            let distanceOk = false;\n            let distance = Math.sqrt( (relativeX * relativeX ) +  ( relativeY * relativeY));\n            if(distance < this.state.radius){\n                distanceOk = true;\n                // console.log(distance)\n                //console.log(\"Distance ok\")\n            }\n\n            for(let i=0;i<this.state.slices.length;i++){\n                let s=this.state.slices[i];\n                //check if the mouse angle matches with this slice\n                let angleOk = false;\n                if(s.startAngle < angle && angle < s.endAngle){\n                    //console.log(\"Angle ok\")\n                    //console.log(s.name)\n                    angleOk = true;\n\n                }else continue;\n             \n                //all the slices \n                if(angleOk && distanceOk){\n                  // if yes, fill the shape in red\n                  //console.log(\"hovering over slice\")\n                    console.log(s.name)\n\n                //   s.drawcolor='red';\n                  \n                }else{\n                  // if no, fill the shape with blue\n                //   s.drawcolor=s.colour;\n                }\n                \n              }\n        }); \n    }\n\n    componentDidUpdate() {\n        console.log(\"Did update!\")\n        let elem  = document.querySelector('canvas');\n        let rect = elem.getBoundingClientRect();\n        console.log(rect);\n        console.log(rect.x)\n        console.log(rect.y)\n        console.log(rect.width)\n        console.log(rect.height)\n\n        this.context = this.pieChartRef.current.getContext('2d');\n        const context = this.context;\n\n        //clear canvas\n        context.clearRect(0, 0, rect.width, rect.height);\n        context.beginPath();\n\n        //clear slices\n        this.state.slices = [];\n        \n        const {stockList} = this.props\n        console.log(stockList)\n\n        this.drawSlices();\n    }\n    \n    render() {\n        return (\n          <canvas id = \"pieChartCanvas\" ref={this.pieChartRef} width = {this.state.canvasWidth} height = {this.state.canvasHeight} />\n        )\n    }\n}\n\nexport default PieChart"]},"metadata":{},"sourceType":"module"}