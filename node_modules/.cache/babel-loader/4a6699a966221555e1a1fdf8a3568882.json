{"ast":null,"code":"var _jsxFileName = \"/Users/emilyhuang/Documents/CSC309/groupProject/team06/src/components/Investments/PieChart.js\";\n//Tutorials followed:\n//https://stackoverflow.com/questions/33924150/how-to-access-canvas-context-in-react\n//https://stackoverflow.com/questions/27736288/how-to-fill-the-whole-canvas-with-specific-color\n//https://medium.com/@pdx.lucasm/canvas-with-react-js-32e133c05258\n//https://gist.github.com/prof3ssorSt3v3/7f16fe9397c013d364f2d4484cad3ca8\n//https://stackoverflow.com/questions/30790010/html-canvas-hover-text\n//https://stackoverflow.com/questions/6270785/how-to-determine-whether-a-point-x-y-is-contained-within-an-arc-section-of-a-c\n//https://stackoverflow.com/questions/2142535/how-to-clear-the-canvas-for-redrawing\n//https://stackoverflow.com/questions/25630035/javascript-getboundingclientrect-changes-while-scrolling\n//https://stackoverflow.com/questions/43193341/how-to-generate-random-pastel-or-brighter-color-in-javascript\nimport React, { useRef, useEffect, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PieChart extends React.Component {\n  constructor(props) {\n    const {\n      pieChartSize\n    } = this.props;\n    this.state.canvasHeight = pieChartSize;\n    this.state.canvasWidth = pieChartSize;\n    this.pieChartRef = /*#__PURE__*/React.createRef();\n    this.state.canvasHeight;\n  }\n\n  componentDidMount() {\n    console.log(\"Did mount!\");\n    this.context = this.pieChartRef.current.getContext('2d');\n    let elem = document.getElementById('pieChartCanvas');\n    const {\n      listToDisplay\n    } = this.props;\n    console.log(listToDisplay);\n    this.drawSlices(); //NOTE!!!!!! get bounding client rect gets the positions according to the window not the document!!!\n\n    let rect = elem.getBoundingClientRect(); //add event listeners...I had to add it to a component so I used this one\n\n    document.addEventListener('mousewheel', e => {\n      rect = elem.getBoundingClientRect();\n    });\n    document.addEventListener('mousemove', e => {\n      let mouseX = parseInt(e.clientX);\n      let mouseY = parseInt(e.clientY);\n      let cx = this.state.canvasWidth / 2;\n      let cy = this.state.canvasHeight / 2; //mouse is relative to the window, rect is relative to the window\n      //cx and cy are fixed\n      //relativeX and relative Y are the distances from the center of the \"pie\"(no +ve or -ve signs)\n\n      let relativeX;\n      let relativeY;\n      let angle; // quadrant I & II:\n\n      if (mouseY > rect.y && mouseY < rect.y + cy) {\n        relativeY = cy + rect.y - mouseY; //quadrant I:\n\n        if (mouseX > rect.x + cx && mouseX < rect.x + 2 * cx) {\n          // console.log(mouseX);\n          // console.log(rect.x + cx);\n          relativeX = mouseX - (cx + rect.x);\n          angle = Math.atan(relativeY / relativeX); // console.log(relativeX)\n          // console.log(relativeY)\n          // console.log(\"quad I\")\n          // console.log(angle)\n          //quadrant II:\n        } else if (mouseX > rect.x && mouseX < rect.x + cx) {\n          relativeX = cx + rect.x - mouseX;\n          angle = Math.PI - Math.atan(relativeY / relativeX); // console.log(relativeX)\n          // console.log(relativeY)\n          // console.log(\"quad II\")\n          // console.log(angle)\n        } //quadrant III & IV:\n\n      } else if (mouseY > cy + rect.y && mouseY < rect.y + 2 * cy) {\n        relativeY = mouseY - (cy + rect.y); //quadrant IV:\n\n        if (mouseX > rect.x + cx && mouseX < rect.x + 2 * cx) {\n          relativeX = mouseX - (cx + rect.x);\n          angle = 2 * Math.PI - Math.atan(relativeY / relativeX); // console.log(relativeX)\n          // console.log(relativeY)\n          // console.log(\"quad IV\")\n          // console.log(angle)\n          //quadrant III:\n        } else if (mouseX > rect.x && mouseX < rect.x + cx) {\n          relativeX = cx + rect.x - mouseX;\n          angle = Math.PI + Math.atan(relativeY / relativeX); // console.log(relativeX)\n          // console.log(relativeY)\n          // console.log(\"quad III\")\n          // console.log(angle)\n        }\n      } //console.log(angle)\n\n\n      let distanceOk = false;\n      let distance = Math.sqrt(relativeX * relativeX + relativeY * relativeY);\n\n      if (distance < this.state.radius) {\n        distanceOk = true; // console.log(distance)\n        // console.log(\"Distance ok\")\n      }\n\n      for (let i = 0; i < this.state.slices.length; i++) {\n        let s = this.state.slices[i]; //check if the mouse angle matches with this slice\n\n        if (s.startAngle < angle && angle < s.endAngle) {\n          if (distanceOk) {\n            this.drawAccentedSlice(s, 1);\n            setTimeout(this.drawAccentedSlice, 1000, s, 0);\n            distanceOk = false;\n          }\n        } else continue;\n      }\n    });\n  }\n\n  componentDidUpdate() {\n    this.context = this.pieChartRef.current.getContext('2d');\n    let elem = document.getElementById('pieChartCanvas');\n    let rect = elem.getBoundingClientRect();\n    const context = this.context; //clear canvas\n\n    context.clearRect(0, 0, rect.width, rect.height);\n    context.beginPath(); //clear slices\n\n    this.state.slices = [];\n    this.drawSlices(); //redraw\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"pieChartCanvas\",\n      ref: this.pieChartRef,\n      width: this.state.pieChartSize,\n      height: this.state.pieChartSize\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default PieChart;","map":{"version":3,"sources":["/Users/emilyhuang/Documents/CSC309/groupProject/team06/src/components/Investments/PieChart.js"],"names":["React","useRef","useEffect","useReducer","PieChart","Component","constructor","props","pieChartSize","state","canvasHeight","canvasWidth","pieChartRef","createRef","componentDidMount","console","log","context","current","getContext","elem","document","getElementById","listToDisplay","drawSlices","rect","getBoundingClientRect","addEventListener","e","mouseX","parseInt","clientX","mouseY","clientY","cx","cy","relativeX","relativeY","angle","y","x","Math","atan","PI","distanceOk","distance","sqrt","radius","i","slices","length","s","startAngle","endAngle","drawAccentedSlice","setTimeout","componentDidUpdate","clearRect","width","height","beginPath","render"],"mappings":"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","sourcesContent":["//Tutorials followed:\n//https://stackoverflow.com/questions/33924150/how-to-access-canvas-context-in-react\n//https://stackoverflow.com/questions/27736288/how-to-fill-the-whole-canvas-with-specific-color\n//https://medium.com/@pdx.lucasm/canvas-with-react-js-32e133c05258\n//https://gist.github.com/prof3ssorSt3v3/7f16fe9397c013d364f2d4484cad3ca8\n//https://stackoverflow.com/questions/30790010/html-canvas-hover-text\n//https://stackoverflow.com/questions/6270785/how-to-determine-whether-a-point-x-y-is-contained-within-an-arc-section-of-a-c\n//https://stackoverflow.com/questions/2142535/how-to-clear-the-canvas-for-redrawing\n//https://stackoverflow.com/questions/25630035/javascript-getboundingclientrect-changes-while-scrolling\n//https://stackoverflow.com/questions/43193341/how-to-generate-random-pastel-or-brighter-color-in-javascript\n\n\nimport React, { useRef, useEffect, useReducer } from 'react'\n\nclass PieChart extends React.Component {\n    state = {\n        canvasWidth: 600,\n        canvasHeight: 600,\n        slices: [],\n        radius: 125,\n    }\n\n    constructor(props) {\n        const {pieChartSize} = this.props;\n        this.state.canvasHeight = pieChartSize;\n        this.state.canvasWidth = pieChartSize;\n        \n        this.pieChartRef = React.createRef();\n        this.state.canvasHeight;\n    }\n\n    randomPastelColourCode = () => {\n        return \"hsl(\" + 360 * Math.random() + ',' +\n             (25 + 70 * Math.random()) + '%,' + \n             (80 + 10 * Math.random()) + '%)'\n    }\n\n    drawSlices = () => {\n        //!!!Ian: bookCost is the total amount spend on that stock/in that category\n        const {listToDisplay} = this.props\n        let startAngle = 0; \n        let radius = this.state.radius;\n        let cx = this.state.canvasWidth/2;\n        let cy = this.state.canvasHeight/2;\n        let total = listToDisplay.reduce( (ttl, stock) => {\n            return ttl + (stock.bookCost)\n        }, 0);\n        \n\n        listToDisplay.forEach(element => {\n            //here the slices are draw backwards...(clockwise) so makesure to push into the list properly\n           \n            this.context.lineWidth = 3;\n            this.context.strokeStyle = '#fafafa';\n            this.context.fillStyle = this.randomPastelColourCode();\n            let sliceColour = this.context.fillStyle;\n            this.context.beginPath();\n            \n            // draw the pie wedges\n            let endAngle = ((element.bookCost / total) * Math.PI * 2) + startAngle;\n            this.context.moveTo(cx, cy);\n            this.context.arc(cx, cy, radius, startAngle, endAngle);\n            this.context.lineTo(cx, cy);\n            this.context.fill();\n            this.context.stroke();\n            this.context.closePath();\n            \n            // add the labels\n            this.context.beginPath();\n            this.context.font = '20px Helvetica, Calibri';\n            this.context.textAlign = 'center';\n            this.context.fillStyle = 'rebeccapurple';\n            // 1.5 * radius is the length of the Hypotenuse\n            let theta = (startAngle + endAngle) / 2.0;\n            let deltaY = Math.sin(theta) * 1.5 * radius;\n            let deltaX = Math.cos(theta) * 1.5 * radius;\n\n            //point to label\n            this.context.strokeStyle = 'rebeccapurple';\n            this.context.moveTo(cx+deltaX/1.65, cy+deltaY/1.65);\n            this.context.lineTo((4*deltaX/5)+cx, (4*deltaY/5)+cy);\n            this.context.stroke();\n\n            //!!!Ian: name is the name of the stock category\n            let percentage = Math.round(+((element.bookCost*100)/total));\n            this.context.fillText(element.name + \" (\" + percentage + \"%)\", deltaX+cx, deltaY+cy);\n            \n            //this.context.fillText(percentage + \"%\", (deltaX*1.3)+cx, (deltaY*1.4)+cy);\n            this.context.closePath();\n            \n\n            //store the slice information\n            this.state.slices.push({ \n                    \"name\" : element.name,\n                    \"colour\" : sliceColour,\n                    \"startAngle\" : (2.0*Math.PI) - endAngle,    //since arc draws the slice backwards in clockwise fasion\n                    \"endAngle\": (2.0*Math.PI) - startAngle,\n                    \"drawStartAngle\": startAngle,\n                    \"drawEndAngle\": endAngle,\n                    \"bookCost\": element.bookCost\n            });\n            startAngle = endAngle;\n        });\n        //console.log(this.state.slices)\n    }\n\n    drawAccentedSlice = (slice, accented) => {\n        let radius = parseFloat(this.state.radius);\n        let cx = parseFloat(this.state.canvasWidth/2);\n        let cy = parseFloat(this.state.canvasHeight/2);\n        this.context.strokeStyle = '#fafafa';\n        this.context.fillStyle = slice.colour;\n        \n        this.context.beginPath();\n        \n        // draw the pie wedges\n        this.context.moveTo(cx, cy);\n        this.context.arc(cx, cy, radius, slice.drawStartAngle, slice.drawEndAngle);\n        this.context.lineTo(cx, cy);\n        this.context.fill();\n        this.context.stroke();\n        this.context.closePath();\n\n        this.context.beginPath();  \n        this.context.font = '20px Helvetica, Calibri';\n        this.context.textAlign = 'center';\n        this.context.fillStyle = 'rebeccapurple';\n        this.context.strokeStyle = 'rebeccapurple';\n\n        let theta = (slice.drawStartAngle + slice.drawEndAngle) / 2.0;\n        let deltaY = parseFloat(Math.sin(theta) * 1.5 * radius);\n        let deltaX = parseFloat(Math.cos(theta) * 1.5 * radius);\n        \n\n        \n        // add the labels\n        if(accented == 1){\n            // this.context.moveTo(cx+deltaX/1.65, cy+deltaY/1.65);\n            // this.context.lineTo((4.0*deltaX/5)+cx, (4.0*deltaY/5)+cy);\n            // this.context.stroke();\n\n            //!!!Ian: name is the name of the stock category\n            this.context.fillText(\"$\" + slice.bookCost, deltaX/2+cx, deltaY/2+cy);\n            this.context.closePath();\n        }else{\n            this.context.translate(0.05, 0.05);\n            this.context.moveTo(parseFloat(cx+deltaX/1.65), parseFloat(cy+deltaY/1.65));\n            this.context.lineTo(parseFloat((4.0*deltaX/5)+cx), parseFloat((4.0*deltaY/5)+cy));\n            this.context.lineWidth = 3;\n            this.context.stroke();\n            this.context.closePath();\n            this.context.translate(-0.05, -0.05);\n        }\n        \n    }\n\n    componentDidMount() {\n        console.log(\"Did mount!\")\n        this.context = this.pieChartRef.current.getContext('2d');\n        let elem = document.getElementById('pieChartCanvas');\n\n        const {listToDisplay} = this.props\n        console.log(listToDisplay)\n        this.drawSlices();\n\n        //NOTE!!!!!! get bounding client rect gets the positions according to the window not the document!!!\n        let rect = elem.getBoundingClientRect();\n        \n        //add event listeners...I had to add it to a component so I used this one\n        document.addEventListener('mousewheel', (e) => {\n            rect = elem.getBoundingClientRect();\n        })\n\n        document.addEventListener('mousemove', (e) => {\n    \n            let mouseX=parseInt(e.clientX);\n            let mouseY=parseInt(e.clientY);\n            let cx = this.state.canvasWidth/2;\n            let cy = this.state.canvasHeight/2;\n            //mouse is relative to the window, rect is relative to the window\n            //cx and cy are fixed\n            //relativeX and relative Y are the distances from the center of the \"pie\"(no +ve or -ve signs)\n            let relativeX;\n            let relativeY;\n            let angle;\n      \n            // quadrant I & II:\n            if(mouseY > rect.y && mouseY < (rect.y + cy)){\n                relativeY = (cy + rect.y ) - mouseY;\n                //quadrant I:\n                if(mouseX > (rect.x + cx) && mouseX < rect.x + (2*cx)){\n                    // console.log(mouseX);\n                    // console.log(rect.x + cx);\n                    relativeX = mouseX - (cx + rect.x);\n                    angle = Math.atan(relativeY/relativeX);\n\n                    // console.log(relativeX)\n                    // console.log(relativeY)\n                    // console.log(\"quad I\")\n                    // console.log(angle)\n                //quadrant II:\n                }else if(mouseX > rect.x && mouseX < (rect.x + cx)){\n                    relativeX = (cx + rect.x) - mouseX;\n                    angle = Math.PI - Math.atan(relativeY/relativeX);\n                    // console.log(relativeX)\n                    // console.log(relativeY)\n                    // console.log(\"quad II\")\n                    // console.log(angle)\n                }\n            //quadrant III & IV:\n            }else if (mouseY > cy + rect.y && mouseY < rect.y + (2*cy)){\n                relativeY = mouseY - (cy + rect.y);\n                //quadrant IV:\n                if(mouseX > (rect.x + cx) && mouseX < rect.x + (2*cx)){\n                    relativeX = mouseX - (cx + rect.x);\n                    angle = (2*Math.PI) - Math.atan(relativeY/relativeX);\n                    // console.log(relativeX)\n                    // console.log(relativeY)\n                    // console.log(\"quad IV\")\n                    // console.log(angle)\n                //quadrant III:\n                }else if(mouseX > rect.x && mouseX < (rect.x + cx)){\n                    relativeX = (cx + rect.x) - mouseX;\n                    angle = Math.PI + Math.atan(relativeY/relativeX);\n                    // console.log(relativeX)\n                    // console.log(relativeY)\n                    // console.log(\"quad III\")\n                    // console.log(angle)\n                }\n            }\n\n            //console.log(angle)\n            let distanceOk = false;\n        \n            let distance = Math.sqrt( (relativeX * relativeX ) +  ( relativeY * relativeY));\n            if(distance < this.state.radius){\n                distanceOk = true;\n                // console.log(distance)\n                // console.log(\"Distance ok\")\n            }\n\n            for(let i=0;i<this.state.slices.length;i++){\n                let s=this.state.slices[i];\n                //check if the mouse angle matches with this slice\n                if(s.startAngle < angle && angle < s.endAngle){\n                    \n                    if(distanceOk){\n                        this.drawAccentedSlice(s, 1);\n                        setTimeout(this.drawAccentedSlice, 1000, s, 0);\n                        distanceOk = false;\n                    }\n                }else continue;\n            }\n        }); \n    }\n\n    componentDidUpdate() {        \n        this.context = this.pieChartRef.current.getContext('2d');\n        let elem = document.getElementById('pieChartCanvas');\n        let rect = elem.getBoundingClientRect();\n        \n        const context = this.context;\n\n        //clear canvas\n        context.clearRect(0, 0, rect.width, rect.height);\n        context.beginPath();\n\n        //clear slices\n        this.state.slices = [];\n        \n        this.drawSlices();//redraw\n    }\n    \n    render() {\n        return (\n          <canvas id = \"pieChartCanvas\" ref={this.pieChartRef} width = {this.state.pieChartSize} height = {this.state.pieChartSize}  />\n        )\n    }\n}\n\nexport default PieChart"]},"metadata":{},"sourceType":"module"}