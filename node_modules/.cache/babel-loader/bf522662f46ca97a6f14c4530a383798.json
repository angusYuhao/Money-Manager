{"ast":null,"code":"var _jsxFileName = \"/Users/emilyhuang/Documents/CSC309/groupProject/team06/src/components/Investments/canvasExample2.js\";\n//Tutorials followed:\n//https://stackoverflow.com/questions/33924150/how-to-access-canvas-context-in-react\n//https://stackoverflow.com/questions/27736288/how-to-fill-the-whole-canvas-with-specific-color\nimport React, { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Canvas extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      height: 500,\n      width: 500\n    };\n    this.pieChartRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    const {\n      stockList\n    } = this.props;\n    console.log(stockList);\n    this.context = this.pieChartRef.current.getContext('2d'); //     test example:\n    //    this.context.fillStyle = '#000000'\n    //    this.context.beginPath()\n    //    this.context.arc(50, 100, 20, 0, 2*Math.PI)\n    //    this.context.fill()\n\n    let total = stockList.reduce((ttl, stock) => {\n      return ttl + stock.avgCost * stock.quantity;\n    }, 0);\n    console.log(\"total\");\n    console.log(total);\n    let startAngle = 0;\n    let radius = 20;\n    let cx = 10;\n    let cy = 10;\n    stockList.forEach(element => {\n      console.log(\"Drawing slice\"); // this.context.fillStyle = '#000000';\n      // this.context.beginPath();\n      // this.context.arc(50, 100, 20, 0, 2*Math.PI)\n      // this.context.fill();\n\n      this.context.lineWidth = 1;\n      this.context.strokeStyle = '#333';\n      this.context.fillStyle = '#000000';\n      this.context.beginPath(); // draw the pie wedges\n\n      let endAngle = element.avgCost * element.quantity / total * Math.PI * 2 + startAngle;\n      this.context.moveTo(cx, cy);\n      this.context.arc(cx, cy, radius, startAngle, endAngle, false);\n      this.context.lineTo(cx, cy);\n      this.context.fill();\n      this.context.stroke();\n      this.context.closePath(); // // add the labels\n      // this.context.beginPath();\n      // this.context.font = '20px Helvetica, Calibri';\n      // this.context.textAlign = 'center';\n      // this.context.fillStyle = 'rebeccapurple';\n      // // midpoint between the two angles\n      // // 1.5 * radius is the length of the Hypotenuse\n      // let theta = (startAngle + endAngle) / 2;\n      // let deltaY = Math.sin(theta) * 1.5 * radius;\n      // let deltaX = Math.cos(theta) * 1.5 * radius;\n      // this.context.fillText(element.name, deltaX+cx, deltaY+cy);\n      // this.context.closePath();\n      // startAngle = endAngle;\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: this.pieChartRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default Canvas;","map":{"version":3,"sources":["/Users/emilyhuang/Documents/CSC309/groupProject/team06/src/components/Investments/canvasExample2.js"],"names":["React","useRef","useEffect","Canvas","Component","constructor","props","state","height","width","pieChartRef","createRef","componentDidMount","stockList","console","log","context","current","getContext","total","reduce","ttl","stock","avgCost","quantity","startAngle","radius","cx","cy","forEach","element","lineWidth","strokeStyle","fillStyle","beginPath","endAngle","Math","PI","moveTo","arc","lineTo","fill","stroke","closePath","render"],"mappings":";AAAA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;;;AAEA,MAAMC,MAAN,SAAqBH,KAAK,CAACI,SAA3B,CAAqC;AAEjCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAE,GADC;AAETC,MAAAA,KAAK,EAAE;AAFE,KAAb;AAIA,SAAKC,WAAL,gBAAmBV,KAAK,CAACW,SAAN,EAAnB;AAEH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,UAAM;AAACC,MAAAA;AAAD,QAAa,KAAKP,KAAxB;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACA,SAAKG,OAAL,GAAe,KAAKN,WAAL,CAAiBO,OAAjB,CAAyBC,UAAzB,CAAoC,IAApC,CAAf,CAHgB,CAIpB;AACA;AACA;AACA;AACA;;AACI,QAAIC,KAAK,GAAGN,SAAS,CAACO,MAAV,CAAkB,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAC1C,aAAOD,GAAG,GAAIC,KAAK,CAACC,OAAN,GAAgBD,KAAK,CAACE,QAApC;AACH,KAFW,EAET,CAFS,CAAZ;AAGAV,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACA,QAAIM,UAAU,GAAG,CAAjB;AACA,QAAIC,MAAM,GAAG,EAAb;AACA,QAAIC,EAAE,GAAG,EAAT;AACA,QAAIC,EAAE,GAAG,EAAT;AAEAf,IAAAA,SAAS,CAACgB,OAAV,CAAkBC,OAAO,IAAI;AACzBhB,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EADyB,CAGzB;AACA;AACA;AACA;;AAGA,WAAKC,OAAL,CAAae,SAAb,GAAyB,CAAzB;AACA,WAAKf,OAAL,CAAagB,WAAb,GAA2B,MAA3B;AACA,WAAKhB,OAAL,CAAaiB,SAAb,GAAyB,SAAzB;AACA,WAAKjB,OAAL,CAAakB,SAAb,GAZyB,CAczB;;AACA,UAAIC,QAAQ,GAAML,OAAO,CAACP,OAAR,GAAkBO,OAAO,CAACN,QAA3B,GAAuCL,KAAxC,GAAiDiB,IAAI,CAACC,EAAtD,GAA2D,CAA5D,GAAiEZ,UAAhF;AACA,WAAKT,OAAL,CAAasB,MAAb,CAAoBX,EAApB,EAAwBC,EAAxB;AACA,WAAKZ,OAAL,CAAauB,GAAb,CAAiBZ,EAAjB,EAAqBC,EAArB,EAAyBF,MAAzB,EAAiCD,UAAjC,EAA6CU,QAA7C,EAAuD,KAAvD;AACA,WAAKnB,OAAL,CAAawB,MAAb,CAAoBb,EAApB,EAAwBC,EAAxB;AACA,WAAKZ,OAAL,CAAayB,IAAb;AACA,WAAKzB,OAAL,CAAa0B,MAAb;AACA,WAAK1B,OAAL,CAAa2B,SAAb,GArByB,CAuBzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,KApCD;AAuCH;;AAEDC,EAAAA,MAAM,GAAG;AAGL,wBACE;AAAQ,MAAA,GAAG,EAAE,KAAKlC;AAAlB;AAAA;AAAA;AAAA;AAAA,YADF;AAGH;;AA9EgC;;AAiFrC,eAAeP,MAAf","sourcesContent":["//Tutorials followed:\n//https://stackoverflow.com/questions/33924150/how-to-access-canvas-context-in-react\n//https://stackoverflow.com/questions/27736288/how-to-fill-the-whole-canvas-with-specific-color\n\nimport React, { useRef, useEffect } from 'react'\n\nclass Canvas extends React.Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            height: 500,\n            width: 500\n        }\n        this.pieChartRef = React.createRef();\n\n    }\n    \n    componentDidMount() {\n        const {stockList}= this.props\n        console.log(stockList)\n        this.context = this.pieChartRef.current.getContext('2d');\n    //     test example:\n    //    this.context.fillStyle = '#000000'\n    //    this.context.beginPath()\n    //    this.context.arc(50, 100, 20, 0, 2*Math.PI)\n    //    this.context.fill()\n        let total = stockList.reduce( (ttl, stock) => {\n            return ttl + (stock.avgCost * stock.quantity)\n        }, 0);\n        console.log(\"total\")\n        console.log(total)\n        let startAngle = 0; \n        let radius = 20;\n        let cx = 10;\n        let cy = 10;\n\n        stockList.forEach(element => {\n            console.log(\"Drawing slice\")\n        \n            // this.context.fillStyle = '#000000';\n            // this.context.beginPath();\n            // this.context.arc(50, 100, 20, 0, 2*Math.PI)\n            // this.context.fill();\n\n\n            this.context.lineWidth = 1;\n            this.context.strokeStyle = '#333';\n            this.context.fillStyle = '#000000';\n            this.context.beginPath();\n            \n            // draw the pie wedges\n            let endAngle = (((element.avgCost * element.quantity) / total) * Math.PI * 2) + startAngle;\n            this.context.moveTo(cx, cy);\n            this.context.arc(cx, cy, radius, startAngle, endAngle, false);\n            this.context.lineTo(cx, cy);\n            this.context.fill();\n            this.context.stroke();\n            this.context.closePath();\n            \n            // // add the labels\n            // this.context.beginPath();\n            // this.context.font = '20px Helvetica, Calibri';\n            // this.context.textAlign = 'center';\n            // this.context.fillStyle = 'rebeccapurple';\n            // // midpoint between the two angles\n            // // 1.5 * radius is the length of the Hypotenuse\n            // let theta = (startAngle + endAngle) / 2;\n            // let deltaY = Math.sin(theta) * 1.5 * radius;\n            // let deltaX = Math.cos(theta) * 1.5 * radius;\n            // this.context.fillText(element.name, deltaX+cx, deltaY+cy);\n            // this.context.closePath();\n            // startAngle = endAngle;\n        });\n\n        \n    }\n    \n    render() {\n        \n\n        return (\n          <canvas ref={this.pieChartRef} />\n       )\n    }\n}\n\nexport default Canvas"]},"metadata":{},"sourceType":"module"}