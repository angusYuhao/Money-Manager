{"ast":null,"code":"var _jsxFileName = \"/Users/emilyhuang/Documents/CSC309/groupProject/team06/src/components/Table/index.js\";\nimport React from 'react';\nimport TableRowComp from '../TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport IconButton from '@material-ui/core/IconButton';\nimport AddIcon from '@material-ui/icons/Add';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { Alert } from '@material-ui/lab';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport TextField from '@material-ui/core/TextField';\nimport \"./table.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TableComp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // true -> displays the new row to be added to table, false -> hides the new row to be added to table \n      add: false,\n      // the default values for the new row to be added to table \n      newRow: [],\n      // array that holds all the snacks (notifications) that remains to be shown \n      snacks: [],\n      // the message that the snack should currently display\n      currentSnackMsg: undefined,\n      // true -> displays the snack, false -> hides the snack\n      displaySnack: false,\n      // the categories menu position on the screen\n      menuPosition: null,\n      // the category name that the user can input to add customized category\n      newCategory: \"\"\n    };\n  } // this function is called whenever there's a change in the DOM \n\n\n  componentDidUpdate() {\n    // if there is a snack message to be shown but we currently don't have the snack opened \n    if (this.state.snacks.length && !this.state.currentSnackMsg) {\n      this.setState({\n        currentSnackMsg: this.state.snacks[0]\n      });\n      this.setState({\n        snacks: this.state.snacks.slice(1)\n      });\n      this.setState({\n        displaySnack: true\n      });\n    } // if there is a snack message to be shown and we are already displaying a snack, close the active one \n    else if (this.state.snacks.length && this.state.currentSnackMsg && this.state.displaySnack) {\n        this.setState({\n          displaySnack: false\n        });\n      }\n  } // handles action for the 'plus' button to add a new row to table \n\n\n  addRowHandler() {\n    // the new rows will contain the headings for the table (can be changed if needed)\n    const newData = {};\n    this.props.headings.map((value, index) => {\n      newData[value] = null; // if (this.props.options[index] == \"Date\") newData[value] = null\n      // else newData[value] = value\n    });\n    this.setState({\n      newRow: newData\n    });\n    this.toggleAdd();\n  }\n\n  toggleAdd() {\n    this.setState({\n      add: !this.state.add\n    });\n  } // displays categories menu\n\n\n  displayCategories(e) {\n    this.setState({\n      menuPosition: e.currentTarget\n    });\n  }\n\n  hideCategories() {\n    this.setState({\n      menuPosition: null\n    });\n  } // updates the category string as user is inputting \n\n\n  updateCategory(e) {\n    this.state.newCategory = e.target.value;\n    this.setState({\n      newCategory: this.state.newCategory\n    });\n  } // adds a message to the snack array \n\n\n  addSnack(message) {\n    this.state.snacks.push(message);\n    this.setState({\n      snacks: this.state.snacks\n    });\n  }\n\n  snackBarOnClose() {\n    this.setState({\n      displaySnack: false\n    });\n  }\n\n  snackBarOnExited() {\n    this.setState({\n      currentSnackMsg: undefined\n    });\n  } // renders different helper messages depending on the error or success \n\n\n  renderHelperMsg() {\n    switch (this.state.currentSnackMsg) {\n      case \"addError\":\n        return \"Could not add, please check the fields.\";\n\n      case \"editError\":\n        return \"Could not edit, please check the fields.\";\n\n      case \"addSuccess\":\n        return \"Added successfully!\";\n\n      case \"editSuccess\":\n        return \"Edited successfully!\";\n\n      case \"deleteSuccess\":\n        return \"Deleted successfully!\";\n\n      default:\n        return \"\";\n    }\n  }\n\n  render() {\n    const {\n      headings,\n      data,\n      options,\n      categories,\n      addRow,\n      editRow,\n      removeRow,\n      addCategory,\n      removeCategory\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        children: /*#__PURE__*/_jsxDEV(TableContainer, {\n          className: \"TableContainer\",\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            stickyHeader: true,\n            \"aria-label\": \"sticky table\",\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [headings.map((heading, index) => /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: [heading, options[index] == \"Select\" ? /*#__PURE__*/_jsxDEV(IconButton, {\n                    \"aria-label\": \"add\",\n                    onClick: () => this.hand,\n                    children: /*#__PURE__*/_jsxDEV(MoreVertIcon, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 161,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 160,\n                    columnNumber: 25\n                  }, this) : null, /*#__PURE__*/_jsxDEV(Menu, {\n                    id: \"long-menu\",\n                    anchorEl: this.state.menuPosition,\n                    open: Boolean(this.state.menuPosition),\n                    onClose: () => this.hideCategories(),\n                    children: [categories.map((category, index) => /*#__PURE__*/_jsxDEV(MenuItem, {\n                      onClick: () => {\n                        if (index > 3) removeCategory(category);\n                      },\n                      children: [category, index > 3 ? /*#__PURE__*/_jsxDEV(RemoveIcon, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 182,\n                        columnNumber: 42\n                      }, this) : null]\n                    }, category, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 175,\n                      columnNumber: 27\n                    }, this)), /*#__PURE__*/_jsxDEV(MenuItem, {\n                      onKeyDown: e => e.stopPropagation(),\n                      children: [/*#__PURE__*/_jsxDEV(TextField, {\n                        id: \"standard-basic\",\n                        label: \"New Category\",\n                        onChange: e => this.updateCategory(e),\n                        value: this.state.newCategory\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 189,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(AddIcon, {\n                        onClick: () => {\n                          console.log(\"Went\");\n                          addCategory(this.state.newCategory);\n                          this.state.newCategory = \"\";\n                          this.setState({\n                            newCategory: this.state.newCategory\n                          });\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 196,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 187,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 166,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 154,\n                  columnNumber: 21\n                }, this)), /*#__PURE__*/_jsxDEV(TableCell, {\n                  width: \"100vw\",\n                  align: \"right\",\n                  children: /*#__PURE__*/_jsxDEV(IconButton, {\n                    \"aria-label\": \"add\",\n                    onClick: () => this.addRowHandler(),\n                    children: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 216,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 213,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 211,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: [this.state.add ? /*#__PURE__*/_jsxDEV(TableRowComp, {\n                headings: headings,\n                row: this.state.newRow,\n                options: options,\n                categories: categories,\n                addRow: addRow,\n                editRow: editRow,\n                removeRow: removeRow,\n                rowForAdd: true,\n                addSnacks: this.addSnack.bind(this),\n                toggleAdd: this.toggleAdd.bind(this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 19\n              }, this) : null, data.map(row => /*#__PURE__*/_jsxDEV(TableRowComp, {\n                headings: headings,\n                row: row,\n                options: options,\n                categories: categories,\n                addRow: addRow,\n                editRow: editRow,\n                removeRow: removeRow,\n                rowForAdd: false,\n                addSnacks: this.addSnack.bind(this),\n                toggleAdd: this.toggleAdd.bind(this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 246,\n                columnNumber: 19\n              }, this)), /*#__PURE__*/_jsxDEV(Snackbar, {\n                open: this.state.displaySnack,\n                autoHideDuration: 2000,\n                onClose: () => this.snackBarOnClose(),\n                onExited: () => this.snackBarOnExited(),\n                children: /*#__PURE__*/_jsxDEV(Alert, {\n                  severity: this.state.currentSnackMsg ? this.state.currentSnackMsg.includes(\"Success\") ? \"success\" : \"error\" : undefined,\n                  variant: \"filled\",\n                  children: this.renderHelperMsg()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 267,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 260,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default TableComp;","map":{"version":3,"sources":["/Users/emilyhuang/Documents/CSC309/groupProject/team06/src/components/Table/index.js"],"names":["React","TableRowComp","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","IconButton","AddIcon","MoreVertIcon","Snackbar","Alert","Menu","MenuItem","RemoveIcon","TextField","TableComp","Component","constructor","props","state","add","newRow","snacks","currentSnackMsg","undefined","displaySnack","menuPosition","newCategory","componentDidUpdate","length","setState","slice","addRowHandler","newData","headings","map","value","index","toggleAdd","displayCategories","e","currentTarget","hideCategories","updateCategory","target","addSnack","message","push","snackBarOnClose","snackBarOnExited","renderHelperMsg","render","data","options","categories","addRow","editRow","removeRow","addCategory","removeCategory","heading","hand","Boolean","category","stopPropagation","console","log","bind","row","includes"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TableRowComp from '../TableRow'\n\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport AddIcon from '@material-ui/icons/Add';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\n\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { Alert } from '@material-ui/lab';\n\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport TextField from '@material-ui/core/TextField';\n\nimport \"./table.css\"\n\nclass TableComp extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // true -> displays the new row to be added to table, false -> hides the new row to be added to table \n      add: false,\n      // the default values for the new row to be added to table \n      newRow: [],\n      // array that holds all the snacks (notifications) that remains to be shown \n      snacks: [],\n      // the message that the snack should currently display\n      currentSnackMsg: undefined,\n      // true -> displays the snack, false -> hides the snack\n      displaySnack: false,\n      // the categories menu position on the screen\n      menuPosition: null,\n      // the category name that the user can input to add customized category\n      newCategory: \"\"\n    }\n\n  }\n\n  // this function is called whenever there's a change in the DOM \n  componentDidUpdate() {\n\n    // if there is a snack message to be shown but we currently don't have the snack opened \n    if (this.state.snacks.length && !this.state.currentSnackMsg) {\n      this.setState({ currentSnackMsg: this.state.snacks[0] })\n      this.setState({ snacks: this.state.snacks.slice(1) })\n      this.setState({ displaySnack: true })\n    }\n\n    // if there is a snack message to be shown and we are already displaying a snack, close the active one \n    else if (this.state.snacks.length && this.state.currentSnackMsg && this.state.displaySnack) {\n      this.setState({ displaySnack: false })\n    }\n\n  }\n\n  // handles action for the 'plus' button to add a new row to table \n  addRowHandler() {\n\n    // the new rows will contain the headings for the table (can be changed if needed)\n    const newData = {}\n    this.props.headings.map((value, index) => {\n      newData[value] = null\n      // if (this.props.options[index] == \"Date\") newData[value] = null\n      // else newData[value] = value\n    })\n\n    this.setState({ newRow: newData })\n    this.toggleAdd()\n\n  }\n\n  toggleAdd() {\n    this.setState({ add: !this.state.add })\n  }\n\n  // displays categories menu\n  displayCategories(e) {\n    this.setState({ menuPosition: e.currentTarget })\n  }\n\n  hideCategories() {\n    this.setState({ menuPosition: null })\n  }\n\n  // updates the category string as user is inputting \n  updateCategory(e) {\n    this.state.newCategory = e.target.value\n    this.setState({ newCategory: this.state.newCategory })\n  }\n\n  // adds a message to the snack array \n  addSnack(message) {\n    this.state.snacks.push(message)\n    this.setState({ snacks: this.state.snacks })\n  }\n\n  snackBarOnClose() {\n    this.setState({ displaySnack: false })\n  }\n\n  snackBarOnExited() {\n    this.setState({ currentSnackMsg: undefined })\n  }\n\n  // renders different helper messages depending on the error or success \n  renderHelperMsg() {\n    switch (this.state.currentSnackMsg) {\n      case \"addError\":\n        return \"Could not add, please check the fields.\"\n      case \"editError\":\n        return \"Could not edit, please check the fields.\"\n      case \"addSuccess\":\n        return \"Added successfully!\"\n      case \"editSuccess\":\n        return \"Edited successfully!\"\n      case \"deleteSuccess\":\n        return \"Deleted successfully!\"\n      default:\n        return \"\"\n    }\n  }\n\n  render() {\n\n    const { headings, data, options, categories, addRow, editRow, removeRow, addCategory, removeCategory } = this.props;\n\n    return (\n\n      <div>\n\n        <Paper>\n\n          <TableContainer className=\"TableContainer\">\n\n            <Table stickyHeader aria-label=\"sticky table\">\n\n              <TableHead>\n\n                <TableRow>\n\n                  {/* displays the headings for each column */}\n                  {headings.map((heading, index) =>\n                    <TableCell>\n\n                      {heading}\n\n                      {/* used for the vertical three dots icon, only display for \"select\" options */}\n                      {options[index] == \"Select\" ?\n                        <IconButton aria-label=\"add\" onClick={()=>this.hand}>\n                          <MoreVertIcon />\n                        </IconButton>\n                        : null\n                      }\n\n                      <Menu\n                        id=\"long-menu\"\n                        anchorEl={this.state.menuPosition}\n                        open={Boolean(this.state.menuPosition)}\n                        onClose={() => this.hideCategories()}\n                      >\n\n                        {/* user can't delete predetermined categories */}\n                        {categories.map((category, index) => (\n                          <MenuItem\n                            key={category}\n                            onClick={() => {\n                              if (index > 3) removeCategory(category)\n                            }}\n                          >\n                            {category}\n                            {index > 3 ? <RemoveIcon /> : null}\n\n                          </MenuItem>\n                        ))}\n\n                        <MenuItem onKeyDown={e => e.stopPropagation()}>\n\n                          <TextField\n                            id=\"standard-basic\"\n                            label=\"New Category\"\n                            onChange={(e) => this.updateCategory(e)}\n                            value={this.state.newCategory}\n                          />\n\n                          <AddIcon\n                            onClick={() => {\n                              console.log(\"Went\")\n                              addCategory(this.state.newCategory)\n                              this.state.newCategory = \"\"\n                              this.setState({ newCategory: this.state.newCategory })\n                            }} />\n\n                        </MenuItem>\n\n                      </Menu>\n\n                    </TableCell>\n                  )}\n\n                  <TableCell width=\"100vw\" align=\"right\">\n\n                    <IconButton\n                      aria-label=\"add\"\n                      onClick={() => this.addRowHandler()}>\n                      <AddIcon />\n                    </IconButton>\n\n                  </TableCell>\n\n                </TableRow>\n\n              </TableHead>\n\n              <TableBody>\n\n                {this.state.add ?\n\n                  <TableRowComp\n                    headings={headings}\n                    row={this.state.newRow}\n                    options={options}\n                    categories={categories}\n                    addRow={addRow}\n                    editRow={editRow}\n                    removeRow={removeRow}\n                    rowForAdd={true}\n                    addSnacks={this.addSnack.bind(this)}\n                    toggleAdd={this.toggleAdd.bind(this)}\n                  />\n\n                  : null\n                }\n\n                {data.map(row =>\n                  <TableRowComp\n                    headings={headings}\n                    row={row}\n                    options={options}\n                    categories={categories}\n                    addRow={addRow}\n                    editRow={editRow}\n                    removeRow={removeRow}\n                    rowForAdd={false}\n                    addSnacks={this.addSnack.bind(this)}\n                    toggleAdd={this.toggleAdd.bind(this)}\n                  />\n                )}\n\n                <Snackbar\n                  open={this.state.displaySnack}\n                  autoHideDuration={2000}\n                  onClose={() => this.snackBarOnClose()}\n                  onExited={() => this.snackBarOnExited()}\n                >\n\n                  <Alert\n                    severity={this.state.currentSnackMsg ? (this.state.currentSnackMsg.includes(\"Success\") ? \"success\" : \"error\") : undefined}\n                    variant=\"filled\">\n                    {this.renderHelperMsg()}\n                  </Alert>\n\n                </Snackbar>\n\n              </TableBody>\n\n            </Table>\n\n          </TableContainer>\n\n        </Paper >\n\n      </div >\n\n    )\n\n  }\n\n}\n\nexport default TableComp;"]},"metadata":{},"sourceType":"module"}