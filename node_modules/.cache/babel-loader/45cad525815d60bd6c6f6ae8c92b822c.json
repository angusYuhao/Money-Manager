{"ast":null,"code":"var _jsxFileName = \"/Users/emilyhuang/Documents/CSC309/groupProject/team06/src/components/Investments/PieChart.js\";\n//Tutorials followed:\n//https://stackoverflow.com/questions/33924150/how-to-access-canvas-context-in-react\n//https://stackoverflow.com/questions/27736288/how-to-fill-the-whole-canvas-with-specific-color\n//https://medium.com/@pdx.lucasm/canvas-with-react-js-32e133c05258\n//https://gist.github.com/prof3ssorSt3v3/7f16fe9397c013d364f2d4484cad3ca8\n//https://stackoverflow.com/questions/30790010/html-canvas-hover-text\n//https://stackoverflow.com/questions/6270785/how-to-determine-whether-a-point-x-y-is-contained-within-an-arc-section-of-a-c\nimport React, { useRef, useEffect } from 'react'; // $(\"#canvas\").mousemove(function(e){handleMouseMove(e);});\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PieChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      left: 0,\n      top: 0\n    };\n    this.width = 0;\n    this.height = 0;\n    this.pieChartRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    this.context = this.pieChartRef.current.getContext('2d');\n    let slices = [];\n    const {\n      stockList\n    } = this.props;\n    console.log(stockList);\n    let total = stockList.reduce((ttl, stock) => {\n      return ttl + stock.avgCost * stock.quantity;\n    }, 0);\n    console.log(\"total\");\n    console.log(total);\n    let startAngle = 0;\n    let radius = 120;\n    let cx = 300;\n    let cy = 300;\n\n    const randomHexColorCode = () => {\n      return \"#\" + Math.random().toString(16).slice(2, 8);\n    };\n\n    stockList.forEach(element => {\n      console.log(\"Drawing slice\");\n      this.context.lineWidth = 1;\n      this.context.strokeStyle = '#fafafa';\n      this.context.fillStyle = randomHexColorCode();\n      this.context.beginPath(); // draw the pie wedges\n\n      let endAngle = element.avgCost * element.quantity / total * Math.PI * 2 + startAngle;\n      this.context.moveTo(cx, cy);\n      this.context.arc(cx, cy, radius, startAngle, endAngle);\n      this.context.lineTo(cx, cy);\n      this.context.fill();\n      this.context.stroke();\n      this.context.closePath(); // add the labels\n\n      this.context.beginPath();\n      this.context.font = '20px Helvetica, Calibri';\n      this.context.textAlign = 'center';\n      this.context.fillStyle = 'rebeccapurple'; // 1.5 * radius is the length of the Hypotenuse\n\n      let theta = (startAngle + endAngle) / 2;\n      let deltaY = Math.sin(theta) * 1.5 * radius;\n      let deltaX = Math.cos(theta) * 1.5 * radius;\n      this.context.fillText(element.name, deltaX + cx, deltaY + cy);\n      let percentage = Math.round(+(element.avgCost * element.quantity * 100 / total));\n      this.context.fillText(percentage + \"%\", deltaX * 1.3 + cx, deltaY * 1.4 + cy);\n      this.context.closePath();\n      startAngle = endAngle; //store the slice information\n\n      slices.push({\n        \"name\": element.name,\n        \"cx\": cx,\n        \"cy\": cy,\n        \"colour\": this.context.fillStyle,\n        \"radius\": radius,\n        \"startAngle\": startAngle,\n        \"endAngle\": endAngle\n      });\n    });\n    document.addEventListener('mousemove', e => {\n      this.setState({\n        left: e.pageX,\n        top: e.pageY\n      });\n      console.log(e.pageX);\n      console.log(e.pageY);\n      let mouseX = parseInt(e.clientX);\n      let mouseY = parseInt(e.clientY);\n      let ctx = this.pieChartRef.current.getContext('2d');\n      let angleOk = false;\n\n      for (let i = 0; i < slices.length; i++) {\n        let s = slices[i]; // define the shape path we want to test against the mouse position\n        // defineShape(s.points);\n        //check the angle\n\n        let angle = Math.atan(mouseY - cy, mouseX - cx);\n\n        if (startAngle < endAngle && startAngle < angle && angle < endAngle) {\n          console.log(\"Angle ok\");\n          angleOk = true;\n        } else if (startAngle > endAngle) {\n          if (angle > startAngle || angle < endAngle) {\n            console.log(\"Angle ok\");\n            angleOk = true;\n          }\n        } //all the slices \n\n\n        if (ctx.isPointInPath(mouseX, mouseY)) {\n          // if yes, fill the shape in red\n          s.drawcolor = 'red';\n        } else {\n          // if no, fill the shape with blue\n          s.drawcolor = s.color;\n        }\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: this.pieChartRef,\n      width: 600,\n      height: 600\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default PieChart;","map":{"version":3,"sources":["/Users/emilyhuang/Documents/CSC309/groupProject/team06/src/components/Investments/PieChart.js"],"names":["React","useRef","useEffect","PieChart","Component","constructor","props","state","left","top","width","height","pieChartRef","createRef","componentDidMount","context","current","getContext","slices","stockList","console","log","total","reduce","ttl","stock","avgCost","quantity","startAngle","radius","cx","cy","randomHexColorCode","Math","random","toString","slice","forEach","element","lineWidth","strokeStyle","fillStyle","beginPath","endAngle","PI","moveTo","arc","lineTo","fill","stroke","closePath","font","textAlign","theta","deltaY","sin","deltaX","cos","fillText","name","percentage","round","push","document","addEventListener","e","setState","pageX","pageY","mouseX","parseInt","clientX","mouseY","clientY","ctx","angleOk","i","length","s","angle","atan","isPointInPath","drawcolor","color","render"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC,C,CACA;;;;AAGA,MAAMC,QAAN,SAAuBH,KAAK,CAACI,SAA7B,CAAuC;AAOnCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AADe,SALnBC,KAKmB,GALX;AACJC,MAAAA,IAAI,EAAE,CADF;AAEJC,MAAAA,GAAG,EAAE;AAFD,KAKW;AAEf,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKC,MAAL,GAAc,CAAd;AACA,SAAKC,WAAL,gBAAmBZ,KAAK,CAACa,SAAN,EAAnB;AACH;;AAIDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,OAAL,GAAe,KAAKH,WAAL,CAAiBI,OAAjB,CAAyBC,UAAzB,CAAoC,IAApC,CAAf;AACA,QAAIC,MAAM,GAAG,EAAb;AAIA,UAAM;AAACC,MAAAA;AAAD,QAAc,KAAKb,KAAzB;AACAc,IAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AAEA,QAAIG,KAAK,GAAGH,SAAS,CAACI,MAAV,CAAkB,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAC1C,aAAOD,GAAG,GAAIC,KAAK,CAACC,OAAN,GAAgBD,KAAK,CAACE,QAApC;AACH,KAFW,EAET,CAFS,CAAZ;AAGAP,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACA,QAAIM,UAAU,GAAG,CAAjB;AACA,QAAIC,MAAM,GAAG,GAAb;AACA,QAAIC,EAAE,GAAG,GAAT;AACA,QAAIC,EAAE,GAAG,GAAT;;AACA,UAAMC,kBAAkB,GAAG,MAAM;AAC7B,aAAO,MAAMC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,KAA3B,CAAiC,CAAjC,EAAoC,CAApC,CAAb;AACH,KAFD;;AAIAjB,IAAAA,SAAS,CAACkB,OAAV,CAAkBC,OAAO,IAAI;AACzBlB,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,WAAKN,OAAL,CAAawB,SAAb,GAAyB,CAAzB;AACA,WAAKxB,OAAL,CAAayB,WAAb,GAA2B,SAA3B;AACA,WAAKzB,OAAL,CAAa0B,SAAb,GAAyBT,kBAAkB,EAA3C;AACA,WAAKjB,OAAL,CAAa2B,SAAb,GALyB,CAOzB;;AACA,UAAIC,QAAQ,GAAML,OAAO,CAACZ,OAAR,GAAkBY,OAAO,CAACX,QAA3B,GAAuCL,KAAxC,GAAiDW,IAAI,CAACW,EAAtD,GAA2D,CAA5D,GAAiEhB,UAAhF;AACA,WAAKb,OAAL,CAAa8B,MAAb,CAAoBf,EAApB,EAAwBC,EAAxB;AACA,WAAKhB,OAAL,CAAa+B,GAAb,CAAiBhB,EAAjB,EAAqBC,EAArB,EAAyBF,MAAzB,EAAiCD,UAAjC,EAA6Ce,QAA7C;AACA,WAAK5B,OAAL,CAAagC,MAAb,CAAoBjB,EAApB,EAAwBC,EAAxB;AACA,WAAKhB,OAAL,CAAaiC,IAAb;AACA,WAAKjC,OAAL,CAAakC,MAAb;AACA,WAAKlC,OAAL,CAAamC,SAAb,GAdyB,CAgBzB;;AACA,WAAKnC,OAAL,CAAa2B,SAAb;AACA,WAAK3B,OAAL,CAAaoC,IAAb,GAAoB,yBAApB;AACA,WAAKpC,OAAL,CAAaqC,SAAb,GAAyB,QAAzB;AACA,WAAKrC,OAAL,CAAa0B,SAAb,GAAyB,eAAzB,CApByB,CAqBzB;;AACA,UAAIY,KAAK,GAAG,CAACzB,UAAU,GAAGe,QAAd,IAA0B,CAAtC;AACA,UAAIW,MAAM,GAAGrB,IAAI,CAACsB,GAAL,CAASF,KAAT,IAAkB,GAAlB,GAAwBxB,MAArC;AACA,UAAI2B,MAAM,GAAGvB,IAAI,CAACwB,GAAL,CAASJ,KAAT,IAAkB,GAAlB,GAAwBxB,MAArC;AACA,WAAKd,OAAL,CAAa2C,QAAb,CAAsBpB,OAAO,CAACqB,IAA9B,EAAoCH,MAAM,GAAC1B,EAA3C,EAA+CwB,MAAM,GAACvB,EAAtD;AACA,UAAI6B,UAAU,GAAG3B,IAAI,CAAC4B,KAAL,CAAW,EAAGvB,OAAO,CAACZ,OAAR,GAAgBY,OAAO,CAACX,QAAxB,GAAiC,GAAlC,GAAuCL,KAAzC,CAAX,CAAjB;AACA,WAAKP,OAAL,CAAa2C,QAAb,CAAsBE,UAAU,GAAG,GAAnC,EAAyCJ,MAAM,GAAC,GAAR,GAAa1B,EAArD,EAA0DwB,MAAM,GAAC,GAAR,GAAavB,EAAtE;AACA,WAAKhB,OAAL,CAAamC,SAAb;AACAtB,MAAAA,UAAU,GAAGe,QAAb,CA7ByB,CA+BzB;;AACAzB,MAAAA,MAAM,CAAC4C,IAAP,CAAY;AACJ,gBAASxB,OAAO,CAACqB,IADb;AAEJ,cAAO7B,EAFH;AAGJ,cAAOC,EAHH;AAIJ,kBAAW,KAAKhB,OAAL,CAAa0B,SAJpB;AAKJ,kBAAWZ,MALP;AAMJ,sBAAeD,UANX;AAOJ,oBAAYe;AAPR,OAAZ;AAYH,KA5CD;AA8CAoB,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAwCC,CAAD,IAAO;AAC1C,WAAKC,QAAL,CAAc;AAAC1D,QAAAA,IAAI,EAAEyD,CAAC,CAACE,KAAT;AAAgB1D,QAAAA,GAAG,EAAEwD,CAAC,CAACG;AAAvB,OAAd;AACAhD,MAAAA,OAAO,CAACC,GAAR,CAAY4C,CAAC,CAACE,KAAd;AACA/C,MAAAA,OAAO,CAACC,GAAR,CAAY4C,CAAC,CAACG,KAAd;AACA,UAAIC,MAAM,GAACC,QAAQ,CAACL,CAAC,CAACM,OAAH,CAAnB;AACA,UAAIC,MAAM,GAACF,QAAQ,CAACL,CAAC,CAACQ,OAAH,CAAnB;AAGA,UAAIC,GAAG,GAAG,KAAK9D,WAAL,CAAiBI,OAAjB,CAAyBC,UAAzB,CAAoC,IAApC,CAAV;AACA,UAAI0D,OAAO,GAAG,KAAd;;AACA,WAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAC1D,MAAM,CAAC2D,MAArB,EAA4BD,CAAC,EAA7B,EAAgC;AAC5B,YAAIE,CAAC,GAAC5D,MAAM,CAAC0D,CAAD,CAAZ,CAD4B,CAG5B;AACA;AAEA;;AACA,YAAIG,KAAK,GAAG9C,IAAI,CAAC+C,IAAL,CAAUR,MAAM,GAAGzC,EAAnB,EAAsBsC,MAAM,GAAGvC,EAA/B,CAAZ;;AACA,YAAGF,UAAU,GAAGe,QAAb,IAAyBf,UAAU,GAAGmD,KAAtC,IAA+CA,KAAK,GAAGpC,QAA1D,EAAmE;AAC/DvB,UAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAsD,UAAAA,OAAO,GAAG,IAAV;AACH,SAHD,MAGM,IAAG/C,UAAU,GAAGe,QAAhB,EAAyB;AAC3B,cAAGoC,KAAK,GAAGnD,UAAR,IAAsBmD,KAAK,GAAGpC,QAAjC,EAA0C;AACtCvB,YAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAsD,YAAAA,OAAO,GAAG,IAAV;AACH;AACJ,SAhB2B,CAoB5B;;;AACA,YAAGD,GAAG,CAACO,aAAJ,CAAkBZ,MAAlB,EAA0BG,MAA1B,CAAH,EAAqC;AACnC;AACAM,UAAAA,CAAC,CAACI,SAAF,GAAY,KAAZ;AACD,SAHD,MAGK;AACH;AACAJ,UAAAA,CAAC,CAACI,SAAF,GAAYJ,CAAC,CAACK,KAAd;AACD;AAEF;AACN,KAxCD;AA2CH;;AAEDC,EAAAA,MAAM,GAAG;AACL,wBACE;AAAQ,MAAA,GAAG,EAAE,KAAKxE,WAAlB;AAA+B,MAAA,KAAK,EAAI,GAAxC;AAA6C,MAAA,MAAM,EAAI;AAAvD;AAAA;AAAA;AAAA;AAAA,YADF;AAGH;;AArIkC;;AAwIvC,eAAeT,QAAf","sourcesContent":["//Tutorials followed:\n//https://stackoverflow.com/questions/33924150/how-to-access-canvas-context-in-react\n//https://stackoverflow.com/questions/27736288/how-to-fill-the-whole-canvas-with-specific-color\n//https://medium.com/@pdx.lucasm/canvas-with-react-js-32e133c05258\n//https://gist.github.com/prof3ssorSt3v3/7f16fe9397c013d364f2d4484cad3ca8\n//https://stackoverflow.com/questions/30790010/html-canvas-hover-text\n//https://stackoverflow.com/questions/6270785/how-to-determine-whether-a-point-x-y-is-contained-within-an-arc-section-of-a-c\n\n\n\nimport React, { useRef, useEffect } from 'react'\n// $(\"#canvas\").mousemove(function(e){handleMouseMove(e);});\n\n\nclass PieChart extends React.Component {\n    \n    state = {\n        left: 0,\n        top: 0 \n    }\n\n    constructor(props) {\n        super(props);\n        this.width = 0;\n        this.height = 0;\n        this.pieChartRef = React.createRef();\n    }\n    \n    \n\n    componentDidMount() {\n        this.context = this.pieChartRef.current.getContext('2d');\n        let slices = [];\n        \n\n        \n        const {stockList} = this.props\n        console.log(stockList)\n        \n        let total = stockList.reduce( (ttl, stock) => {\n            return ttl + (stock.avgCost * stock.quantity)\n        }, 0);\n        console.log(\"total\")\n        console.log(total)\n        let startAngle = 0; \n        let radius = 120;\n        let cx = 300;\n        let cy = 300;\n        const randomHexColorCode = () => {\n            return \"#\" + Math.random().toString(16).slice(2, 8)\n        };\n\n        stockList.forEach(element => {\n            console.log(\"Drawing slice\")\n            this.context.lineWidth = 1;\n            this.context.strokeStyle = '#fafafa';\n            this.context.fillStyle = randomHexColorCode();\n            this.context.beginPath();\n            \n            // draw the pie wedges\n            let endAngle = (((element.avgCost * element.quantity) / total) * Math.PI * 2) + startAngle;\n            this.context.moveTo(cx, cy);\n            this.context.arc(cx, cy, radius, startAngle, endAngle);\n            this.context.lineTo(cx, cy);\n            this.context.fill();\n            this.context.stroke();\n            this.context.closePath();\n            \n            // add the labels\n            this.context.beginPath();\n            this.context.font = '20px Helvetica, Calibri';\n            this.context.textAlign = 'center';\n            this.context.fillStyle = 'rebeccapurple';\n            // 1.5 * radius is the length of the Hypotenuse\n            let theta = (startAngle + endAngle) / 2;\n            let deltaY = Math.sin(theta) * 1.5 * radius;\n            let deltaX = Math.cos(theta) * 1.5 * radius;\n            this.context.fillText(element.name, deltaX+cx, deltaY+cy);\n            let percentage = Math.round(+((element.avgCost*element.quantity*100)/total));\n            this.context.fillText(percentage + \"%\", (deltaX*1.3)+cx, (deltaY*1.4)+cy);\n            this.context.closePath();\n            startAngle = endAngle;\n\n            //store the slice information\n            slices.push({ \n                    \"name\" : element.name,\n                    \"cx\" : cx,\n                    \"cy\" : cy,\n                    \"colour\" : this.context.fillStyle,\n                    \"radius\" : radius,\n                    \"startAngle\" : startAngle,\n                    \"endAngle\": endAngle,\n            });\n\n\n\n        });\n\n        document.addEventListener('mousemove', (e) => {\n            this.setState({left: e.pageX, top: e.pageY});\n            console.log(e.pageX)\n            console.log(e.pageY)\n            let mouseX=parseInt(e.clientX);\n            let mouseY=parseInt(e.clientY);\n            \n            \n            let ctx = this.pieChartRef.current.getContext('2d');\n            let angleOk = false;\n            for(let i=0;i<slices.length;i++){\n                let s=slices[i];\n            \n                // define the shape path we want to test against the mouse position\n                // defineShape(s.points);\n                \n                //check the angle\n                let angle = Math.atan(mouseY - cy,mouseX - cx);\n                if(startAngle < endAngle && startAngle < angle && angle < endAngle){\n                    console.log(\"Angle ok\")\n                    angleOk = true;\n                }else if(startAngle > endAngle){\n                    if(angle > startAngle || angle < endAngle){\n                        console.log(\"Angle ok\")\n                        angleOk = true;\n                    }\n                }\n                \n\n\n                //all the slices \n                if(ctx.isPointInPath(mouseX, mouseY)){\n                  // if yes, fill the shape in red\n                  s.drawcolor='red';\n                }else{\n                  // if no, fill the shape with blue\n                  s.drawcolor=s.color;\n                }\n            \n              }\n        });\n        \n        \n    }\n    \n    render() {\n        return (\n          <canvas ref={this.pieChartRef} width = {600} height = {600}/>\n       )\n    }\n}\n\nexport default PieChart"]},"metadata":{},"sourceType":"module"}