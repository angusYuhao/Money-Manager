{"ast":null,"code":"var _jsxFileName = \"/Users/emilyhuang/Documents/CSC309/groupProject/team06/src/components/Investments/PieChart.js\";\n//Tutorials followed:\n//https://stackoverflow.com/questions/33924150/how-to-access-canvas-context-in-react\n//https://stackoverflow.com/questions/27736288/how-to-fill-the-whole-canvas-with-specific-color\n//https://medium.com/@pdx.lucasm/canvas-with-react-js-32e133c05258\n//https://gist.github.com/prof3ssorSt3v3/7f16fe9397c013d364f2d4484cad3ca8\n//https://stackoverflow.com/questions/30790010/html-canvas-hover-text\n//https://stackoverflow.com/questions/6270785/how-to-determine-whether-a-point-x-y-is-contained-within-an-arc-section-of-a-c\n//https://stackoverflow.com/questions/2142535/how-to-clear-the-canvas-for-redrawing\nimport React, { useRef, useEffect, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PieChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      canvasWidth: 600,\n      canvasHeight: 600,\n      slices: [],\n      radius: 120\n    };\n\n    this.randomHexColorCode = () => {\n      return \"#\" + Math.random().toString(16).slice(2, 8);\n    };\n\n    this.drawSlices = () => {\n      let slicesList = this.state.slices;\n      const {\n        stockList\n      } = this.props;\n      let startAngle = 0;\n      let radius = this.state.radius;\n      let cx = this.state.canvasWidth / 2;\n      let cy = this.state.canvasHeight / 2;\n      let total = stockList.reduce((ttl, stock) => {\n        return ttl + stock.avgCost * stock.quantity;\n      }, 0);\n      stockList.forEach(element => {\n        console.log(\"Drawing slice\");\n        this.context.lineWidth = 1;\n        this.context.strokeStyle = '#fafafa';\n        this.context.fillStyle = this.randomHexColorCode();\n        this.context.beginPath(); // draw the pie wedges\n\n        let endAngle = element.avgCost * element.quantity / total * Math.PI * 2 + startAngle;\n        this.context.moveTo(cx, cy);\n        this.context.arc(cx, cy, radius, startAngle, endAngle);\n        this.context.lineTo(cx, cy);\n        this.context.fill();\n        this.context.stroke();\n        this.context.closePath(); // add the labels\n\n        this.context.beginPath();\n        this.context.font = '20px Helvetica, Calibri';\n        this.context.textAlign = 'center';\n        this.context.fillStyle = 'rebeccapurple'; // 1.5 * radius is the length of the Hypotenuse\n\n        let theta = (startAngle + endAngle) / 2;\n        let deltaY = Math.sin(theta) * 1.5 * radius;\n        let deltaX = Math.cos(theta) * 1.5 * radius;\n        this.context.fillText(element.name, deltaX + cx, deltaY + cy);\n        let percentage = Math.round(+(element.avgCost * element.quantity * 100 / total));\n        this.context.fillText(percentage + \"%\", deltaX * 1.3 + cx, deltaY * 1.4 + cy);\n        this.context.closePath(); //store the slice information\n\n        this.state.slices.push({\n          \"name\": element.name,\n          \"cx\": cx,\n          \"cy\": cy,\n          \"colour\": this.context.fillStyle,\n          \"startAngle\": startAngle,\n          \"endAngle\": endAngle\n        });\n        startAngle = endAngle;\n      });\n      console.log(this.state.slices);\n    };\n\n    this.width = 0;\n    this.height = 0;\n    this.pieChartRef = /*#__PURE__*/React.createRef();\n  } // let elem = document.querySelector('canvas');\n  // let rect = elem.getBoundingClientRect();\n  // console.log(rect);\n\n\n  componentDidMount() {\n    console.log(\"Did mount!\");\n    this.context = this.pieChartRef.current.getContext('2d');\n    let elem = document.querySelector('canvas');\n    let rect = elem.getBoundingClientRect();\n    console.log(rect);\n    const {\n      stockList\n    } = this.props;\n    console.log(stockList);\n    this.drawSlices();\n    document.addEventListener('mousemove', e => {\n      let mouseX = parseInt(e.clientX);\n      let mouseY = parseInt(e.clientY); // console.log(e.pageX)\n      // console.log(e.pageY)\n      // console.log(e.clientX)\n      // console.log(e.clientY)\n\n      let cx = this.state.canvasWidth / 2;\n      let cy = this.state.canvasHeight / 2;\n      let relativeX = 0;\n      let relativeY = 0; //quadrant I & II:\n\n      if (mouseY > rect.y && mouseY < rect.y + cy) {\n        relativeY = cy + rect.y - mouseY; //quadrant I:\n\n        if (mouseX > rect.x + cx && mouseX < rect.x + 2 * cx) {\n          relativeX = mouseX - (cx + rect.x);\n          angle = Math.atan(relativeY, relativeX); //quadrant II:\n        } else {\n          relativeX = cx + rect.x - mouseX;\n          angle = Math.PI + Math.atan(relativeY, relativeX);\n        } //quadrant III & IV:\n\n      } else if (mouseY > cy + rect.y && mouseY < rect.y + 2 * cy) {\n        relativeY = mouseY - (cy + rect.y); //quadrant IV:\n\n        if (mouseX > rect.x + cx && mouseX < rect.x + 2 * cx) {\n          relativeX = mouseX - (cx + rect.x);\n          angle = Math.PI * 2 + Math.atan(relativeY, relativeX); //quadrant III:\n        } else {\n          relativeX = cx + rect.x - mouseX;\n          angle = Math.PI + Math.atan(relativeY, relativeX);\n        }\n      }\n\n      let distanceOk = false;\n      let distance = Math.sqrt((relativeX - cx) * (relativeX - cx) + (relativeY - cy) * (relativeY - cy));\n\n      if (distance < this.state.radius) {\n        distanceOk = true; // console.log(distance)\n        //console.log(\"Distance ok\")\n      }\n\n      for (let i = 0; i < this.state.slices.length; i++) {\n        let s = this.state.slices[i];\n        let angle = 0; // define the shape path we want to test against the mouse position\n        // defineShape(s.points);\n        //check the angle\n\n        let angleOk = false;\n        console.log(\"\\nAngles:\"); // console.log(angle)\n        // console.log(s.startAngle)\n        // console.log(s.endAngle)\n        // let mouseAngle = Math.atan(e.pageY - cy,e.pageX - cx);\n\n        if (s.startAngle < s.endAngle && s.startAngle < angle && angle < s.endAngle) {\n          console.log(\"Angle ok\");\n          console.log(s.name);\n          angleOk = true;\n        } // }else if(s.startAngle > s.endAngle){\n        //     if(angle > s.startAngle || angle < s.endAngle){\n        //         console.log(\"Angle ok\")\n        //         angleOk = true;\n        //     }\n        // }\n        //check the radius\n        //this distance is wrong:\n        // if(mouseX > (this.state.canvasWidth + rect.x)){\n        //     //this means that the mouse is outside the canvas\n        //     distanceOk = false;\n        //     console.log(\"too far right\")\n        // }\n        //get coordinates relative to the canvas\n        // console.log(relativeX)\n        // console.log(relativeY)\n        //console.log(distance)\n        // console.log(mouseX)\n        // console.log(mouseY)\n        // console.log(cx)\n        // console.log(cy)\n        //all the slices \n\n\n        if (angleOk && distanceOk) {\n          // if yes, fill the shape in red\n          console.log(\"hovering over slice\");\n          console.log(s.name); //   s.drawcolor='red';\n        } else {// if no, fill the shape with blue\n            //   s.drawcolor=s.colour;\n          }\n      }\n    });\n  }\n\n  componentDidUpdate() {\n    console.log(\"Did update!\");\n    let elem = document.querySelector('canvas');\n    let rect = elem.getBoundingClientRect();\n    console.log(rect);\n    console.log(rect.x);\n    console.log(rect.y);\n    console.log(rect.width);\n    console.log(rect.height);\n    this.context = this.pieChartRef.current.getContext('2d');\n    const context = this.context; //clear canvas\n\n    context.clearRect(0, 0, rect.width, rect.height);\n    context.beginPath(); //clear slices\n\n    this.state.slices = [];\n    const {\n      stockList\n    } = this.props;\n    console.log(stockList);\n    this.drawSlices();\n    document.addEventListener('mousemove', e => {\n      let mouseX = parseInt(e.clientX);\n      let mouseY = parseInt(e.clientY); // console.log(e.pageX)\n      // console.log(e.pageY)\n      // console.log(e.clientX)\n      // console.log(e.clientY)\n\n      let cx = this.state.canvasWidth / 2;\n      let cy = this.state.canvasHeight / 2;\n\n      for (let i = 0; i < this.state.slices.length; i++) {\n        let s = this.state.slices[i];\n        let relativeX = 0;\n        let relativeY = 0; //quadrant I & II:\n\n        if (mouseY > rect.y && mouseY < rect.y + cy) {\n          relativeY = cy + rect.y - mouseY; //quadrant III & IV:\n        } else if (mouseY > cy + rect.y && mouseY < rect.y + 2 * cy) {\n          relativeY = mouseY - (cy + rect.y);\n        } //quadrant I or IV:\n\n\n        if (mouseX > rect.x + cx && mouseX < rect.x + 2 * cx) {\n          relativeX = mouseX - (cx + rect.x); //quadrant II or III:\n        } else {\n          relativeX = cx + rect.x - mouseX;\n        } //check the angle\n\n\n        let angleOk = false;\n        let angle = Math.atan(relativeY, relativeX); // let mouseAngle = Math.atan(e.pageY - cy,e.pageX - cx);\n\n        if (s.startAngle < s.endAngle && s.startAngle < angle && angle < s.endAngle) {\n          //console.log(\"Angle ok\")\n          angleOk = true;\n        } else if (s.startAngle > s.endAngle) {\n          if (angle > s.startAngle || angle < s.endAngle) {\n            //console.log(\"Angle ok\")\n            angleOk = true;\n          }\n        } //check the radius\n\n\n        let distanceOk = false; //this distance is wrong:\n\n        let distance = Math.sqrt((mouseX - (cx + rect.x)) * (mouseX - (cx + rect.x)) + (mouseY - (cy + rect.y)) * (mouseY - (cy + rect.y))); // console.log(mouseX)\n        // console.log(mouseY)\n        // console.log(cx)\n        // console.log(cy)\n        //all the slices \n\n        if (angleOk && distanceOk) {\n          // if yes, fill the shape in red\n          console.log(\"hovering over slice\"); //   s.drawcolor='red';\n        } else {// if no, fill the shape with blue\n            //   s.drawcolor=s.colour;\n          }\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: this.pieChartRef,\n      width: this.state.canvasWidth,\n      height: this.state.canvasHeight\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default PieChart;","map":{"version":3,"sources":["/Users/emilyhuang/Documents/CSC309/groupProject/team06/src/components/Investments/PieChart.js"],"names":["React","useRef","useEffect","useReducer","PieChart","Component","constructor","props","state","canvasWidth","canvasHeight","slices","radius","randomHexColorCode","Math","random","toString","slice","drawSlices","slicesList","stockList","startAngle","cx","cy","total","reduce","ttl","stock","avgCost","quantity","forEach","element","console","log","context","lineWidth","strokeStyle","fillStyle","beginPath","endAngle","PI","moveTo","arc","lineTo","fill","stroke","closePath","font","textAlign","theta","deltaY","sin","deltaX","cos","fillText","name","percentage","round","push","width","height","pieChartRef","createRef","componentDidMount","current","getContext","elem","document","querySelector","rect","getBoundingClientRect","addEventListener","e","mouseX","parseInt","clientX","mouseY","clientY","relativeX","relativeY","y","x","angle","atan","distanceOk","distance","sqrt","i","length","s","angleOk","componentDidUpdate","clearRect","render"],"mappings":"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","sourcesContent":["//Tutorials followed:\n//https://stackoverflow.com/questions/33924150/how-to-access-canvas-context-in-react\n//https://stackoverflow.com/questions/27736288/how-to-fill-the-whole-canvas-with-specific-color\n//https://medium.com/@pdx.lucasm/canvas-with-react-js-32e133c05258\n//https://gist.github.com/prof3ssorSt3v3/7f16fe9397c013d364f2d4484cad3ca8\n//https://stackoverflow.com/questions/30790010/html-canvas-hover-text\n//https://stackoverflow.com/questions/6270785/how-to-determine-whether-a-point-x-y-is-contained-within-an-arc-section-of-a-c\n//https://stackoverflow.com/questions/2142535/how-to-clear-the-canvas-for-redrawing\n\n\n\nimport React, { useRef, useEffect, useReducer } from 'react'\n\nclass PieChart extends React.Component {\n    state = {\n        canvasWidth: 600,\n        canvasHeight: 600,\n        slices: [],\n        radius: 120\n    }\n\n    constructor(props) {\n        super(props);\n        this.width = 0;\n        this.height = 0;\n        this.pieChartRef = React.createRef();\n    }\n    \n    // let elem = document.querySelector('canvas');\n    // let rect = elem.getBoundingClientRect();\n    // console.log(rect);\n\n    randomHexColorCode = () => {\n        return \"#\" + Math.random().toString(16).slice(2, 8)\n    }\n\n    drawSlices = () => {\n        let slicesList = this.state.slices;\n        \n        const {stockList} = this.props\n        let startAngle = 0; \n        let radius = this.state.radius;\n        let cx = this.state.canvasWidth/2;\n        let cy = this.state.canvasHeight/2;\n        let total = stockList.reduce( (ttl, stock) => {\n            return ttl + (stock.avgCost * stock.quantity)\n        }, 0);\n\n        stockList.forEach(element => {\n            console.log(\"Drawing slice\")\n            \n            this.context.lineWidth = 1;\n            this.context.strokeStyle = '#fafafa';\n            this.context.fillStyle = this.randomHexColorCode();\n            this.context.beginPath();\n            \n            // draw the pie wedges\n            let endAngle = (((element.avgCost * element.quantity) / total) * Math.PI * 2) + startAngle;\n            this.context.moveTo(cx, cy);\n            this.context.arc(cx, cy, radius, startAngle, endAngle);\n            this.context.lineTo(cx, cy);\n            this.context.fill();\n            this.context.stroke();\n            this.context.closePath();\n            \n            // add the labels\n            this.context.beginPath();\n            this.context.font = '20px Helvetica, Calibri';\n            this.context.textAlign = 'center';\n            this.context.fillStyle = 'rebeccapurple';\n            // 1.5 * radius is the length of the Hypotenuse\n            let theta = (startAngle + endAngle) / 2;\n            let deltaY = Math.sin(theta) * 1.5 * radius;\n            let deltaX = Math.cos(theta) * 1.5 * radius;\n            this.context.fillText(element.name, deltaX+cx, deltaY+cy);\n            let percentage = Math.round(+((element.avgCost*element.quantity*100)/total));\n            this.context.fillText(percentage + \"%\", (deltaX*1.3)+cx, (deltaY*1.4)+cy);\n            this.context.closePath();\n            \n\n            //store the slice information\n            this.state.slices.push({ \n                    \"name\" : element.name,\n                    \"cx\" : cx,\n                    \"cy\" : cy,\n                    \"colour\" : this.context.fillStyle,\n                    \"startAngle\" : startAngle,\n                    \"endAngle\": endAngle,\n            });\n            startAngle = endAngle;\n        });\n     \n        console.log(this.state.slices)\n        \n    }\n\n\n\n\n\n    componentDidMount() {\n        console.log(\"Did mount!\")\n        this.context = this.pieChartRef.current.getContext('2d');\n        let elem = document.querySelector('canvas');\n        let rect = elem.getBoundingClientRect();\n        console.log(rect);\n        \n        const {stockList} = this.props\n        console.log(stockList)\n        this.drawSlices();\n        \n\n        document.addEventListener('mousemove', (e) => {\n            let mouseX=parseInt(e.clientX);\n            let mouseY=parseInt(e.clientY);\n            // console.log(e.pageX)\n            // console.log(e.pageY)\n            // console.log(e.clientX)\n            // console.log(e.clientY)\n           \n            let cx = this.state.canvasWidth/2;\n            let cy = this.state.canvasHeight/2;\n\n            let relativeX = 0;\n            let relativeY = 0;\n\n            //quadrant I & II:\n            if(mouseY > rect.y && mouseY < (rect.y + cy)){\n                relativeY = (cy + rect.y) - mouseY;\n                //quadrant I:\n                if(mouseX > (rect.x + cx) && mouseX < rect.x + (2*cx)){\n                    relativeX = mouseX - (cx + rect.x);\n                    angle = Math.atan(relativeY,relativeX);\n                //quadrant II:\n                }else{\n                    relativeX = (cx + rect.x) - mouseX;\n                    angle = Math.PI + Math.atan(relativeY,relativeX);\n                }\n            //quadrant III & IV:\n            }else if (mouseY > cy + rect.y && mouseY < rect.y + (2*cy)){\n                relativeY = mouseY - (cy + rect.y);\n                //quadrant IV:\n                if(mouseX > (rect.x + cx) && mouseX < rect.x + (2*cx)){\n                    relativeX = mouseX - (cx + rect.x);\n                    angle = (Math.PI * 2) +Math.atan(relativeY,relativeX);\n                //quadrant III:\n                }else{\n                    relativeX = (cx + rect.x) - mouseX;\n                    angle = Math.PI + Math.atan(relativeY,relativeX);\n                }\n            }\n\n            let distanceOk = false;\n\n            let distance = Math.sqrt( ((relativeX - cx) * (relativeX - cx)) +  ((relativeY - cy) * (relativeY - cy)) );\n\n            if(distance < this.state.radius){\n                distanceOk = true;\n                // console.log(distance)\n                //console.log(\"Distance ok\")\n            }\n\n            for(let i=0;i<this.state.slices.length;i++){\n                let s=this.state.slices[i];\n                \n                let angle = 0;\n                // define the shape path we want to test against the mouse position\n                // defineShape(s.points);\n\n                \n\n                \n\n\n                //check the angle\n                let angleOk = false;\n                \n        \n                console.log(\"\\nAngles:\")\n                // console.log(angle)\n                // console.log(s.startAngle)\n                // console.log(s.endAngle)\n                // let mouseAngle = Math.atan(e.pageY - cy,e.pageX - cx);\n         \n                if(s.startAngle < s.endAngle && s.startAngle < angle && angle < s.endAngle){\n                    console.log(\"Angle ok\")\n                    console.log(s.name)\n                    angleOk = true;\n\n                }\n                // }else if(s.startAngle > s.endAngle){\n                //     if(angle > s.startAngle || angle < s.endAngle){\n                //         console.log(\"Angle ok\")\n                        \n                //         angleOk = true;\n\n\n\n                //     }\n                // }\n                \n                //check the radius\n                \n                //this distance is wrong:\n                // if(mouseX > (this.state.canvasWidth + rect.x)){\n                //     //this means that the mouse is outside the canvas\n                //     distanceOk = false;\n                //     console.log(\"too far right\")\n                // }\n\n                //get coordinates relative to the canvas\n                \n                // console.log(relativeX)\n                // console.log(relativeY)\n                \n                \n                //console.log(distance)\n                // console.log(mouseX)\n                // console.log(mouseY)\n                // console.log(cx)\n                // console.log(cy)\n\n\n                \n\n                //all the slices \n                if(angleOk && distanceOk){\n                  // if yes, fill the shape in red\n                  console.log(\"hovering over slice\")\n                  console.log(s.name)\n\n                //   s.drawcolor='red';\n                  \n                }else{\n                  // if no, fill the shape with blue\n                //   s.drawcolor=s.colour;\n                }\n                \n              }\n        }); \n    }\n\n    componentDidUpdate() {\n        console.log(\"Did update!\")\n        let elem  = document.querySelector('canvas');\n        let rect = elem.getBoundingClientRect();\n        console.log(rect);\n        console.log(rect.x)\n        console.log(rect.y)\n        console.log(rect.width)\n        console.log(rect.height)\n\n        this.context = this.pieChartRef.current.getContext('2d');\n        const context = this.context;\n\n        //clear canvas\n        context.clearRect(0, 0, rect.width, rect.height);\n        context.beginPath();\n\n        //clear slices\n        this.state.slices = [];\n        \n        const {stockList} = this.props\n        console.log(stockList)\n\n        this.drawSlices();\n\n        document.addEventListener('mousemove', (e) => {\n            let mouseX=parseInt(e.clientX);\n            let mouseY=parseInt(e.clientY);\n            // console.log(e.pageX)\n            // console.log(e.pageY)\n            // console.log(e.clientX)\n            // console.log(e.clientY)\n\n            let cx = this.state.canvasWidth/2;\n            let cy = this.state.canvasHeight/2;\n            \n            for(let i=0;i<this.state.slices.length;i++){\n                let s=this.state.slices[i];\n                let relativeX = 0;\n                let relativeY = 0;\n                //quadrant I & II:\n                if(mouseY > rect.y && mouseY < (rect.y + cy)){\n                    relativeY = (cy + rect.y) - mouseY;\n                //quadrant III & IV:\n                }else if (mouseY > cy + rect.y && mouseY < rect.y + (2*cy)){\n                    relativeY = mouseY - (cy + rect.y);\n                }\n\n                //quadrant I or IV:\n                if(mouseX > (rect.x + cx) && mouseX < rect.x + (2*cx)){\n                    relativeX = mouseX - (cx + rect.x);\n                //quadrant II or III:\n                }else{\n                    relativeX = (cx + rect.x) - mouseX;\n                }\n\n\n                //check the angle\n                let angleOk = false;\n                let angle = Math.atan(relativeY,relativeX);\n                // let mouseAngle = Math.atan(e.pageY - cy,e.pageX - cx);\n         \n                if(s.startAngle < s.endAngle && s.startAngle < angle && angle < s.endAngle){\n                    //console.log(\"Angle ok\")\n                    angleOk = true;\n\n\n                }else if(s.startAngle > s.endAngle){\n                    if(angle > s.startAngle || angle < s.endAngle){\n                        //console.log(\"Angle ok\")\n                        angleOk = true;\n\n\n\n                    }\n                }\n                \n                //check the radius\n                let distanceOk = false;\n                //this distance is wrong:\n                let distance = Math.sqrt( ((mouseX - (cx+rect.x)) * (mouseX - (cx+rect.x))) +  ((mouseY - (cy+rect.y)) * (mouseY - (cy+rect.y))) );\n                \n                \n                \n                // console.log(mouseX)\n                // console.log(mouseY)\n                // console.log(cx)\n                // console.log(cy)\n\n\n                \n\n                //all the slices \n                if(angleOk && distanceOk){\n                  // if yes, fill the shape in red\n                  console.log(\"hovering over slice\")\n\n                //   s.drawcolor='red';\n                  \n                }else{\n                  // if no, fill the shape with blue\n                //   s.drawcolor=s.colour;\n                }\n                \n              }\n        }); \n    }\n    \n    render() {\n        return (\n          <canvas ref={this.pieChartRef} width = {this.state.canvasWidth} height = {this.state.canvasHeight} />\n       )\n    }\n}\n\nexport default PieChart"]},"metadata":{},"sourceType":"module"}